{"code":"function() {\n\t\tvar __self = this,\n\t\t\tsnackbar = document.createElement(\"div\");\n\t\t\n\t\t\/\/ Put the snackbar inside the snackbar container\n\t\tdocument.getElementById(\"snackbar-container\").appendChild(snackbar);\n\n\t  \t\/\/ Set the html inside the snackbar\n\t  \tsnackbar.innerHTML = this.getData();\n\t\t\n\t\t\/\/ Set the class of the snackbar\n\t\tsnackbar.setAttribute(\"class\", \"snackbar\");\n\n\t\t\/\/ Wait to set the active class so animations will be activated\n\t\tsetTimeout(function() {\n\t\t\tsnackbar.setAttribute(\"class\",\"snackbar \" + __self.options.activeClass);\n\t\t}, 50);\n\n\t\t\/\/ If the timeout is false the snackbar will not be destroyed after some time\n\t\t\/\/ only when the user clicks on it\n\t\tif (this.options.timeout !== false) {\n\t\t\t\/\/ Start the timer\n\t\t\tthis.timer(function() {\n\t\t\t\tsnackbar.setAttribute(\"class\", \"snackbar\");\n\t\t\t\t__self.destroy(snackbar);\n\t\t\t}, this.options.timeout);\n\t\t}\n\n\t\t\/\/ Add the event listeners\n\t\tthis.listeners(snackbar);\n\t}","language":"javascript"}
{"code":"public void visitEnum(final String name, final String descriptor, final String value) {\n    if (av != null) {\n      av.visitEnum(name, descriptor, value);\n    }\n  }","language":"java"}
{"code":"public function code(Field $field, $attr = [])\n    {\n        $field->mode = empty($field->mode) ? 'single' : $field->mode;\n        #\u5355\u4e00\u6a21\u5f0f\n        if ($field->mode == 'single') {\n            $attr['type'] = '';\n            $attr['name'] = '';\n            $attr['value'] = '';\n            $attr['class'] = '';\n            $attr['id'] = 'row_' . $field->boxId;\n            $attr = WidgetHelper::mergeAttributes($field, $attr);\n            if (empty($field->plugName)) {\n                return '<div ' . join(' ', $attr) . '><\/div>';\n            }\n            $form = self::plugForm($field);\n            if (empty($form->template)) {\n                throw new \\Exception('\u63d2\u4ef6\u6a21\u677f\u4e0d\u5b58\u5728');\n            }\n            $viewer = new View();\n            $viewer->fetch($form->template);\n            $wrapFunc = $viewer->getHook('single');\n            if ($wrapFunc == null) {\n                throw new \\Exception('\u6a21\u677f\u4e2d\u6ca1\u6709\u627e\u5230 {hook fn=\"single\"} \u7684\u94a9\u5b50\u51fd\u6570');\n            }\n            $tinker = $field->getFunc('tinker');\n            if ($tinker && is_callable($tinker)) {\n                call_user_func($tinker, $form);\n            }\n            $form->setValues($field->value);\n            self::perfect($field, $form);\n            $code = $wrapFunc(['field' => $field, 'form' => $form]);\n            return '<div ' . join(' ', $attr) . '>' . $code . '<\/div>';\n        } else {\n            #\u591a\u589e\u6a21\u5f0f\n            if (empty($field->plugName)) {\n                return '';\n            }\n            $form = self::plugForm($field, 'add');\n            if (empty($form->template)) {\n                throw new \\Exception('\u63d2\u4ef6\u6a21\u677f\u4e0d\u5b58\u5728');\n            }\n            $viewer = new View();\n            $viewer->fetch($form->template);\n            $wrapFunc = $viewer->getHook('multiple-wrap');\n            $itemFunc = $viewer->getHook('multiple-item');\n            if ($wrapFunc == null) {\n                throw new \\Exception('\u6a21\u677f\u4e2d\u6ca1\u6709\u627e\u5230 {hook fn=\"multiple-wrap\"} \u7684\u94a9\u5b50\u51fd\u6570');\n            }\n            if ($itemFunc == null) {\n                throw new \\Exception('\u6a21\u677f\u4e2d\u6ca1\u6709\u627e\u5230 {hook fn=\"multiple-item\"} \u7684\u94a9\u5b50\u51fd\u6570');\n            }\n            $out = [];\n            $values = $field->value;\n            $index = 0;\n            $tinker = $field->getFunc('tinker');\n            if (!empty($values) && is_array($values)) {\n                foreach ($values as $idx => $item) {\n                    $pForm = self::plugForm($field, 'edit');\n                    if ($tinker && is_callable($tinker)) {\n                        call_user_func($tinker, $pForm);\n                    }\n                    $pForm->setValues($item);\n                    self::perfect($field, $pForm, $index);\n                    $code = $itemFunc(['field' => $field, 'form' => $pForm, 'index' => 'a' . $index]);\n                    $out[] = $code;\n                    $index++;\n                }\n            }\n            if ($tinker && is_callable($tinker)) {\n                call_user_func($tinker, $form);\n            }\n            self::perfect($field, $form);\n            $code = $itemFunc(['field' => $field, 'form' => $form, 'index' => '@@index@@']);\n            $data = [];\n            $data[] = 'data-index=\"' . htmlspecialchars($index) . '\"';\n            if ($field->dataMinSize) {\n                $data[] = 'data-min-size=\"' . $field->dataMinSize . '\"';\n            }\n            if ($field->dataMaxSize) {\n                $data[] = 'data-max-size=\"' . $field->dataMaxSize . '\"';\n            }\n            if ($field->dataInitSize) {\n                $data[] = 'data-init-size=\"' . $field->dataInitSize . '\"';\n            }\n            return $wrapFunc([\n                'field' => $field,\n                'form' => $form,\n                'body' => join('', $out),\n                'source' => base64_encode($code),\n                'lastIndex' => $index,\n                'attrs' => join(' ', $data)\n            ]);\n        }\n    }","language":"php"}
{"code":"func getCredentials(o options) error {\n\tif !o.changeContext {\n\t\tcur, err := currentContext(o)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"read current-context: %v\", err)\n\t\t}\n\t\tdefer useContext(o, cur)\n\t}\n\n\t\/\/ TODO(fejta): we ought to update kube.Client to support modern auth methods.\n\t\/\/ More info: https:\/\/github.com\/kubernetes\/kubernetes\/issues\/30617\n\told, set := os.LookupEnv(useClientCertEnv)\n\tif set {\n\t\tdefer os.Setenv(useClientCertEnv, old)\n\t}\n\tif err := os.Setenv(\"CLOUDSDK_CONTAINER_USE_CLIENT_CERTIFICATE\", \"True\"); err != nil {\n\t\treturn fmt.Errorf(\"failed to set %s: %v\", useClientCertEnv, err)\n\t}\n\targs, cmd := command(\n\t\t\"gcloud\", \"container\", \"clusters\", \"get-credentials\", o.cluster,\n\t\t\"--project\", o.project,\n\t\t\"--zone\", o.zone,\n\t)\n\tif err := cmd.Run(); err != nil {\n\t\treturn fmt.Errorf(\"%s: %v\", strings.Join(args, \" \"), err)\n\t}\n\treturn nil\n}","language":"go"}
{"code":"function multijob(req, res) {\n  var type = req.accepts('html', 'json', 'plain');\n  switch (type) {\n  case 'json':\n    return data(req, res);\n  case 'plain':\n    return output(req, res);\n  default:\n    return html(req, res);\n  }\n}","language":"javascript"}
{"code":"def main():\n    rollbar.init('ACCESS_TOKEN', environment='test', handler='twisted')\n\n    \"\"\"This runs the protocol on port 8000\"\"\"\n    factory = protocol.ServerFactory()\n    factory.protocol = Echo\n    reactor.listenTCP(8000, factory)\n    reactor.run()","language":"python"}
{"code":"func (r *Raft) replicateTo(s *followerReplication, lastIndex uint64) (shouldStop bool) {\n\t\/\/ Create the base request\n\tvar req AppendEntriesRequest\n\tvar resp AppendEntriesResponse\n\tvar start time.Time\nSTART:\n\t\/\/ Prevent an excessive retry rate on errors\n\tif s.failures > 0 {\n\t\tselect {\n\t\tcase <-time.After(backoff(failureWait, s.failures, maxFailureScale)):\n\t\tcase <-r.shutdownCh:\n\t\t}\n\t}\n\n\t\/\/ Setup the request\n\tif err := r.setupAppendEntries(s, &req, s.nextIndex, lastIndex); err == ErrLogNotFound {\n\t\tgoto SEND_SNAP\n\t} else if err != nil {\n\t\treturn\n\t}\n\n\t\/\/ Make the RPC call\n\tstart = time.Now()\n\tif err := r.trans.AppendEntries(s.peer.ID, s.peer.Address, &req, &resp); err != nil {\n\t\tr.logger.Error(fmt.Sprintf(\"Failed to AppendEntries to %v: %v\", s.peer, err))\n\t\ts.failures++\n\t\treturn\n\t}\n\tappendStats(string(s.peer.ID), start, float32(len(req.Entries)))\n\n\t\/\/ Check for a newer term, stop running\n\tif resp.Term > req.Term {\n\t\tr.handleStaleTerm(s)\n\t\treturn true\n\t}\n\n\t\/\/ Update the last contact\n\ts.setLastContact()\n\n\t\/\/ Update s based on success\n\tif resp.Success {\n\t\t\/\/ Update our replication state\n\t\tupdateLastAppended(s, &req)\n\n\t\t\/\/ Clear any failures, allow pipelining\n\t\ts.failures = 0\n\t\ts.allowPipeline = true\n\t} else {\n\t\ts.nextIndex = max(min(s.nextIndex-1, resp.LastLog+1), 1)\n\t\tif resp.NoRetryBackoff {\n\t\t\ts.failures = 0\n\t\t} else {\n\t\t\ts.failures++\n\t\t}\n\t\tr.logger.Warn(fmt.Sprintf(\"AppendEntries to %v rejected, sending older logs (next: %d)\", s.peer, s.nextIndex))\n\t}\n\nCHECK_MORE:\n\t\/\/ Poll the stop channel here in case we are looping and have been asked\n\t\/\/ to stop, or have stepped down as leader. Even for the best effort case\n\t\/\/ where we are asked to replicate to a given index and then shutdown,\n\t\/\/ it's better to not loop in here to send lots of entries to a straggler\n\t\/\/ that's leaving the cluster anyways.\n\tselect {\n\tcase <-s.stopCh:\n\t\treturn true\n\tdefault:\n\t}\n\n\t\/\/ Check if there are more logs to replicate\n\tif s.nextIndex <= lastIndex {\n\t\tgoto START\n\t}\n\treturn\n\n\t\/\/ SEND_SNAP is used when we fail to get a log, usually because the follower\n\t\/\/ is too far behind, and we must ship a snapshot down instead\nSEND_SNAP:\n\tif stop, err := r.sendLatestSnapshot(s); stop {\n\t\treturn true\n\t} else if err != nil {\n\t\tr.logger.Error(fmt.Sprintf(\"Failed to send snapshot to %v: %v\", s.peer, err))\n\t\treturn\n\t}\n\n\t\/\/ Check if there is more to replicate\n\tgoto CHECK_MORE\n}","language":"go"}
{"code":"private void addClass(Class cls)\n            throws RMIIIOPViolationException, IRConstructionException {\n        if (cls.isPrimitive())\n            return; \/\/ No need to add primitives.\n\n        if (cls.isArray()) {\n            \/\/ Add array mapping\n            addArray(cls);\n        } else if (cls.isInterface()) {\n            if (!RmiIdlUtil.isAbstractValueType(cls)) {\n                \/\/ Analyse the interface\n                InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls);\n\n                \/\/ Add analyzed interface (which may be abstract)\n                addInterface(ia);\n            } else {\n                \/\/ Analyse the value\n                ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls);\n\n                \/\/ Add analyzed value\n                addValue(va);\n            }\n        } else if (Exception.class.isAssignableFrom(cls)) { \/\/ Exception type.\n            \/\/ Analyse the exception\n            ExceptionAnalysis ea = ExceptionAnalysis.getExceptionAnalysis(cls);\n\n            \/\/ Add analyzed exception\n            addException(ea);\n        } else { \/\/ Got to be a value type.\n            \/\/ Analyse the value\n            ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls);\n\n            \/\/ Add analyzed value\n            addValue(va);\n        }\n    }","language":"java"}
{"code":"func (v *SetPageScaleFactorParams) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoEmulation6(&r, v)\n\treturn r.Error()\n}","language":"go"}
{"code":"def authorize!(action, subject, *args)\n      message = nil\n      if args.last.kind_of?(Hash) && args.last.has_key?(:message)\n        message = args.pop[:message]\n      end\n      if cannot?(action, subject, *args)\n        message ||= unauthorized_message(action, subject)\n        raise AccessDenied.new(message, action, subject)\n      end\n      subject\n    end","language":"ruby"}
{"code":"func (r *Resource) GetAction(name string) *Action {\n\tfor _, a := range r.Actions {\n\t\tif a.Name == name {\n\t\t\treturn a\n\t\t}\n\t}\n\treturn nil\n}","language":"go"}
{"code":"function valueParserNodesLength (length, operator = '===') {\n    return t.binaryExpression(\n        operator,\n        valueParserASTNodesLength,\n        t.numericLiteral(length)\n    );\n}","language":"javascript"}
{"code":"function(buffer) {\n    \/\/ If this view has a layout, it is the responsibility of the\n    \/\/ the layout to render the view's template. Otherwise, render the template\n    \/\/ directly.\n    var template = get(this, 'layout') || get(this, 'template');\n\n    if (template) {\n      var context = get(this, 'context');\n      var keywords = this.cloneKeywords();\n      var output;\n\n      var data = {\n        view: this,\n        buffer: buffer,\n        isRenderData: true,\n        keywords: keywords,\n        insideGroup: get(this, 'templateData.insideGroup')\n      };\n\n      \/\/ Invoke the template with the provided template context, which\n      \/\/ is the view's controller by default. A hash of data is also passed that provides\n      \/\/ the template with access to the view and render buffer.\n\n      Ember.assert('template must be a function. Did you mean to call Ember.Handlebars.compile(\"...\") or specify templateName instead?', typeof template === 'function');\n      \/\/ The template should write directly to the render buffer instead\n      \/\/ of returning a string.\n      output = template(context, { data: data });\n\n      \/\/ If the template returned a string instead of writing to the buffer,\n      \/\/ push the string onto the buffer.\n      if (output !== undefined) { buffer.push(output); }\n    }\n  }","language":"javascript"}
{"code":"protected function setVariable(string $name, string $value = '')\n\t{\n\t\tlist($name, $value) = $this->normaliseVariable($name, $value);\n\n\t\tif (! getenv($name, true))\n\t\t{\n\t\t\tputenv(\"$name=$value\");\n\t\t}\n\t\tif (empty($_ENV[$name]))\n\t\t{\n\t\t\t$_ENV[$name] = $value;\n\t\t}\n\t\tif (empty($_SERVER[$name]))\n\t\t{\n\t\t\t$_SERVER[$name] = $value;\n\t\t}\n\t}","language":"php"}
{"code":"def cond(pred, true_fn, false_fn, name: nil)\n      _op(:case, [pred], false_fn, true_fn, name: name)\n    end","language":"ruby"}
{"code":"def ping(self, params=None):\n        \"\"\" Returns True if the cluster is up, False otherwise. \"\"\"\n        try:\n            self.transport.perform_request('HEAD', '\/', params=params)\n        except TransportError:\n            raise gen.Return(False)\n        raise gen.Return(True)","language":"python"}
{"code":"func (p *MoveToParams) Do(ctx context.Context) (nodeID cdp.NodeID, err error) {\n\t\/\/ execute\n\tvar res MoveToReturns\n\terr = cdp.Execute(ctx, CommandMoveTo, p, &res)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn res.NodeID, nil\n}","language":"go"}
{"code":"def get_authorisation_url(self, application_name, token_expire='1day'):\n        '''\n        Returns a URL that needs to be opened in a browser to retrieve an\n        access token.\n        '''\n        query_params = {\n            'name': application_name,\n            'expiration': token_expire,\n            'response_type': 'token',\n            'scope': 'read,write'\n        }\n\n        authorisation_url = self.build_uri(\n            path='\/authorize',\n            query_params=self.add_authorisation(query_params)\n        )\n\n        print('Please go to the following URL and get the user authorisation '\n              'token:\\n', authorisation_url)\n        return authorisation_url","language":"python"}
{"code":"function(node, destroy, suppressEvents, suppressNodeUpdate) {\n                    var me = this,\n                        index = me.indexOf(node);\n\n                    if (index == -1 || (suppressEvents !== true && me.fireEvent(\"beforeremove\", me, node) === false)) {\n                        return false;\n                    }\n\n                    \/\/ remove it from childNodes collection\n                    Ext.Array.erase(me.childNodes, index, 1);\n\n                    \/\/ update child refs\n                    if (me.firstChild == node) {\n                        me.setFirstChild(node.nextSibling);\n                    }\n                    if (me.lastChild == node) {\n                        me.setLastChild(node.previousSibling);\n                    }\n\n                    if (suppressEvents !== true) {\n                        me.fireEvent(\"remove\", me, node);\n                    }\n\n                    \/\/ update siblings\n                    if (node.previousSibling) {\n                        node.previousSibling.nextSibling = node.nextSibling;\n                        node.previousSibling.updateInfo(suppressNodeUpdate);\n                    }\n                    if (node.nextSibling) {\n                        node.nextSibling.previousSibling = node.previousSibling;\n                        node.nextSibling.updateInfo(suppressNodeUpdate);\n                    }\n\n                    \/\/ If this node suddenly doesn't have childnodes anymore, update myself\n                    if (!me.childNodes.length) {\n                        me.set('loaded', me.isLoaded());\n                    }\n\n                    if (destroy) {\n                        node.destroy(true);\n                    } else {\n                        node.clear();\n                    }\n\n                    return node;\n                }","language":"javascript"}
{"code":"func (pcs Trace) TrimBelow(pc Call) Trace {\n\tfor len(pcs) > 0 && pcs[0] != pc {\n\t\tpcs = pcs[1:]\n\t}\n\treturn pcs\n}","language":"go"}
{"code":"func ModifyLease(c context.Context, task *Task, queueName string, leaseTime int) error {\n\tif queueName == \"\" {\n\t\tqueueName = \"default\"\n\t}\n\treq := &pb.TaskQueueModifyTaskLeaseRequest{\n\t\tQueueName:    []byte(queueName),\n\t\tTaskName:     []byte(task.Name),\n\t\tEtaUsec:      proto.Int64(task.ETA.UnixNano() \/ 1e3), \/\/ Used to verify ownership.\n\t\tLeaseSeconds: proto.Float64(float64(leaseTime)),\n\t}\n\tres := &pb.TaskQueueModifyTaskLeaseResponse{}\n\tif err := internal.Call(c, \"taskqueue\", \"ModifyTaskLease\", req, res); err != nil {\n\t\treturn err\n\t}\n\ttask.ETA = time.Unix(0, *res.UpdatedEtaUsec*1e3)\n\treturn nil\n}","language":"go"}
{"code":"protected function writeSelectQuery(Select $select)\n    {\n        $parts = ['SELECT'];\n\n        if ($select->isDistinct()) {\n            $parts[] = 'DISTINCT';\n        }\n\n        $this->writeSelectColumns($select, $parts);\n        $this->writeSelectFrom($select, $parts);\n        $this->writeSelectJoins($select, $parts);\n        $this->writeSelectWhere($select, $parts);\n        $this->writeSelectGroupBy($select, $parts);\n        $this->writeSelectHaving($select, $parts);\n        $this->writeSelectOrderBy($select, $parts);\n        $this->writeSelectLimit($select, $parts);\n\n        return AbstractBaseWriter::writeQueryComment($select).implode(' ', \\array_filter($parts));\n    }","language":"php"}
{"code":"public function terminate(Closure $next, IRequest $request, IResponse $response): void\n    {\n        $this->saveLog();\n\n        $next($request, $response);\n    }","language":"php"}
{"code":"protected function getColumnNames($columns)\n    {\n        $columnNames = [];\n        foreach ($columns as &$column) {\n            $columnNames[] = $this->columnWriter->writeColumn($column);\n        }\n\n        return \\implode(', ', $columnNames);\n    }","language":"php"}
{"code":"def flush\n\t\t\t# update root dirent, and flatten dirent tree\n\t\t\t@root.name = 'Root Entry'\n\t\t\t@root.first_block = @sb_file.first_block\n\t\t\t@root.size = @sb_file.size\n\t\t\t@dirents = @root.flatten\n\n\t\t\t# serialize the dirents using the bbat\n\t\t\tRangesIOResizeable.open @bbat, 'w', :first_block => @header.dirent_start do |io|\n\t\t\t\tio.write @dirents.map { |dirent| dirent.to_s }.join\n\t\t\t\tpadding = (io.size \/ @bbat.block_size.to_f).ceil * @bbat.block_size - io.size\n\t\t\t\tio.write 0.chr * padding\n\t\t\t\t@header.dirent_start = io.first_block\n\t\t\tend\n\n\t\t\t# serialize the sbat\n\t\t\t# perhaps the blocks used by the sbat should be marked with BAT?\n\t\t\tRangesIOResizeable.open @bbat, 'w', :first_block => @header.sbat_start do |io|\n\t\t\t\tio.write @sbat.to_s\n\t\t\t\t@header.sbat_start = io.first_block\n\t\t\t\t@header.num_sbat = @bbat.chain(@header.sbat_start).length\n\t\t\tend\n\n\t\t\t# create RangesIOResizeable hooked up to the bbat. use that to claim bbat blocks using\n\t\t\t# truncate. then when its time to write, convert that chain and some chunk of blocks at\n\t\t\t# the end, into META_BAT blocks. write out the chain, and those meta bat blocks, and its\n\t\t\t# done.\n\t\t\t# this is perhaps not good, as we reclaim all bat blocks here, which\n\t\t\t# may include the sbat we just wrote. FIXME\n\t\t\t@bbat.map! do |b|\n\t\t\t\tb == AllocationTable::BAT || b == AllocationTable::META_BAT ? AllocationTable::AVAIL : b\n\t\t\tend\n\n\t\t\t# currently we use a loop. this could be better, but basically,\n\t\t\t# the act of writing out the bat, itself requires blocks which get\n\t\t\t# recorded in the bat.\n\t\t\t#\n\t\t\t# i'm sure that there'd be some simpler closed form solution to this. solve\n\t\t\t# recursive func:\n\t\t\t#\n\t\t\t#   num_mbat_blocks = ceil(max((mbat_len - 109) * 4 \/ block_size, 0))\n\t\t\t#   bbat_len = initial_bbat_len + num_mbat_blocks\n\t\t\t#   mbat_len = ceil(bbat_len * 4 \/ block_size)\n\t\t\t#\n\t\t\t# the actual bbat allocation table is itself stored throughout the file, and that chain\n\t\t\t# is stored in the initial blocks, and the mbat blocks.\n\t\t\tnum_mbat_blocks = 0\n\t\t\tio = RangesIOResizeable.new @bbat, 'w', :first_block => AllocationTable::EOC\n\t\t\t# truncate now, so that we can simplify size calcs - the mbat blocks will be appended in a\n\t\t\t# contiguous chunk at the end.\n\t\t\t# hmmm, i think this truncate should be matched with a truncate of the underlying io. if you\n\t\t\t# delete a lot of stuff, and free up trailing blocks, the file size never shrinks. this can\n\t\t\t# be fixed easily, add an io truncate\n\t\t\t@bbat.truncate!\n\t\t\t@io.truncate @bbat.block_size * (@bbat.length + 1)\n\t\t\twhile true\n\t\t\t\t# get total bbat size. equivalent to @bbat.to_s.length, but for the factoring in of\n\t\t\t\t# the mbat blocks. we can't just add the mbat blocks directly to the bbat, as as this iteration\n\t\t\t\t# progresses, more blocks may be needed for the bat itself (if there are no more gaps), and the\n\t\t\t\t# mbat must remain contiguous.\n\t\t\t\tbbat_data_len = ((@bbat.length + num_mbat_blocks) * 4 \/ @bbat.block_size.to_f).ceil * @bbat.block_size\n\t\t\t\t# now storing the excess mbat blocks also increases the size of the bbat:\n\t\t\t\tnew_num_mbat_blocks = ([bbat_data_len \/ @bbat.block_size - 109, 0].max * 4 \/ (@bbat.block_size.to_f - 4)).ceil\n\t\t\t\tif new_num_mbat_blocks != num_mbat_blocks\n\t\t\t\t\t# need more space for the mbat.\n\t\t\t\t\tnum_mbat_blocks = new_num_mbat_blocks\n\t\t\t\telsif io.size != bbat_data_len\n\t\t\t\t\t# need more space for the bat\n\t\t\t\t\t# this may grow the bbat, depending on existing available blocks\n\t\t\t\t\tio.truncate bbat_data_len\n\t\t\t\telse\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\n\t\t\t# now extract the info we want:\n\t\t\tranges = io.ranges\n\t\t\tbbat_chain = @bbat.chain io.first_block\n\t\t\tio.close\n\t\t\tbbat_chain.each { |b| @bbat[b] = AllocationTable::BAT }\n\t\t\t# tack on the mbat stuff\n\t\t\t@header.num_bat = bbat_chain.length\n\t\t\tmbat_blocks = (0...num_mbat_blocks).map do\n\t\t\t\tblock = @bbat.free_block\n\t\t\t\t@bbat[block] = AllocationTable::META_BAT\n\t\t\t\tblock\n\t\t\tend\n\t\t\t@header.mbat_start = mbat_blocks.first || AllocationTable::EOC\n\n\t\t\t# now finally write the bbat, using a not resizable io.\n\t\t\t# the mode here will be 'r', which allows write atm. \n\t\t\tRangesIO.open(@io, :ranges => ranges) { |f| f.write @bbat.to_s }\n\n\t\t\t# this is the mbat. pad it out.\n\t\t\tbbat_chain += [AllocationTable::AVAIL] * [109 - bbat_chain.length, 0].max\n\t\t\t@header.num_mbat = num_mbat_blocks\n\t\t\tif num_mbat_blocks != 0\n\t\t\t\t# write out the mbat blocks now. first of all, where are they going to be?\n\t\t\t\tmbat_data = bbat_chain[109..-1]\n\t\t\t\t# expand the mbat_data to include the linked list forward pointers.\n\t\t\t\tmbat_data = mbat_data.to_enum(:each_slice, @bbat.block_size \/ 4 - 1).to_a.\n\t\t\t\t\tzip(mbat_blocks[1..-1] + [nil]).map { |a, b| b ? a + [b] : a }\n\t\t\t\t# pad out the last one.\n\t\t\t\tmbat_data.last.push(*([AllocationTable::AVAIL] * (@bbat.block_size \/ 4 - mbat_data.last.length)))\n\t\t\t\tRangesIO.open @io, :ranges => @bbat.ranges(mbat_blocks) do |f|\n\t\t\t\t\tf.write mbat_data.flatten.pack('V*')\n\t\t\t\tend\n\t\t\tend\n\n\t\t\t# now seek back and write the header out\n\t\t\t@io.seek 0\n\t\t\t@io.write @header.to_s + bbat_chain[0, 109].pack('V*')\n\t\t\t@io.flush\n\t\tend","language":"ruby"}
{"code":"protected function mapProperty(string $key)\n\t{\n\t\tif (empty($this->_options['datamap']))\n\t\t{\n\t\t\treturn $key;\n\t\t}\n\n\t\tif (isset($this->_options['datamap'][$key]) && ! empty($this->_options['datamap'][$key]))\n\t\t{\n\t\t\treturn $this->_options['datamap'][$key];\n\t\t}\n\n\t\treturn $key;\n\t}","language":"php"}
{"code":"func (n *NetworkTransport) getPooledConn(target ServerAddress) *netConn {\n\tn.connPoolLock.Lock()\n\tdefer n.connPoolLock.Unlock()\n\n\tconns, ok := n.connPool[target]\n\tif !ok || len(conns) == 0 {\n\t\treturn nil\n\t}\n\n\tvar conn *netConn\n\tnum := len(conns)\n\tconn, conns[num-1] = conns[num-1], nil\n\tn.connPool[target] = conns[:num-1]\n\treturn conn\n}","language":"go"}
{"code":"function(target) {\n\tvar undef;\n\n\teach(arguments, function(arg, i) {\n\t\tif (i > 0) {\n\t\t\teach(arg, function(value, key) {\n\t\t\t\tif (value !== undef) {\n\t\t\t\t\tif (typeof(target[key]) === typeof(value) && (typeof(value) === 'object' || util.isArray(value))) {\n\t\t\t\t\t\textend(target[key], value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn target;\n}","language":"javascript"}
{"code":"public function renderMapBound(Map $map)\n    {\n        return sprintf(\n            '%s.fitBounds(%s);'.PHP_EOL,\n            $map->getJavascriptVariable(),\n            $map->getBound()->getJavascriptVariable()\n        );\n    }","language":"php"}
{"code":"static public int convertToDODSType(DataType dataType)\n  {\n    if (dataType == DataType.STRING)\n      return opendap.dap.Attribute.STRING;\n    if (dataType == DataType.BYTE)\n      return opendap.dap.Attribute.BYTE;\n    if (dataType == DataType.FLOAT)\n      return opendap.dap.Attribute.FLOAT32;\n    if (dataType == DataType.DOUBLE)\n      return opendap.dap.Attribute.FLOAT64;\n    if (dataType == DataType.SHORT)\n      return opendap.dap.Attribute.INT16;\n    if (dataType == DataType.USHORT)\n      return opendap.dap.Attribute.UINT16;\n    if (dataType == DataType.INT)\n      return opendap.dap.Attribute.INT32;\n    if (dataType == DataType.UINT)\n      return opendap.dap.Attribute.UINT32;\n    if (dataType == DataType.BOOLEAN)\n      return opendap.dap.Attribute.BYTE;\n    if (dataType == DataType.LONG)\n      return opendap.dap.Attribute.INT32; \/\/ LOOK no LONG type!\n\n    \/\/ shouldnt happen\n    return opendap.dap.Attribute.STRING;\n  }","language":"java"}
{"code":"public function getFunctionType($eventHandlerName)\n    {\n        $eventHandler = $this->eventHandlers->get($eventHandlerName);\n        if (!$eventHandler) return null;\n        return $eventHandler->functionType;\n    }","language":"php"}
{"code":"function createAnchorLink(name, heading) {\n  const anchorLink = heading\n    .toLowerCase()\n    .replace(\/ \/g, '-')\n    .replace(\/[`~!@#$%^&*()+=<>?,.\/:;\"'|{}\\[\\]\\\\\u2013\u2014]\/g, '')\n    .replace(\n      \/[\u3000\u3002\uff1f\uff01\uff0c\u3001\uff1b\uff1a\u201c\u201d\u3010\u3011\uff08\uff09\u3014\u3015\uff3b\uff3d\ufe43\ufe44\u201c\u201d\u2018\u2019\ufe41\ufe42\u2014\u2026\uff0d\uff5e\u300a\u300b\u3008\u3009\u300c\u300d]\/g,\n      ''\n    );\n\n  return `[${name}](#${anchorLink})`;\n}","language":"javascript"}
{"code":"func decodeYaml(r io.Reader, v interface{}) error {\n\tbytes, err := ioutil.ReadAll(r)\n\tif err == nil {\n\t\tyaml.Unmarshal(bytes, v)\n\t}\n\treturn err\n}","language":"go"}
{"code":"def _write_config_file(template_file):\n        \"\"\"\n        Write a config file to the source bundle location to identify the entry point.\n        :param template_file: path to the task template subclass (executable)\n        \"\"\"\n        config_filename = '.cloud_harness_config.json'\n        config_path = os.path.dirname(template_file)\n\n        filename = os.path.split(template_file)[1]\n\n        if filename.endswith('.pyc'):\n            filename = filename[:-1]\n\n        config_file = os.path.join(config_path, config_filename)\n\n        with open(config_file, 'w') as f:\n            f.write(json.dumps({'task_filename': filename}))\n\n        return config_file","language":"python"}
{"code":"function normListedCommit(ghCommit) {\n    const commit = Commit.create({\n        sha: ghCommit.sha,\n        message: ghCommit.commit.message,\n        author: getCompleteAuthor(ghCommit),\n        date: ghCommit.commit.author.date,\n        files: ghCommit.files,\n        parents: ghCommit.parents.map(c => c.sha)\n    });\n\n    return commit;\n}","language":"javascript"}
{"code":"protected QName toQName(String namespaceUri, String qualifiedName) {\n        int idx = qualifiedName.indexOf(':');\n        if (idx == -1) {\n            return new QName(namespaceUri, qualifiedName);\n        } else {\n            String prefix = qualifiedName.substring(0, idx);\n            String localPart = qualifiedName.substring(idx + 1);\n            return new QName(namespaceUri, localPart, prefix);\n        }\n    }","language":"java"}
{"code":"function getJsDocTagAtPosition(sourceFile, position) {\n        var node = ts.getTokenAtPosition(sourceFile, position);\n        if (isToken(node)) {\n            switch (node.kind) {\n                case 102 \/* VarKeyword *\/:\n                case 108 \/* LetKeyword *\/:\n                case 74 \/* ConstKeyword *\/:\n                    \/\/ if the current token is var, let or const, skip the VariableDeclarationList\n                    node = node.parent === undefined ? undefined : node.parent.parent;\n                    break;\n                default:\n                    node = node.parent;\n                    break;\n            }\n        }\n        if (node) {\n            var jsDocComment = node.jsDocComment;\n            if (jsDocComment) {\n                for (var _i = 0, _a = jsDocComment.tags; _i < _a.length; _i++) {\n                    var tag = _a[_i];\n                    if (tag.pos <= position && position <= tag.end) {\n                        return tag;\n                    }\n                }\n            }\n        }\n        return undefined;\n    }","language":"javascript"}
{"code":"protected function makeResize(ARef $aRef, ImageSettingInterface $imageSetting, ResizeSettingInterface $resizeSetting, array $item_attrs = [], $tmp = false)\n    {\n        if($tmp)\n        {\n            $images_dir = $this->pathResolver->getTmpDir();\n        }\n        else\n        {\n            $images_dir = $this->pathResolver->getImageDir();\n        }\n\n        if (!is_readable($images_dir))\n        {\n            throw new OperationException('\u0414\u0438\u0440\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f!');\n        }\n\n        if($tmp)\n        {\n            $resizes_dir = $this->pathResolver->getResizeTmpDir();\n        }\n        else\n        {\n            $resizes_dir = $this->pathResolver->getResizeDir();\n        }\n\n        if (!is_writable($resizes_dir))\n        {\n            throw new OperationException('\u0414\u0438\u0440\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0440\u0435\u0441\u0430\u0439\u0437\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438!');\n        }\n\n        $original_prefix = $this->getImagePrefix($imageSetting->getEntityName(), $aRef->getId(), $imageSetting->getName(), GenVariant::NONE);\n        $original_file_path = $images_dir.'\/'.$original_prefix;\n\n        $original_file_name = false;\n\n        foreach (glob($original_file_path.'.*') as $file)\n        {\n            if(is_dir($file))\n            {\n                continue;\n            }\n\n            $original_mime = File::mimeType($file);\n\n            if($this->isVectorImage($original_mime))\n            {\n                throw new OperationException('\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0440\u0435\u0441\u0430\u0439\u0437 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 '.$file.'!');\n            }\n\n            $original_file_name = $file;\n\n            break;\n        }\n\n        if(!$original_file_name)\n        {\n            throw new OperationException('\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0444\u0430\u0439\u043b \u0446\u0435\u043b\u0438 \u0434\u043b\u044f \u0440\u0435\u0441\u0430\u0439\u0437\u0430!');\n        }\n\n        $extension = File::extension($original_file_name);\n\n        $width = $resizeSetting->getWidth();\n        $height = $resizeSetting->getHeight();\n\n        $img = ImageFacade::make($original_file_name);\n\n        if($width or $height)\n        {\n            $aspectRatio = !($width and $height);\n\n            if(!$width)\n            {\n                $width = null;\n            }\n            if(!$height)\n            {\n                $height = null;\n            }\n\n            $img = $img->resize($width, $height,\n                function ($constraint) use ($aspectRatio)\n                {\n                    if($aspectRatio)\n                    {\n                        $constraint->aspectRatio();\n                    }\n                });\n        }\n\n        $this->modImage($img, $resizeSetting->getMods());\n\n        $resize_prefix = $this->getImagePrefix($imageSetting->getEntityName(), $aRef->getId(), $imageSetting->getName(), GenVariant::RESIZE, $resizeSetting->getName());\n        $resize_file_name = $resize_prefix.'.'.$extension;\n        $resize_file_path = $resizes_dir.'\/'.$resize_prefix.'.'.$extension;\n\n        $img->save($resize_file_path, 100);\n\n        chmod($resize_file_path, 0644);\n\n        if(!$tmp)\n        {\n            $resizeImage = ImageFacade::make($resize_file_path);\n            $width = $resizeImage->getWidth();\n            $height = $resizeImage->getHeight();\n            $item_attrs['link'] = $this->pathResolver->getResizePath().'\/'.$resize_file_name;\n            $item_attrs['width'] = $width;\n            $item_attrs['height'] = $height;\n            $this->dbAgent->resizeToDb($aRef, $imageSetting, $resizeSetting, $item_attrs);\n        }\n    }","language":"php"}
{"code":"public static MAMath.ScaleOffset calcScaleOffsetSkipMissingData(Array a, double missingValue, int nbits) {\r\n    MAMath.MinMax minmax = getMinMaxSkipMissingData(a, missingValue);\r\n\r\n    if (a.isUnsigned()) {\r\n      long size = (1L << nbits) - 1;\r\n      double offset = minmax.min;\r\n      double scale =(minmax.max - minmax.min) \/ size;\r\n      return new ScaleOffset(scale, offset);\r\n\r\n    } else {\r\n      long size = (1L << nbits) - 2;\r\n      double offset = (minmax.max + minmax.min) \/ 2;\r\n      double scale =(minmax.max - minmax.min) \/ size;\r\n      return new ScaleOffset(scale, offset);\r\n    }\r\n  }","language":"java"}
{"code":"def create_product(\n        self, location, product, project_id=None, product_id=None, retry=None, timeout=None, metadata=None\n    ):\n        \"\"\"\n        For the documentation see:\n        :class:`~airflow.contrib.operators.gcp_vision_operator.CloudVisionProductCreateOperator`\n        \"\"\"\n        client = self.get_conn()\n        parent = ProductSearchClient.location_path(project_id, location)\n        self.log.info('Creating a new Product under the parent: %s', parent)\n        response = client.create_product(\n            parent=parent,\n            product=product,\n            product_id=product_id,\n            retry=retry,\n            timeout=timeout,\n            metadata=metadata,\n        )\n        self.log.info('Product created: %s', response.name if response else '')\n        self.log.debug('Product created:\\n%s', response)\n\n        if not product_id:\n            # Product id was generated by the API\n            product_id = self._get_autogenerated_id(response)\n            self.log.info('Extracted autogenerated Product ID from the response: %s', product_id)\n\n        return product_id","language":"python"}
{"code":"def basic_get(queue, **opts)\n      send_request :basic_get, {\n        queue:  queue,\n        no_ack: opts.fetch(:no_ack, false)\n      }\n      fetch_response [:basic_get_ok, :basic_get_empty]\n    end","language":"ruby"}
{"code":"func fileExists(file string) bool {\n\t_, err := os.Stat(file)\n\treturn err == nil\n}","language":"go"}
{"code":"protected function populateRelationAsyncSingle($name, &$primaryModels) {\n        return $this->one()->otherwise(function() { return null; })->then(\n            function($model) use ($name, &$primaryModels) {\n                $primaryModel = reset($primaryModels);\n                if ($primaryModel instanceof ActiveRecordInterface) {\n                    $primaryModel->populateRelation($name, $model);\n                } else {\n                    $primaryModels[key($primaryModels)][$name] = $model;\n                }\n                if ($this->inverseOf !== null) {\n                    $this->populateInverseRelation($primaryModels, [$model], $name, $this->inverseOf);\n                }\n\n                return [$model];\n            }\n        );\n    }","language":"php"}
{"code":"public function update(SplSubject $subject): void\n    {\n        if (method_exists($this, 'handle')) {\n            $handle = [$this, 'handle'];\n        } elseif ($this->handle) {\n            $handle = [$this, '__invoke'];\n        } else {\n            $handle = null;\n        }\n\n        if (!is_callable($handle)) {\n            throw new InvalidArgumentException(\n                sprintf('Observer %s must has handle method.', get_class($this))\n            );\n        }\n\n        $subject->container->call($handle, $subject->notifyArgs);\n    }","language":"php"}
{"code":"func printInternalRaftRequest(entry raftpb.Entry) {\n\tvar rr etcdserverpb.InternalRaftRequest\n\tif err := rr.Unmarshal(entry.Data); err == nil {\n\t\tfmt.Printf(\"%4d\\t%10d\\tnorm\\t%s\", entry.Term, entry.Index, rr.String())\n\t}\n}","language":"go"}
{"code":"function getEffectiveArgument(node, args, argIndex) {\n            \/\/ For a decorator or the first argument of a tagged template expression we return undefined.\n            if (node.kind === 139 \/* Decorator *\/ ||\n                (argIndex === 0 && node.kind === 170 \/* TaggedTemplateExpression *\/)) {\n                return undefined;\n            }\n            return args[argIndex];\n        }","language":"javascript"}
{"code":"List<String> matchNcepNames(GridDataset gds, String oldName) {\r\n    List<String> result = new ArrayList<>();\r\n    \r\n    \/\/ look for exact match\r\n    if (contains(gds, oldName))  {\r\n      result.add(oldName); \r\n      return result;\r\n    }\r\n    \r\n    Attribute att = gds.findGlobalAttributeIgnoreCase(CDM.FILE_FORMAT);\r\n    boolean isGrib1 = (att != null) && att.getStringValue().startsWith(\"GRIB-1\");\r\n    boolean isGrib2 = (att != null) && att.getStringValue().startsWith(\"GRIB-2\");\r\n    HashMap<String, Renamer> map;\r\n    if (isGrib1) {\r\n      if (map1 == null) initMap1();\r\n      map = map1;\r\n\r\n    } else if (isGrib2) {\r\n      if (map2 == null) initMap2();\r\n      map = map2;\r\n\r\n    } else {\r\n      return result; \/\/ empty list\r\n    }\r\n    \r\n    \/\/ look in our renamer map\r\n    Renamer mbean = map.get(oldName);\r\n    if (mbean != null && mbean.newName != null && contains(gds, mbean.newName))  {\r\n      result.add(mbean.newName); \/\/ if its unique, then we are done\r\n      return result;\r\n    }\r\n\r\n    \/\/ not unique - match against NCEP dataset\r\n    if (mbean != null) {\r\n      String dataset = extractDatasetFromLocation(gds.getLocation());\r\n      for (VariableRenamerBean r : mbean.newVars) {\r\n        if (r.getDatasetType().equals(dataset) && contains(gds, r.newName)) result.add(r.newName);\r\n      }\r\n      if (result.size() == 1) return result; \/\/ return if unique\r\n    }\r\n\r\n    \/\/ not unique, no unique match against dataset - check existence in the dataset\r\n    result.clear();\r\n    if (mbean != null) {\r\n      for (VariableRenamerBean r : mbean.newVarsMap.values()) {\r\n        if (contains(gds, r.newName)) result.add(r.newName);\r\n      }\r\n      if (result.size() > 0) return result;\r\n    }\r\n    \r\n    \/\/ try to map oldName -> new prefix\r\n    result.clear();\r\n    String oldMunged = munge(oldName);\r\n    for (GridDatatype grid : gds.getGrids()) {\r\n      String newMunged = munge(grid.getShortName());\r\n      if (newMunged.startsWith(oldMunged))\r\n        result.add(grid.getShortName());\r\n    }\r\n    if (result.size() > 0) return result;\r\n\r\n    \/\/ return empty list\r\n    return result;\r\n  }","language":"java"}
{"code":"function(structure = []) {\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tif (Array.isArray(structure) === false) {\n\t\t\t\tthrow new Error(`'structure' must be an array`)\n\t\t\t}\n\n\t\t\tparseStructure(structure, opts.cwd)\n\t\t\t\t.then((parsedStructure) => writeStructure(parsedStructure))\n\t\t\t\t.then((parsedStructure) => binStructure(parsedStructure, bin, opts.persistent))\n\t\t\t\t.then(resolve, reject)\n\n\t\t})\n\n\t}","language":"javascript"}
{"code":"func setupMetadata() (result map[string]*metadata.Resource) {\n\tresult = make(map[string]*metadata.Resource)\n\tfor n, r := range cac.GenMetadata {\n\t\tresult[n] = r\n\t}\n\treturn\n}","language":"go"}
{"code":"public static CasaItDocument newDocument(Container container) throws ParserConfigurationException, JAXBException {\n        Document document = XmlUtils.newDocument();\n        CasaItUtils.createMarshaller(\"UTF-8\", true).marshal(container, document);\n        return new CasaItDocument(document);\n    }","language":"java"}
{"code":"async def update_activity(self, context: TurnContext, activity: Activity):\n        \"\"\"\n        Replaces an activity that was previously sent to a channel. It should be noted that not all\n        channels support this feature.\n        :param context:\n        :param activity:\n        :return:\n        \"\"\"\n        try:\n            client = self.create_connector_client(activity.service_url)\n            return await client.conversations.update_activity(\n                activity.conversation.id,\n                activity.conversation.activity_id,\n                activity)\n        except Exception as e:\n            raise e","language":"python"}
{"code":"def v2_runner_on_ok(self, result, **kwargs):\n        \"\"\"Run when a task finishes correctly.\"\"\"\n        failed = \"failed\" in result._result\n        unreachable = \"unreachable\" in result._result\n\n        if (\n            \"print_action\" in result._task.tags\n            or failed\n            or unreachable\n            or self._display.verbosity > 1\n        ):\n            self._print_task()\n            self.last_skipped = False\n            msg = unicode(result._result.get(\"msg\", \"\")) or unicode(\n                result._result.get(\"reason\", \"\")\n            ) or unicode(\n                result._result.get(\"message\", \"\")\n            )\n\n            stderr = [\n                result._result.get(\"exception\", None),\n                result._result.get(\"module_stderr\", None),\n            ]\n            stderr = \"\\n\".join([e for e in stderr if e]).strip()\n\n            self._print_host_or_item(\n                result._host,\n                result._result.get(\"changed\", False),\n                msg,\n                result._result.get(\"diff\", None),\n                is_host=True,\n                error=failed or unreachable,\n                stdout=result._result.get(\"module_stdout\", None),\n                stderr=stderr.strip(),\n            )\n\n            if \"results\" in result._result:\n                for r in result._result[\"results\"]:\n                    failed = \"failed\" in r\n\n                    stderr = [r.get(\"exception\", None), r.get(\"module_stderr\", None)]\n                    stderr = \"\\n\".join([e for e in stderr if e]).strip()\n\n                    self._print_host_or_item(\n                        r[\"item\"],\n                        r.get(\"changed\", False),\n                        unicode(r.get(\"msg\", \"\")),\n                        r.get(\"diff\", None),\n                        is_host=False,\n                        error=failed,\n                        stdout=r.get(\"module_stdout\", None),\n                        stderr=stderr.strip(),\n                    )\n        else:\n            self.last_skipped = True\n            print(\".\", end=\"\")","language":"python"}
{"code":"function(regex) {\n    var m = regex.exec(this.input);\n    if (m) {\n      this.updatePosition(m[0], m[0].length);\n      return m;\n    }\n  }","language":"javascript"}
{"code":"public function getCalcMoneyVat()\n    {\n        $money = new Money(\"\", $this->currency_code);\n\n        foreach ($this->shopOrderItems as $shopOrderItem) {\n            $money = $money->add($shopOrderItem->moneyVat->multiply($shopOrderItem->quantity));\n        }\n\n        return $money;\n    }","language":"php"}
{"code":"private function getCorsesArray()\n    {\n        $corsesArray = array();\n        if (count($this->getCorses()) == 1) {\n            $corsesArray = array(\n                Resources::XTAG_CORS_RULE => $this->getCorses()[0]->toArray()\n            );\n        } elseif ($this->getCorses() != array()) {\n            foreach ($this->getCorses() as $cors) {\n                $corsesArray[] = [Resources::XTAG_CORS_RULE => $cors->toArray()];\n            }\n        }\n\n        return $corsesArray;\n    }","language":"php"}
{"code":"def incr (key, val=1)\n\n      key = key.to_s\n\n      v = val.is_a?(Fixnum) ? @db.addint(key, val) : @db.adddouble(key, val)\n\n      raise(EdoError.new(\n        \"incr failed, there is probably already a string value set \" +\n        \"for the key '#{key}'. Make sure there is no value before incrementing\"\n      )) unless v\n\n      v\n    end","language":"ruby"}
{"code":"def as_property_description(self):\n        \"\"\"\n        Get the property description.\n\n        Returns a dictionary describing the property.\n        \"\"\"\n        description = deepcopy(self.metadata)\n\n        if 'links' not in description:\n            description['links'] = []\n\n        description['links'].append(\n            {\n                'rel': 'property',\n                'href': self.href_prefix + self.href,\n            }\n        )\n        return description","language":"python"}
{"code":"function isNamedFunction(node)\n    {\n        if (node.id)\n            return true;\n        const { parent } = node;\n        const { type } = parent;\n        const namedFunction =\n        type === 'MethodDefinition' ||\n        type === 'Property' && (parent.kind === 'get' || parent.kind === 'set' || parent.method);\n        return namedFunction;\n    }","language":"javascript"}
{"code":"function emailStatByCampaigns(callback,email) {\n    if ((email===undefined)||(!email.length)){\n        return callback(returnError('Empty email'));\n    }\n    sendRequest( 'emails\/' + email + '\/campaigns', 'GET', {}, true, callback );\n}","language":"javascript"}
{"code":"function hideNodeContextMenu(event)\n   {\n      \/\/ Provide an early out if there is no selected context node.\n      if (typeof selectedContextNode === 'undefined') { return; }\n\n      var contextMenuButton = $('#context-menu');\n      var popupmenu = $('#contextpopup .mdl-menu__container');\n\n      \/\/ If an event is defined then make sure it isn't targeting the context menu.\n      if (event)\n      {\n         event.preventDefault();\n\n         \/\/ Picked element is not the menu\n         if (!$(event.target).parents('#contextpopup').length > 0)\n         {\n            \/\/ Hide menu if currently visible\n            if (popupmenu.hasClass('is-visible')) { contextMenuButton.click(); }\n\n            fadeRelatedNodes(selectedContextNode, false, nodes, links);\n            selectedContextNode = undefined;\n         }\n      }\n      else \/\/ No event defined so always close context menu and remove node highlighting.\n      {\n         \/\/ Hide menu if currently visible\n         if (popupmenu.hasClass('is-visible')) { contextMenuButton.click(); }\n\n         fadeRelatedNodes(selectedContextNode, false, nodes, links);\n         selectedContextNode = undefined;\n      }\n   }","language":"javascript"}
{"code":"func load(data []byte) (*clientcmdConfig, error) {\n\tconfig := clientcmdNewConfig()\n\t\/\/ if there's no data in a file, return the default object instead of failing (DecodeInto reject empty input)\n\tif len(data) == 0 {\n\t\treturn config, nil\n\t}\n\t\/\/ Note: This does absolutely no kind\/version checking or conversions.\n\tdata, err := yaml.YAMLToJSON(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := json.Unmarshal(data, config); err != nil {\n\t\treturn nil, err\n\t}\n\treturn config, nil\n}","language":"go"}
{"code":"function() {\n    Ember.assert(\"You must call advanceReadiness on an instance of Ember.Application\", this instanceof Ember.Application);\n    this._readinessDeferrals--;\n\n    if (this._readinessDeferrals === 0) {\n      Ember.run.once(this, this.didBecomeReady);\n    }\n  }","language":"javascript"}
{"code":"def delete(key)\n      ref = @references.delete(key)\n      if ref\n        keys_to_id = @references_to_keys_map[ref.referenced_object_id]\n        if keys_to_id\n          keys_to_id.delete(key)\n          @references_to_keys_map.delete(ref.referenced_object_id) if keys_to_id.empty?\n        end\n        ref.object\n      else\n        nil\n      end\n    end","language":"ruby"}
{"code":"public function write($filename = null, Zend_Config $config = null, $exclusiveLock = null)\n    {\n        if ($filename !== null) {\n            $this->setFilename($filename);\n        }\n\n        if ($config !== null) {\n            $this->setConfig($config);\n        }\n\n        if ($exclusiveLock !== null) {\n            $this->setExclusiveLock($exclusiveLock);\n        }\n\n        if ($this->_filename === null) {\n\n            throw new Zend_Config_Exception('No filename was set');\n        }\n\n        if ($this->_config === null) {\n\n            throw new Zend_Config_Exception('No config was set');\n        }\n\n        $configString = $this->render();\n\n        $flags = 0;\n\n        if ($this->_exclusiveLock) {\n            $flags |= LOCK_EX;\n        }\n\n        $result = @file_put_contents($this->_filename, $configString, $flags);\n\n        if ($result === false) {\n\n            throw new Zend_Config_Exception('Could not write to file \"' . $this->_filename . '\"');\n        }\n    }","language":"php"}
{"code":"public function fetchColumn(string $alias, bool & $eof): Promise\n    {\n        try {\n            $row = $this->stmt->fetch(\\PDO::FETCH_ASSOC);\n            \n            if ($row === false) {\n                $eof = true;\n                \n                return new Success();\n            }\n            \n            return new Success($row[$alias] ?? null);\n        } catch (\\Throwable $e) {\n            return new Failure($e);\n        }\n    }","language":"php"}
{"code":"func createSystemdLogfile(service string, outputMode string, outputDir string) error {\n\t\/\/ Generate the journalctl command.\n\tjournalCmdArgs := []string{fmt.Sprintf(\"--output=%v\", outputMode), \"-D\", *journalPath}\n\tif service == \"kern\" {\n\t\tjournalCmdArgs = append(journalCmdArgs, \"-k\")\n\t} else {\n\t\tjournalCmdArgs = append(journalCmdArgs, \"-u\", fmt.Sprintf(\"%v.service\", service))\n\t}\n\tcmd := exec.Command(\"journalctl\", journalCmdArgs...)\n\n\t\/\/ Run the command and record the output to a file.\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Journalctl command for '%v' service failed: %v\", service, err)\n\t}\n\tlogfile := filepath.Join(outputDir, service+\".log\")\n\tif err := ioutil.WriteFile(logfile, output, 0444); err != nil {\n\t\treturn fmt.Errorf(\"Writing to file of journalctl logs for '%v' service failed: %v\", service, err)\n\t}\n\treturn nil\n}","language":"go"}
{"code":"public function nullableTimestamps($precision = 0)\n    {\n        $this->timestamps($precision);\n\n        $this->columns['created_at']->nullable();\n        $this->columns['updated_at']->nullable();\n    }","language":"php"}
{"code":"public function getDBTables($force_fetch = false) {\n        if ($this->_tables && !$force_fetch) return $this->_tables;\n\n        $res = QC::executeSQL('SHOW TABLES');\n        $this->_tables = array();\n        if ($res->rowCount()) {\n            $res = $res->fetchAll(\\PDO::FETCH_NUM);\n            foreach($res as $info) {\n                $this->_tables[$info[0]] = array('name'=>$info[0]);\n            }\n        }\n        return $this->_tables;\n    }","language":"php"}
{"code":"func SetLogger(out io.Writer, prefix string, flag int, debug bool) {\n\tlogger = internalLogger{\n\t\tlog.New(out, prefix, flag),\n\t\tdebug,\n\t}\n}","language":"go"}
{"code":"def incomplete_filters(filters)\n      filters.select { |filter|\n        ['category', 'name', 'value'].any? { |f| !filter.include? f }\n      }.map { |incomplete_filter|\n        category, name, value = incomplete_filter.values_at('category', 'name', 'value')\n        error = <<-MSG.gsub(\/^\\s+\/, '').strip\n          Incomplete filter, category:\"#{category}\", name:\"#{name}\", and value:\"#{value}\".\n        MSG\n        incomplete_filter.merge(:error => error)\n      }\n    end","language":"ruby"}
{"code":"def check_files\n      @found_files = []\n      check_required_files\n      check_optional_files\n      # Add feed files of zip to the list of files to be processed\n      @source.feed_definition.files.each do |req|\n        @found_files << req if filenames.include?(req.filename)\n      end\n    end","language":"ruby"}
{"code":"func (v GetComputedStyleForNodeReturns) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoCss45(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}","language":"go"}
{"code":"@SuppressWarnings(\"unchecked\")\n  public GivenRuleBuilder<T, U> given(String name, T value) {\n    Rule<T, U> rule = _name.map(ruleName -> (Rule<T, U>)new AuditableRule<T, U>(newRule(), ruleName)).orElse(newRule());\n    if (rule == null) {\n      throw new IllegalStateException(\"No Rule is instantiated; An invalid Rule class may have been provided\");\n    }\n    return new GivenRuleBuilder<T, U>(rule, new Fact<T>(name, value));\n  }","language":"java"}
{"code":"def point_decompress(s)\n      # check argument\n      raise ArgumentError , \"Invalid input length for decompression\" unless s.length.equal? 32\n\n      y = int_form_bytes(s)\n      sign = y >> 255\n      y &= (1 << 255) - 1\n      x = recover_x(y, sign)\n      if x.nil? then\n        return nil\n      else\n        return [x, y, 1, x*y % @@p]\n      end\n    end","language":"ruby"}
{"code":"private static boolean supportsDnD()\r\n    {   \/\/ Static Boolean\r\n        if( supportsDnD == null )\r\n        {   \r\n            boolean support = false;\r\n            try\r\n            {   Class arbitraryDndClass = Class.forName( \"java.awt.dnd.DnDConstants\" );\r\n                support = true;\r\n            }   \/\/ end try\r\n            catch( Exception e )\r\n            {   support = false;\r\n            }   \/\/ end catch\r\n            supportsDnD = new Boolean( support );\r\n        }   \/\/ end if: first time through\r\n        return supportsDnD.booleanValue();\r\n    }","language":"java"}
{"code":"public function rebind(float $timeout = 0)\n    {\n        $this->readable->rebind($timeout);\n        $this->writable->rebind($timeout);\n    }","language":"php"}
{"code":"def floor_div(input_a, input_b, name: nil)\n      check_data_types(input_a, input_b)\n      _op(:floor_div, input_a, input_b, name: name)\n    end","language":"ruby"}
{"code":"def mutex_opts(dict,ex_op):\n    \"\"\"Check for presence of mutually exclusive keys in a dict.\n\n    Call: mutex_opts(dict,[[op1a,op1b],[op2a,op2b]...]\"\"\"\n    for op1,op2 in ex_op:\n        if op1 in dict and op2 in dict:\n            raise ValueError,'\\n*** ERROR in Arguments *** '\\\n                  'Options '+op1+' and '+op2+' are mutually exclusive.'","language":"python"}
{"code":"public function setSourceUrl(PHPCrawlerURLDescriptor $SourceUrl)\r\n  {\r\n    $this->SourceUrl = $SourceUrl;\r\n    $this->baseUrlParts = PHPCrawlerUrlPartsDescriptor::fromURL($SourceUrl->url_rebuild);\r\n  }","language":"php"}
{"code":"@Override\n    public List<String> internalDatabases() {\n        Set<String> sortedDatabases = new TreeSet<String>();\n        addInternalDatabases(sortedDatabases);\n        List<String> databases = new ArrayList<String>();\n        databases.addAll(sortedDatabases);\n        return databases;\n    }","language":"java"}
{"code":"def _check_protected_attribute_access(self, node):\n        \"\"\"Given an attribute access node (set or get), check if attribute\n        access is legitimate. Call _check_first_attr with node before calling\n        this method. Valid cases are:\n        * self._attr in a method or cls._attr in a classmethod. Checked by\n        _check_first_attr.\n        * Klass._attr inside \"Klass\" class.\n        * Klass2._attr inside \"Klass\" class when Klass2 is a base class of\n            Klass.\n        \"\"\"\n        attrname = node.attrname\n\n        if (\n            is_attr_protected(attrname)\n            and attrname not in self.config.exclude_protected\n        ):\n\n            klass = node_frame_class(node)\n\n            # XXX infer to be more safe and less dirty ??\n            # in classes, check we are not getting a parent method\n            # through the class object or through super\n            callee = node.expr.as_string()\n\n            # We are not in a class, no remaining valid case\n            if klass is None:\n                self.add_message(\"protected-access\", node=node, args=attrname)\n                return\n\n            # If the expression begins with a call to super, that's ok.\n            if (\n                isinstance(node.expr, astroid.Call)\n                and isinstance(node.expr.func, astroid.Name)\n                and node.expr.func.name == \"super\"\n            ):\n                return\n\n            # If the expression begins with a call to type(self), that's ok.\n            if self._is_type_self_call(node.expr):\n                return\n\n            # We are in a class, one remaining valid cases, Klass._attr inside\n            # Klass\n            if not (callee == klass.name or callee in klass.basenames):\n                # Detect property assignments in the body of the class.\n                # This is acceptable:\n                #\n                # class A:\n                #     b = property(lambda: self._b)\n\n                stmt = node.parent.statement()\n                if (\n                    isinstance(stmt, astroid.Assign)\n                    and len(stmt.targets) == 1\n                    and isinstance(stmt.targets[0], astroid.AssignName)\n                ):\n                    name = stmt.targets[0].name\n                    if _is_attribute_property(name, klass):\n                        return\n\n                self.add_message(\"protected-access\", node=node, args=attrname)","language":"python"}
{"code":"public static Iterable<Range> getRangesToRollup(Granularity g, final long startMillis,\n                                                    final long stopMillis) throws GranularityException {\n        final long snappedStartMillis = g.coarser().snapMillis(startMillis);\n        final long snappedStopMillis = g.coarser().snapMillis(stopMillis + g.coarser().milliseconds());\n\n        return new IntervalRangeIterator(g, snappedStartMillis, snappedStopMillis);\n    }","language":"java"}
{"code":"public function getTotals(array $markers)\n    {\n        $totals = [\n            'time'   => 0,\n            'memory' => 0,\n        ];\n\n        foreach ($markers as $marker) {\n            $total = $this->getTotal($marker);\n\n            $totals['time']   += $total['time'];\n            $totals['memory'] += $total['memory'];\n        }\n\n        return $totals;\n    }","language":"php"}
{"code":"def link_to_route(text, destination_id, source_id = nil, *args)\n      function = \"CCPEVE.showRouteTo(#{destination_id.inspect}\"\n      function.concat \", #{source_id.inspect}\" if source_id\n      function.concat \")\"\n      link_to_function text, function, *args\n    end","language":"ruby"}
{"code":"func FixLoads(f *rule.File, knownLoads []rule.LoadInfo) {\n\tknownFiles := make(map[string]bool)\n\tknownKinds := make(map[string]string)\n\tfor _, l := range knownLoads {\n\t\tknownFiles[l.Name] = true\n\t\tfor _, k := range l.Symbols {\n\t\t\tknownKinds[k] = l.Name\n\t\t}\n\t}\n\n\t\/\/ Sync the file. We need File.Loads and File.Rules to contain inserted\n\t\/\/ statements and not deleted statements.\n\tf.Sync()\n\n\t\/\/ Scan load statements in the file. Keep track of loads of known files,\n\t\/\/ since these may be changed. Keep track of symbols loaded from unknown\n\t\/\/ files; we will not add loads for these.\n\tvar loads []*rule.Load\n\totherLoadedKinds := make(map[string]bool)\n\tfor _, l := range f.Loads {\n\t\tif knownFiles[l.Name()] {\n\t\t\tloads = append(loads, l)\n\t\t\tcontinue\n\t\t}\n\t\tfor _, sym := range l.Symbols() {\n\t\t\totherLoadedKinds[sym] = true\n\t\t}\n\t}\n\n\t\/\/ Make a map of all the symbols from known files used in this file.\n\tusedKinds := make(map[string]map[string]bool)\n\tfor _, r := range f.Rules {\n\t\tkind := r.Kind()\n\t\tif file, ok := knownKinds[kind]; ok && !otherLoadedKinds[kind] {\n\t\t\tif usedKinds[file] == nil {\n\t\t\t\tusedKinds[file] = make(map[string]bool)\n\t\t\t}\n\t\t\tusedKinds[file][kind] = true\n\t\t}\n\t}\n\n\t\/\/ Fix the load statements. The order is important, so we iterate over\n\t\/\/ knownLoads instead of knownFiles.\n\tfor _, known := range knownLoads {\n\t\tfile := known.Name\n\t\tfirst := true\n\t\tfor _, l := range loads {\n\t\t\tif l.Name() != file {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif first {\n\t\t\t\tfixLoad(l, file, usedKinds[file], knownKinds)\n\t\t\t\tfirst = false\n\t\t\t} else {\n\t\t\t\tfixLoad(l, file, nil, knownKinds)\n\t\t\t}\n\t\t\tif l.IsEmpty() {\n\t\t\t\tl.Delete()\n\t\t\t}\n\t\t}\n\t\tif first {\n\t\t\tload := fixLoad(nil, file, usedKinds[file], knownKinds)\n\t\t\tif load != nil {\n\t\t\t\tindex := newLoadIndex(f, known.After)\n\t\t\t\tload.Insert(f, index)\n\t\t\t}\n\t\t}\n\t}\n}","language":"go"}
{"code":"func Open(opt Options) (db *DB, err error) {\n\topt.maxBatchSize = (15 * opt.MaxTableSize) \/ 100\n\topt.maxBatchCount = opt.maxBatchSize \/ int64(skl.MaxNodeSize)\n\n\tif opt.ValueThreshold > math.MaxUint16-16 {\n\t\treturn nil, ErrValueThreshold\n\t}\n\n\tif opt.ReadOnly {\n\t\t\/\/ Can't truncate if the DB is read only.\n\t\topt.Truncate = false\n\t\t\/\/ Do not perform compaction in read only mode.\n\t\topt.CompactL0OnClose = false\n\t}\n\n\tfor _, path := range []string{opt.Dir, opt.ValueDir} {\n\t\tdirExists, err := exists(path)\n\t\tif err != nil {\n\t\t\treturn nil, y.Wrapf(err, \"Invalid Dir: %q\", path)\n\t\t}\n\t\tif !dirExists {\n\t\t\tif opt.ReadOnly {\n\t\t\t\treturn nil, y.Wrapf(err, \"Cannot find Dir for read-only open: %q\", path)\n\t\t\t}\n\t\t\t\/\/ Try to create the directory\n\t\t\terr = os.Mkdir(path, 0700)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, y.Wrapf(err, \"Error Creating Dir: %q\", path)\n\t\t\t}\n\t\t}\n\t}\n\tabsDir, err := filepath.Abs(opt.Dir)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tabsValueDir, err := filepath.Abs(opt.ValueDir)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar dirLockGuard, valueDirLockGuard *directoryLockGuard\n\tdirLockGuard, err = acquireDirectoryLock(opt.Dir, lockFile, opt.ReadOnly)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer func() {\n\t\tif dirLockGuard != nil {\n\t\t\t_ = dirLockGuard.release()\n\t\t}\n\t}()\n\tif absValueDir != absDir {\n\t\tvalueDirLockGuard, err = acquireDirectoryLock(opt.ValueDir, lockFile, opt.ReadOnly)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer func() {\n\t\t\tif valueDirLockGuard != nil {\n\t\t\t\t_ = valueDirLockGuard.release()\n\t\t\t}\n\t\t}()\n\t}\n\tif !(opt.ValueLogFileSize <= 2<<30 && opt.ValueLogFileSize >= 1<<20) {\n\t\treturn nil, ErrValueLogSize\n\t}\n\tif !(opt.ValueLogLoadingMode == options.FileIO ||\n\t\topt.ValueLogLoadingMode == options.MemoryMap) {\n\t\treturn nil, ErrInvalidLoadingMode\n\t}\n\tmanifestFile, manifest, err := openOrCreateManifestFile(opt.Dir, opt.ReadOnly)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer func() {\n\t\tif manifestFile != nil {\n\t\t\t_ = manifestFile.close()\n\t\t}\n\t}()\n\n\tdb = &DB{\n\t\timm:           make([]*skl.Skiplist, 0, opt.NumMemtables),\n\t\tflushChan:     make(chan flushTask, opt.NumMemtables),\n\t\twriteCh:       make(chan *request, kvWriteChCapacity),\n\t\topt:           opt,\n\t\tmanifest:      manifestFile,\n\t\telog:          trace.NewEventLog(\"Badger\", \"DB\"),\n\t\tdirLockGuard:  dirLockGuard,\n\t\tvalueDirGuard: valueDirLockGuard,\n\t\torc:           newOracle(opt),\n\t}\n\n\t\/\/ Calculate initial size.\n\tdb.calculateSize()\n\tdb.closers.updateSize = y.NewCloser(1)\n\tgo db.updateSize(db.closers.updateSize)\n\tdb.mt = skl.NewSkiplist(arenaSize(opt))\n\n\t\/\/ newLevelsController potentially loads files in directory.\n\tif db.lc, err = newLevelsController(db, &manifest); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !opt.ReadOnly {\n\t\tdb.closers.compactors = y.NewCloser(1)\n\t\tdb.lc.startCompact(db.closers.compactors)\n\n\t\tdb.closers.memtable = y.NewCloser(1)\n\t\tgo db.flushMemtable(db.closers.memtable) \/\/ Need levels controller to be up.\n\t}\n\n\theadKey := y.KeyWithTs(head, math.MaxUint64)\n\t\/\/ Need to pass with timestamp, lsm get removes the last 8 bytes and compares key\n\tvs, err := db.get(headKey)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"Retrieving head\")\n\t}\n\tdb.orc.nextTxnTs = vs.Version\n\tvar vptr valuePointer\n\tif len(vs.Value) > 0 {\n\t\tvptr.Decode(vs.Value)\n\t}\n\n\treplayCloser := y.NewCloser(1)\n\tgo db.doWrites(replayCloser)\n\n\tif err = db.vlog.open(db, vptr, db.replayFunction()); err != nil {\n\t\treturn db, err\n\t}\n\treplayCloser.SignalAndWait() \/\/ Wait for replay to be applied first.\n\n\t\/\/ Let's advance nextTxnTs to one more than whatever we observed via\n\t\/\/ replaying the logs.\n\tdb.orc.txnMark.Done(db.orc.nextTxnTs)\n\t\/\/ In normal mode, we must update readMark so older versions of keys can be removed during\n\t\/\/ compaction when run in offline mode via the flatten tool.\n\tdb.orc.readMark.Done(db.orc.nextTxnTs)\n\tdb.orc.nextTxnTs++\n\n\tdb.writeCh = make(chan *request, kvWriteChCapacity)\n\tdb.closers.writes = y.NewCloser(1)\n\tgo db.doWrites(db.closers.writes)\n\n\tdb.closers.valueGC = y.NewCloser(1)\n\tgo db.vlog.waitOnGC(db.closers.valueGC)\n\n\tvalueDirLockGuard = nil\n\tdirLockGuard = nil\n\tmanifestFile = nil\n\treturn db, nil\n}","language":"go"}
{"code":"function groupPatternsByBaseDirectory(patterns) {\n    return patterns.reduce(function (collection, pattern) {\n        var base = patternUtils.getBaseDirectory(pattern);\n        if (base in collection) {\n            collection[base].push(pattern);\n        }\n        else {\n            collection[base] = [pattern];\n        }\n        return collection;\n    }, {});\n}","language":"javascript"}
{"code":"def run(self, args_list=None):\n        \"\"\"Run Application.main and exits with the return value.\"\"\"\n        self.log.debug(\"Application.run: {args_list}\".format(**locals()))\n        retval = None\n        try:\n            retval = self._run(args_list=args_list)\n        except KeyboardInterrupt:\n            self.log.verbose(\"Interrupted\")                    # pragma: nocover\n        except SystemExit as exit:\n            self.log.verbose(\"Exited\")\n            retval = exit.code\n        except Exception:\n            print(\"Uncaught exception\", file=sys.stderr)\n            traceback.print_exc()\n            if \"debug_pdb\" in self.args and self.args.debug_pdb:\n                debugger()\n            retval = Application.UNCAUGHT_EXCEPTION_EXIT\n            raise\n        finally:\n            try:\n                self._atexit()\n            finally:\n                sys.stderr.flush()\n                sys.stdout.flush()\n                sys.exit(retval)","language":"python"}
{"code":"def ensure_pull_request_history(id, ts, act, actor)\n      user = unless actor.nil?\n               ensure_user(actor, false, false)\n             end\n      pull_req_history = db[:pull_request_history]\n\n      entry =  if ['opened', 'merged'].include? act\n                  pull_req_history.first(:pull_request_id => id,\n                                         :action => act)\n               else\n                 pull_req_history.first(:pull_request_id => id,\n                                        :created_at => (ts - 3)..(ts + 3),\n                                        :action => act)\n               end\n\n      if entry.nil?\n        pull_req_history.insert(:pull_request_id => id,\n                                :created_at => ts,\n                                :action => act,\n                                :actor_id => unless user.nil? then user[:id] end)\n        info \"Added pullreq_event (#{id}) -> (#{act}) by (#{actor}) timestamp #{ts}\"\n      else\n        debug \"Pull request (#{id}) event (#{act}) by (#{actor}) timestamp #{ts} exists\"\n        if entry[:actor_id].nil? and not user.nil?\n          pull_req_history.where(:pull_request_id => id,\n                               :created_at => (ts - 3)..(ts + 3),\n                               :action => act)\\\n                          .update(:actor_id => user[:id])\n          info \"Updated pull request (#{id}) event (#{act}) timestamp #{ts}, actor -> #{user[:login]}\"\n        end\n      end\n    end","language":"ruby"}
{"code":"def _add_relationship_kwargs(self, kwargs, prop):\n        \"\"\"Add keyword arguments to kwargs (in-place) based on the passed in\n        relationship `Property`.\n        \"\"\"\n        nullable = True\n        for pair in prop.local_remote_pairs:\n            if not pair[0].nullable:\n                if prop.uselist is True:\n                    nullable = False\n                break\n        kwargs.update({\"allow_none\": nullable, \"required\": not nullable})","language":"python"}
{"code":"def assign_force_field(ampal_obj, ff):\n    \"\"\"Assigns force field parameters to Atoms in the AMPAL object.\n\n    Parameters\n    ----------\n    ampal_obj : AMPAL Object\n        Any AMPAL object with a `get_atoms` method.\n    ff: BuffForceField\n        The force field to be used for scoring.\n    \"\"\"\n    if hasattr(ampal_obj, 'ligands'):\n        atoms = ampal_obj.get_atoms(ligands=True, inc_alt_states=True)\n    else:\n        atoms = ampal_obj.get_atoms(inc_alt_states=True)\n    for atom in atoms:\n        w_str = None\n        a_ff_id = None\n        if atom.element == 'H':\n            continue\n        elif atom.parent.mol_code.upper() in ff:\n            if atom.res_label.upper() in ff[atom.parent.mol_code]:\n                a_ff_id = (atom.parent.mol_code.upper(),\n                           atom.res_label.upper())\n            elif atom.res_label.upper() in ff['WLD']:\n                a_ff_id = ('WLD', atom.res_label.upper())\n            else:\n                w_str = ('{} atom is not parameterised in the selected '\n                         'force field for {} residues, this will be '\n                         'ignored.').format(\n                             atom.res_label, atom.parent.mol_code)\n        elif atom.res_label.upper() in ff['WLD']:\n            a_ff_id = ('WLD', atom.res_label.upper())\n        else:\n            w_str = ('{} ({}) atom is not parameterised in the selected'\n                     ' residue force field.').format(\n                         atom.res_label, atom.parent.mol_code)\n        if w_str:\n            warnings.warn(w_str, NotParameterisedWarning)\n        atom.tags['_buff_ff_id'] = a_ff_id\n    return","language":"python"}
{"code":"public function setIpAddress($ip, $port = 80) {\n        if (false !== strpos($ip, ':')) {\n            list($ip, $port) = explode(':', $ip);\n        }\n        if (empty($ip)) {\n            $ip = '127.0.0.1';\n        }\n        $this->ip = $ip;\n        $this->port = intval($port);\n        return $this;\n    }","language":"php"}
{"code":"func UserId(name string) (int, error) {\n\tvar pw C.struct_passwd\n\tvar result *C.struct_passwd\n\n\tbufSize := C.sysconf(C._SC_GETPW_R_SIZE_MAX)\n\tif bufSize < 0 {\n\t\tbufSize = 4096\n\t}\n\n\tbuf := C.malloc(C.size_t(bufSize))\n\tif buf == nil {\n\t\treturn -1, fmt.Errorf(\"allocation failed\")\n\t}\n\tdefer C.free(buf)\n\n\tcname := C.CString(name)\n\tdefer C.free(unsafe.Pointer(cname))\n\nagain:\n\trv, errno := C.getpwnam_r(cname,\n\t\t&pw,\n\t\t(*C.char)(buf),\n\t\tC.size_t(bufSize),\n\t\t&result)\n\tif rv < 0 {\n\t\t\/\/ OOM killer will take care of us if we end up doing this too\n\t\t\/\/ often.\n\t\tif errno == syscall.ERANGE {\n\t\t\tbufSize *= 2\n\t\t\ttmp := C.realloc(buf, C.size_t(bufSize))\n\t\t\tif tmp == nil {\n\t\t\t\treturn -1, fmt.Errorf(\"allocation failed\")\n\t\t\t}\n\t\t\tbuf = tmp\n\t\t\tgoto again\n\t\t}\n\t\treturn -1, fmt.Errorf(\"failed user lookup: %s\", syscall.Errno(rv))\n\t}\n\n\tif result == nil {\n\t\treturn -1, fmt.Errorf(\"unknown user %s\", name)\n\t}\n\n\treturn int(C.int(result.pw_uid)), nil\n}","language":"go"}
{"code":"def process_options\n      command = self\n      @options = Trollop::options(command.args) do\n\n        command.prepare_options(self)\n\n        banner <<-END\nStandard options:\n        END\n\n        opt :config, 'config.yaml file location', :short => 'c',\n            :default => 'config.yaml'\n        opt :verbose, 'verbose mode', :short => 'v'\n        opt :addr, 'IP address to use for performing requests', :short => 'a',\n            :type => String\n        opt :token, 'GitHub OAuth token',\n            :type => String, :short => 't'\n        opt :req_limit, 'Number or requests to leave on any provided account (in reqs\/hour)',\n            :type => Integer, :short => 'l'\n        opt :uniq, 'Unique name for this command. Will appear in logs.',\n            :type => String, :short => 'u'\n      end\n    end","language":"ruby"}
{"code":"def run_command(command):\n    \"\"\"\n    Runs command and returns stdout\n    \"\"\"\n    process = subprocess.Popen(\n        shlex.split(command),\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        close_fds=True)\n    output, stderr = [stream.decode(sys.getdefaultencoding(), 'ignore')\n                      for stream in process.communicate()]\n\n    if process.returncode != 0:\n        raise AirflowConfigException(\n            \"Cannot execute {}. Error code is: {}. Output: {}, Stderr: {}\"\n            .format(command, process.returncode, output, stderr)\n        )\n\n    return output","language":"python"}
{"code":"def _cut_off_drivers_of(self, sig: RtlSignalBase):\n        \"\"\"\n        Doc on parent class :meth:`HdlStatement._cut_off_drivers_of`\n        \"\"\"\n        if len(self._outputs) == 1 and sig in self._outputs:\n            self.parentStm = None\n            return self\n\n        # try to cut off all statements which are drivers of specified signal\n        # in all branches\n        child_keep_mask = []\n\n        newIfTrue = []\n        all_cut_off = True\n        all_cut_off &= self._cut_off_drivers_of_list(\n            sig, self.ifTrue, child_keep_mask, newIfTrue)\n        self.ifTrue = list(compress(self.ifTrue, child_keep_mask))\n\n        newElifs = []\n        anyElifHit = False\n        for cond, stms in self.elIfs:\n            newCase = []\n            child_keep_mask.clear()\n            all_cut_off &= self._cut_off_drivers_of_list(\n                sig, stms, child_keep_mask, newCase)\n\n            _stms = list(compress(stms, child_keep_mask))\n            stms.clear()\n            stms.extend(_stms)\n\n            if newCase:\n                anyElifHit = True\n            newElifs.append((cond, newCase))\n\n        newIfFalse = None\n        if self.ifFalse:\n            newIfFalse = []\n            child_keep_mask.clear()\n            all_cut_off &= self._cut_off_drivers_of_list(\n                sig, self.ifFalse, child_keep_mask, newIfFalse)\n            self.ifFalse = list(compress(self.ifFalse, child_keep_mask))\n\n        assert not all_cut_off, \"everything was cut of but this should be already known at start\"\n\n        if newIfTrue or newIfFalse or anyElifHit or newIfFalse:\n            # parts were cut off\n            # generate new statement for them\n            cond_sig = self.cond\n            n = self.__class__(cond_sig, newIfTrue)\n            for c, stms in newElifs:\n                assert len(c) == 1\n                c_sig = c[0]\n                n.Elif(c_sig, stms)\n            if newIfFalse is not None:\n                n.Else(newIfFalse)\n\n            if self.parentStm is None:\n                ctx = n._get_rtl_context()\n                ctx.statements.add(n)\n\n            # update io of this\n            self._inputs.clear()\n            self._inputs.append(cond_sig)\n            for c, _ in self.elIfs:\n                self._inputs.extend(c)\n\n            self._inputs.append(cond_sig)\n            self._outputs.clear()\n\n            out_add = self._outputs.append\n            in_add = self._inputs.append\n\n            for stm in self._iter_stms():\n                for inp in stm._inputs:\n                    in_add(inp)\n\n                for outp in stm._outputs:\n                    out_add(outp)\n\n            if self._sensitivity is not None or self._enclosed_for is not None:\n                raise NotImplementedError(\n                    \"Sensitivity and enclosure has to be cleaned first\")\n\n            return n","language":"python"}
{"code":"def backend_overview():\n    \"\"\"Gives overview information on all the IBMQ\n    backends that are available.\n    \"\"\"\n    unique_hardware_backends = get_unique_backends()\n    _backends = []\n    # Sort backends by operational or not\n    for idx, back in enumerate(unique_hardware_backends):\n        if back.status().operational:\n            _backends = [back] + _backends\n        else:\n            _backends = _backends + [back]\n\n    stati = [back.status() for back in _backends]\n    idx = list(range(len(_backends)))\n    pending = [s.pending_jobs for s in stati]\n    _, least_idx = zip(*sorted(zip(pending, idx)))\n\n    # Make sure least pending is operational\n    for ind in least_idx:\n        if stati[ind].operational:\n            least_pending_idx = ind\n            break\n\n    num_rows = math.ceil(len(_backends)\/3)\n\n    count = 0\n    num_backends = len(_backends)\n    for _ in range(num_rows):\n        max_len = 0\n        str_list = ['']*8\n        for idx in range(3):\n            offset = ' ' * 10 if idx else ''\n            config = _backends[count].configuration().to_dict()\n            props = _backends[count].properties().to_dict()\n            n_qubits = config['n_qubits']\n            str_list[0] += (' '*(max_len-len(str_list[0]))+offset)\n            str_list[0] += _backends[count].name()\n\n            str_list[1] += (' '*(max_len-len(str_list[1]))+offset)\n            str_list[1] += '-'*len(_backends[count].name())\n\n            str_list[2] += (' '*(max_len-len(str_list[2]))+offset)\n            str_list[2] += 'Num. Qubits:  %s' % config['n_qubits']\n\n            str_list[3] += (' '*(max_len-len(str_list[3]))+offset)\n            str_list[3] += 'Pending Jobs: %s' % stati[count].pending_jobs\n\n            str_list[4] += (' '*(max_len-len(str_list[4]))+offset)\n            str_list[4] += 'Least busy:   %s' % (count == least_pending_idx)\n\n            str_list[5] += (' '*(max_len-len(str_list[5]))+offset)\n            str_list[5] += 'Operational:  %s' % stati[count].operational\n\n            str_list[6] += (' '*(max_len-len(str_list[6]))+offset)\n            str_list[6] += 'Avg. T1:      %s' % round(sum([q[0]['value']\n                                                           for q in props['qubits']])\/n_qubits, 1)\n            str_list[7] += (' '*(max_len-len(str_list[7]))+offset)\n            str_list[7] += 'Avg. T2:      %s' % round(sum([q[1]['value']\n                                                           for q in props['qubits']])\/n_qubits, 1)\n            count += 1\n            if count == num_backends:\n                break\n            max_len = max([len(s) for s in str_list])\n\n        print(\"\\n\".join(str_list))\n        print('\\n'*2)","language":"python"}
{"code":"func (v CompositingReasonsParams) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoLayertree20(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}","language":"go"}
{"code":"int isZlibHed( byte[] buf ){\r\n        short b0 = convertunsignedByte2Short(buf[0]);\r\n        short b1 = convertunsignedByte2Short(buf[1]);\r\n\r\n        if ( (b0 & 0xf) == Z_DEFLATED ) {\r\n          if ( (b0 >> 4) + 8 <= DEF_WBITS ) {\r\n            if ( (((b0 << 8) + b1) % 31)==0 ) {\r\n              return 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        return 0;\r\n\r\n    }","language":"java"}
{"code":"func (t *CertificateErrorAction) UnmarshalJSON(buf []byte) error {\n\treturn easyjson.Unmarshal(buf, t)\n}","language":"go"}
{"code":"func (ref BytesRef) UpdateString(s string) {\n\tif ref != nil {\n\t\tcopy(ref, s)\n\t}\n}","language":"go"}
{"code":"def getFieldBitRange(self) -> Tuple[int, int]:\n        \"\"\"\n        :return: bit range which contains data of this part on interface\n            of field\n        \"\"\"\n        offset = self.inFieldOffset\n        return (self.bit_length() + offset, offset)","language":"python"}
{"code":"private function getCertificate(IlluminateRequest $request)\n    {\n        $signatureChainUri = $request->header(self::CERTIFICATE_URL_HEADER);\n\n        $this->validateKeychainUri($signatureChainUri);\n\n        $certificate = $this->certificateProvider->getCertificateFromUri($signatureChainUri);\n\n        return $certificate;\n    }","language":"php"}
{"code":"def html(id, time)\n      inline_footnote_label = Build.tag(\"span\", Build.tag(\"sup\", id.to_s), :class => \"inline-footnote-number\")\n      Build.tag(\"a\", inline_footnote_label, :href => \"#footnote#{id}#{time}\")\n    end","language":"ruby"}
{"code":"func (wh *watcherHub) clone() *watcherHub {\n\tclonedHistory := wh.EventHistory.clone()\n\n\treturn &watcherHub{\n\t\tEventHistory: clonedHistory,\n\t}\n}","language":"go"}
{"code":"private static String cleanPath(String path) {\r\n        path = path == null ? \"\/\" : path;\r\n        if (!path.startsWith(\"\/\")) {\r\n            path = \"\/\" + path;\r\n        }\r\n        path = path.replaceAll(\"\/+\", \"\/\");\r\n        if (path.length() > 1 && path.endsWith(\"\/\")) {\r\n            path = path.substring(0, path.length() - 1);\r\n        }\r\n        return path;\r\n    }","language":"java"}
{"code":"function generateUsername(base) {\n    base = base.toLowerCase();\n    var entries = [];\n    var finalName;\n    return userDB.allDocs({startkey: base, endkey: base + '\\uffff', include_docs: false})\n      .then(function(results){\n        if(results.rows.length === 0) {\n          return BPromise.resolve(base);\n        }\n        for(var i=0; i<results.rows.length; i++) {\n          entries.push(results.rows[i].id);\n        }\n        if(entries.indexOf(base) === -1) {\n          return BPromise.resolve(base);\n        }\n        var num = 0;\n        while(!finalName) {\n          num++;\n          if(entries.indexOf(base+num) === -1) {\n            finalName = base + num;\n          }\n        }\n        return BPromise.resolve(finalName);\n      });\n  }","language":"javascript"}
{"code":"def img(url, alt='', classes='', style=''):\n    '''\n    Image tag helper.\n    '''\n\n    if not url.startswith('http:\/\/') and not url[:1] == '\/':\n        #add media_url for relative paths\n        url = settings.STATIC_URL + url\n\n    attr = {\n        'class': classes,\n        'alt': alt,\n        'style': style,\n        'src': url\n    }\n\n    return html.tag('img', '', attr)","language":"python"}
{"code":"def has_changed(self):\n        \"\"\"Return True if data differs from initial.\"\"\"\n\n        # Need to recurse over nested formsets so that the form is saved if there are changes\n        # to child forms but not the parent\n        if self.formsets:\n            for formset in self.formsets.values():\n                for form in formset.forms:\n                    if form.has_changed():\n                        return True\n        return bool(self.changed_data)","language":"python"}
{"code":"public static Rollup.Type getRollupComputer(RollupType srcType, Granularity srcGran) {\n        switch (srcType) {\n            case COUNTER:\n                return Rollup.CounterFromCounter;\n            case TIMER:\n                return Rollup.TimerFromTimer;\n            case GAUGE:\n                return Rollup.GaugeFromGauge;\n            case BF_BASIC:\n                return srcGran == Granularity.FULL ? Rollup.BasicFromRaw : Rollup.BasicFromBasic;\n            case SET:\n                return Rollup.SetFromSet;\n            default:\n                break;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot compute rollups for %s from %s\", srcType.name(), srcGran.shortName()));\n    }","language":"java"}
{"code":"function(theme) {  \r\n            var preview     = this.preview;\r\n            var oldTheme    = this.settings.previewTheme;\r\n            var themePrefix = this.classPrefix + \"preview-theme-\";\r\n            \r\n            preview.removeClass(themePrefix + oldTheme).addClass(themePrefix + theme);\r\n            \r\n            this.settings.previewTheme = theme;\r\n            \r\n            return this;\r\n        }","language":"javascript"}
{"code":"public static boolean isDriverActive(\n        final File directory, final long driverTimeoutMs, final Consumer<String> logger)\n    {\n        final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE);\n\n        if (cncFile.exists() && cncFile.length() > 0)\n        {\n            logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile);\n\n            final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\");\n            try\n            {\n                return isDriverActive(driverTimeoutMs, logger, cncByteBuffer);\n            }\n            finally\n            {\n                IoUtil.unmap(cncByteBuffer);\n            }\n        }\n\n        return false;\n    }","language":"java"}
{"code":"public static function clearUsername($s)\n\t{\n\t\t$s = Strings::toAscii($s);\n\t\t$s = strtolower($s);\n\t\t$s = preg_replace('#[^a-z0-9]+#i', '.', $s);\n\t\t$s = trim($s, '.');\n\t\treturn $s;\n\t}","language":"php"}
{"code":"public function process(ScheduleInterface $schedule, \\DateTime $currentDateTime = null)\n    {\n        \/\/ ensure that a schedule is not executed twice within in a minute\n        $now = ($currentDateTime == null) ? new \\DateTime() : $currentDateTime;\n\n        if($schedule->getScheduledAt() != null && $schedule->getScheduledAt()->format('Y-m-d H:i') == $now->format('Y-m-d H:i'))\n        {\n            return false;\n        }\n\n        $cron = $this->expressionFactory->create($schedule->getExpression());\n\n        return $cron->isDue($currentDateTime);\n    }","language":"php"}
{"code":"def decrement\n\n      c = data['count']\n      return false unless c\n\n      c = c - 1\n      data['count'] = c\n      self[:status] = s = (c > 0) ? 'active' : 'consumed'\n\n      self.update(\n        content: Flor::Storage.to_blob(@flor_model_cache_data),\n        status: s)\n\n      c < 1\n    end","language":"ruby"}
{"code":"def create( message = \"\" )\n      if \"help\" == message\n        invoke( :help, [ \"create\" ] );\n        exit 0\n      end\n\n      if File.pipe?( STDIN ) || File.select( [STDIN], [], [], 0 ) != nil then\n        message = STDIN.readlines().join( \"\" )\n      end\n\n      url = \"https:\/\/api.pushbullet.com\/v2\/pushes\"\n      token = Utils::get_token( options )\n\n      unless message.empty?\n        args = Utils::get_push_args( options )\n        args['body'] = message\n        Utils::send( url, token, \"post\", args )\n      else\n        puts \"Nothing to do.\"\n      end\n    end","language":"ruby"}
{"code":"def relative_path_from(base_directory)\n      dest_directory = cleanpath.to_s\n      base_directory = base_directory.cleanpath.to_s\n      dest_prefix = dest_directory\n      dest_names = []\n      while (r = chop_basename(dest_prefix))\n        dest_prefix, basename = r\n        dest_names.unshift basename if basename != '.'\n      end\n      base_prefix = base_directory\n      base_names = []\n      while (r = chop_basename(base_prefix))\n        base_prefix, basename = r\n        base_names.unshift basename if basename != '.'\n      end\n      unless SAME_PATHS[dest_prefix, base_prefix]\n        raise ArgumentError, \"different prefix: #{dest_prefix.inspect} \" \\\n        \"and #{base_directory.inspect}\"\n      end\n      while !dest_names.empty? &&\n            !base_names.empty? &&\n            SAME_PATHS[dest_names.first, base_names.first]\n        dest_names.shift\n        base_names.shift\n      end\n      if base_names.include? '..'\n        raise ArgumentError, \"base_directory has ..: #{base_directory.inspect}\"\n      end\n      base_names.fill('..')\n      relpath_names = base_names + dest_names\n      if relpath_names.empty?\n        Pathname.new('.')\n      else\n        Pathname.new(File.join(*relpath_names))\n      end\n    end","language":"ruby"}
{"code":"function parseHost (hostString) {\n  const ip = hostString.substring(0, hostString.lastIndexOf(':'));\n  const port = +hostString.substring(hostString.lastIndexOf(':') + 1);\n  const isIpv6 = ip.match(\/\\[(.*)\\]\/);\n  const host = isIpv6 ? isIpv6[1] : ip;\n  return {\n    host,\n    port\n  };\n}","language":"javascript"}
{"code":"public String getHtml() {\n        AlphaNodeFieldConstraint constraint = this.node.getConstraint();\n        if (constraint instanceof MvelConstraint) {\n        \tMvelConstraint mvelConstraint = (MvelConstraint) constraint;\n            return NODE_NAME + \"<BR\/>expression : \" + mvelConstraint.toString();\n        }\n        return NODE_NAME + \"<BR\/>\";\n    }","language":"java"}
{"code":"static String getSQLTypeName(Field.Type type) throws OnRecordErrorException {\n    switch (type) {\n      case BOOLEAN:\n        return \"BOOLEAN\";\n      case CHAR:\n        return \"CHAR\";\n      case BYTE:\n        return \"BINARY\";\n      case SHORT:\n        return \"SMALLINT\";\n      case INTEGER:\n        return \"INTEGER\";\n      case LONG:\n        return \"BIGINT\";\n      case FLOAT:\n        return \"FLOAT\";\n      case DOUBLE:\n        return \"DOUBLE\";\n      case DATE:\n        return \"DATE\";\n      case TIME:\n        return \"TIME\";\n      case DATETIME:\n        return \"TIMESTAMP\";\n      case DECIMAL:\n        return \"DECIMAL\";\n      case STRING:\n        return \"VARCHAR\";\n      case BYTE_ARRAY:\n        return \"VARBINARY\";\n      case LIST_MAP:\n      case MAP:\n        throw new OnRecordErrorException(JdbcErrors.JDBC_05, \"Unsupported list or map type: MAP\");\n      case LIST:\n        return \"ARRAY\";\n      default:\n        throw new OnRecordErrorException(JdbcErrors.JDBC_05, \"Unsupported type: \" + type.name());\n    }\n  }","language":"java"}
{"code":"function(store, record, url) {\n    var host = get(this, 'host'),\n        id   = get(record, 'id'),\n        type = record.constructor.typeKey;\n\n    if (host && url.charAt(0) === '\/' && url.charAt(1) !== '\/') {\n      url = host + url;\n    }\n\n    return this.ajax(this.urlPrefix(url, this.buildURL(type, id)), 'GET');\n  }","language":"javascript"}
{"code":"func (v *SetDefaultBackgroundColorOverrideParams) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoEmulation13(&r, v)\n\treturn r.Error()\n}","language":"go"}
{"code":"def register(name, fn = nil, &block)\n      self.class.new(methods.merge(name => fn || block))\n    end","language":"ruby"}
{"code":"public function getList($field)\n    {\n        $this->_cols_str = ' '.self::_quote($field).' ';\n        $this->_buildQuery();\n        $this->_execute();\n\n        return $this->_pdoSt->fetchAll(PDO::FETCH_COLUMN, 0);\n    }","language":"php"}
{"code":"function kissmetrics_client(options) {\n  \n  var options   = options || {}\n    ;\n    \n  this.host = options.host || DEFAULT_TRACKER_SERVER;\n  this.port = options.port || DEFAULT_TRACKER_PORT;\n  \n  this.key  = options.key;\n\n}","language":"javascript"}
{"code":"function toggleClass(element, classToToggle, predicate) {\n\n  \/\/ This CANNOT use `classList` internally because IE does not support the\n  \/\/ second parameter to the `classList.toggle()` method! Which is fine because\n  \/\/ `classList` will be used by the add\/remove functions.\n  var has = hasClass(element, classToToggle);\n\n  if (typeof predicate === 'function') {\n    predicate = predicate(element, classToToggle);\n  }\n\n  if (typeof predicate !== 'boolean') {\n    predicate = !has;\n  }\n\n  \/\/ If the necessary class operation matches the current state of the\n  \/\/ element, no action is required.\n  if (predicate === has) {\n    return;\n  }\n\n  if (predicate) {\n    addClass(element, classToToggle);\n  } else {\n    removeClass(element, classToToggle);\n  }\n\n  return element;\n}","language":"javascript"}
{"code":"private function getQualifiedPivotTableName(string $class=null): string\n    {\n        \/** @var \\Cviebrock\\EloquentTaggable\\Taggable $instance *\/\n        $instance = $class ? new $class : new class extends Model { use Taggable; };\n\n        return $instance->tags()->getConnection()->getTablePrefix() .\n                $instance->tags()->getTable();\n    }","language":"php"}
{"code":"def setup(level='debug', output=None):\n    ''' Hivy formated logger '''\n    output = output or settings.LOG['file']\n\n    level = level.upper()\n    handlers = [\n        logbook.NullHandler()\n    ]\n    if output == 'stdout':\n        handlers.append(\n            logbook.StreamHandler(sys.stdout,\n                                  format_string=settings.LOG['format'],\n                                  level=level))\n    else:\n        handlers.append(\n            logbook.FileHandler(output,\n                                format_string=settings.LOG['format'],\n                                level=level))\n\n    sentry_dns = settings.LOG['sentry_dns']\n    if sentry_dns:\n        handlers.append(SentryHandler(sentry_dns, level='ERROR'))\n\n    return logbook.NestedSetup(handlers)","language":"python"}
{"code":"public function isNull($column)\n    {\n        $column = $this->prepareColumn($column);\n        $this->isNull[] = ['subject' => $column];\n\n        return $this;\n    }","language":"php"}
{"code":"public static String getDTypeForName(DataBuffer.Type allocationMode) {\n        switch (allocationMode) {\n            case DOUBLE:\n                return \"double\";\n            case FLOAT:\n                return \"float\";\n            case INT:\n                return \"int\";\n            case HALF:\n                return \"half\";\n            default:\n                return \"float\";\n        }\n    }","language":"java"}
{"code":"func NewGoogleClientFromSecret(bucket string) (Client, error) {\n\tvar err error\n\tif bucket == \"\" {\n\t\tbucket, err = readSecretFile(\"\/google-bucket\")\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"google-bucket not found\")\n\t\t}\n\t}\n\tcred, err := readSecretFile(\"\/google-cred\")\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"google-cred not found\")\n\t}\n\tvar opts []option.ClientOption\n\tif cred != \"\" {\n\t\topts = append(opts, option.WithCredentialsFile(secretFile(\"\/google-cred\")))\n\t} else {\n\t\topts = append(opts, option.WithTokenSource(google.ComputeTokenSource(\"\")))\n\t}\n\treturn NewGoogleClient(bucket, opts)\n}","language":"go"}
{"code":"public function boot(Router $router)\n    {\n        if (!$this->app->routesAreCached()) {\n            require __DIR__ . '\/Routes\/web.php';\n        }\n\n        $this->publishes([\n            __DIR__ . '\/Config\/language.php'                                  => config_path('language.php'),\n            __DIR__ . '\/Migrations\/2020_01_01_000000_add_locale_column.php'   => database_path('migrations\/2020_01_01_000000_add_locale_column.php'),\n            __DIR__ . '\/Resources\/views\/flag.blade.php'                       => resource_path('views\/vendor\/language\/flag.blade.php'),\n            __DIR__ . '\/Resources\/views\/flags.blade.php'                      => resource_path('views\/vendor\/language\/flags.blade.php'),\n        ], 'language');\n\n        $router->aliasMiddleware('language', config('language.middleware'));\n\n        $this->app->register(IdentifyServiceProvider::class);\n\n        $this->app->singleton('language', function ($app) {\n            return new Language($app);\n        });\n    }","language":"php"}
{"code":"function Bucket (index, routingTable) {\n  if (!(this instanceof Bucket)) {\n    return new Bucket()\n  }\n  assert(_.isNumber(index) && index >= 0 && index <= constants.B)\n  this.index = index\n  this.contacts = []\n  this._cache = {}\n  this._routingTable = routingTable\n}","language":"javascript"}
{"code":"function(json){\n    \n    \/\/ Protect against forgetting the new keyword when calling the constructor\n    if(!(this instanceof MergeConflict)){\n      return new MergeConflict(json);\n    }\n    \n    \/\/ If the given object is already an instance then just return it. DON'T copy it.\n    if(MergeConflict.isInstance(json)){\n      return json;\n    }\n    \n    this.init(json);\n  }","language":"javascript"}
{"code":"public void setIds(StringList v) {\n    if (Concept_Type.featOkTst && ((Concept_Type)jcasType).casFeat_ids == null)\n      jcasType.jcas.throwFeatMissing(\"ids\", \"edu.cmu.lti.oaqa.type.kb.Concept\");\n    jcasType.ll_cas.ll_setRefValue(addr, ((Concept_Type)jcasType).casFeatCode_ids, jcasType.ll_cas.ll_getFSRef(v));}","language":"java"}
{"code":"function filterAndSort (args, adapters) {\n  var results = decorateAndFilter(args, adapters)\n  \/\/ sort\n  stable.inplace(results, compare)\n  \/\/ undecorate\n  return undecorate(results)\n}","language":"javascript"}
{"code":"func (wh *watcherHub) notify(e *Event) {\n\te = wh.EventHistory.addEvent(e) \/\/ add event into the eventHistory\n\n\tsegments := strings.Split(e.Node.Key, \"\/\")\n\n\tcurrPath := \"\/\"\n\n\t\/\/ walk through all the segments of the path and notify the watchers\n\t\/\/ if the path is \"\/foo\/bar\", it will notify watchers with path \"\/\",\n\t\/\/ \"\/foo\" and \"\/foo\/bar\"\n\n\tfor _, segment := range segments {\n\t\tcurrPath = path.Join(currPath, segment)\n\t\t\/\/ notify the watchers who interests in the changes of current path\n\t\twh.notifyWatchers(e, currPath, false)\n\t}\n}","language":"go"}
{"code":"func NewApprovers(owners Owners) Approvers {\n\treturn Approvers{\n\t\towners:    owners,\n\t\tapprovers: map[string]Approval{},\n\t\tassignees: sets.NewString(),\n\n\t\tManuallyApproved: func() bool {\n\t\t\treturn false\n\t\t},\n\t}\n}","language":"go"}
{"code":"def set_mic_mode(self, index, mic_enabled):\n        '''Enable\/disable Alexa mic (only for Ecobee 4)\n        Values: True, False\n        '''\n        \n        body = {\n            'selection': {\n                'selectionType': 'thermostats',\n                'selectionMatch': self.thermostats[index]['identifier']},\n            'thermostat': {\n                'audio': {\n                    'microphoneEnabled': mic_enabled}}}\n\n        log_msg_action = 'set mic mode'\n        return self.make_request(body, log_msg_action)","language":"python"}
{"code":"func (p *Process) FindObject(a core.Address) (Object, int64) {\n\t\/\/ Round down to the start of an object.\n\th := p.findHeapInfo(a)\n\tif h == nil {\n\t\t\/\/ Not in Go heap, or in a span\n\t\t\/\/ that doesn't hold Go objects (freed, stacks, ...)\n\t\treturn 0, 0\n\t}\n\tx := h.base.Add(a.Sub(h.base) \/ h.size * h.size)\n\t\/\/ Check if object is marked.\n\th = p.findHeapInfo(x)\n\tif h.mark>>(uint64(x)%heapInfoSize\/8)&1 == 0 { \/\/ free or garbage\n\t\treturn 0, 0\n\t}\n\treturn Object(x), a.Sub(x)\n}","language":"go"}
{"code":"func (l Label) Abs(repo, pkg string) Label {\n\tif !l.Relative {\n\t\treturn l\n\t}\n\treturn Label{Repo: repo, Pkg: pkg, Name: l.Name}\n}","language":"go"}
{"code":"def do_help(self, options, args, parser):\n        \"\"\"Deal with help requests.\n\n        Return True if it handled the request, False if not.\n\n        \"\"\"\n        # Handle help.\n        if options.help:\n            if self.classic:\n                self.help_fn(topic='help')\n            else:\n                self.help_fn(parser=parser)\n            return True\n\n        if \"help\" in options.actions:\n            if args:\n                for a in args:\n                    parser = CMDS.get(a)\n                    if parser:\n                        self.help_fn(parser=parser)\n                    else:\n                        self.help_fn(topic=a)\n            else:\n                self.help_fn(topic='help')\n            return True\n\n        # Handle version.\n        if options.version:\n            self.help_fn(topic='version')\n            return True\n\n        return False","language":"python"}
{"code":"function(win, lose, args) {\n        var id = args[0];\n        var thisM = Media.get(id);\n        try {\n            thisM.node.pause();\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_PAUSED);\n        } catch (err) {\n            lose(\"Failed to pause: \"+err);\n        }\n    }","language":"javascript"}
{"code":"func (v *GetDatabaseTableNamesReturns) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoDatabase(&r, v)\n\treturn r.Error()\n}","language":"go"}
{"code":"public static MediaPictureConverter createConverter(\n    BufferedImage image,\n    PixelFormat.Type pictureType)\n  {\n    if (image == null)\n      throw new IllegalArgumentException(\"The image is NULL.\");\n\n    \/\/ find the converter type based in image type\n\n    String converterDescriptor = findDescriptor(image);\n    if (converterDescriptor == null)\n      throw new UnsupportedOperationException(\n        \"No converter found for BufferedImage type #\" + \n        image.getType());\n\n    \/\/ create and return the converter\n\n    return createConverter(converterDescriptor, pictureType,\n      image.getWidth(), image.getHeight());\n  }","language":"java"}
{"code":"function collapse(evt) {\n        var collapser = evt.target;\n\n        var target = collapser.parentNode.getElementsByClassName('collapsible');\n\n        if ( ! target.length ) {\n            return\n        }\n\n        target = target[0];\n\n        if ( target.style.display === 'none' ) {\n            var ellipsis = target.parentNode\n                .getElementsByClassName('ellipsis')[0]\n            target.parentNode.removeChild(ellipsis);\n            target.style.display = '';\n            collapser.innerHTML = '-';\n        } else {\n            target.style.display = 'none';\n\n            var ellipsis = document.createElement('span');\n            ellipsis.className = 'ellipsis';\n            ellipsis.innerHTML = ' &hellip; ';\n            target.parentNode.insertBefore(ellipsis, target);\n            collapser.innerHTML = '+';\n        }\n    }","language":"javascript"}
{"code":"def unban_user container, user, subreddit\n      unfriend_wrapper container: container, name: user, r: subreddit, type: \"banned\"\n    end","language":"ruby"}
{"code":"protected int search(char[] chs, int offset, int tailLen) {\r\n\t\tif(tailLen == 0) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tCharNode cn = dic.head(chs[offset]);\r\n\t\t\r\n\t\treturn search(cn, chs, offset, tailLen);\r\n\t}","language":"java"}
{"code":"func (r *tarballReference) NewImage(ctx context.Context, sys *types.SystemContext) (types.ImageCloser, error) {\n\tsrc, err := r.NewImageSource(ctx, sys)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\timg, err := image.FromSource(ctx, sys, src)\n\tif err != nil {\n\t\tsrc.Close()\n\t\treturn nil, err\n\t}\n\treturn img, nil\n}","language":"go"}
{"code":"func IsEnabled() bool {\n\n\tif appEnv, err := cfenv.Current(); err == nil {\n\t\tif taskService, err := appEnv.Services.WithName(\"innkeeper-service\"); err == nil {\n\t\t\tif taskService.Credentials[\"enable\"].(string) == \"1\" {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\tlo.G.Error(\"m1small not enabled\")\n\treturn false\n}","language":"go"}
{"code":"public function getOtherPartyId($partyId)\n    {\n        if ($partyId == $this->idpEntityId) {\n            return $this->spEntityId;\n        } elseif ($partyId == $this->spEntityId) {\n            return $this->idpEntityId;\n        }\n\n        throw new LightSamlException(sprintf(\n            'Party \"%s\" is not included in sso session between \"%s\" and \"%s\"',\n            $partyId,\n            $this->idpEntityId,\n            $this->spEntityId\n        ));\n    }","language":"php"}
{"code":"public function addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete = null, $update = null)\n    {\n        \/\/ ON DELETE and ON UPDATE not supported by Redshift\n        return parent::addForeignKey($name, $table, $columns, $refTable, $refColumns, null, null);\n    }","language":"php"}
{"code":"def queue_client(queue, key = queue, ack = :after, block)\n\n      stopped = false\n      while not stopped\n        begin\n          conn = Bunny.new(:host => config(:amqp_host),\n                           :port => config(:amqp_port),\n                           :username => config(:amqp_username),\n                           :password => config(:amqp_password))\n          conn.start\n\n          ch  = conn.create_channel\n          debug \"Queue setting prefetch to #{config(:amqp_prefetch)}\"\n          ch.prefetch(config(:amqp_prefetch))\n          debug \"Queue connection to #{config(:amqp_host)} succeeded\"\n\n          x = ch.topic(config(:amqp_exchange), :durable => true,\n                       :auto_delete => false)\n          q = ch.queue(queue, :durable => true)\n          q.bind(x, :routing_key => key)\n\n          q.subscribe(:block => true,\n                      :manual_ack => true) do |delivery_info, properties, msg|\n\n            if ack == :before\n              ch.acknowledge(delivery_info.delivery_tag)\n            end\n\n            begin\n              block.call(msg)\n            ensure\n              if ack != :before\n                ch.acknowledge(delivery_info.delivery_tag)\n              end\n            end\n          end\n\n        rescue Bunny::TCPConnectionFailed => e\n          warn \"Connection to #{config(:amqp_host)} failed. Retrying in 1 sec\"\n          sleep(1)\n        rescue Bunny::PossibleAuthenticationFailureError => e\n          warn \"Could not authenticate as #{conn.username}\"\n        rescue Bunny::NotFound, Bunny::AccessRefused, Bunny::PreconditionFailed => e\n          warn \"Channel error: #{e}. Retrying in 1 sec\"\n          sleep(1)\n        rescue Interrupt => _\n          stopped = true\n        rescue StandardError => e\n          raise e\n        end\n      end\n\n      ch.close unless ch.nil?\n      conn.close unless conn.nil?\n\n    end","language":"ruby"}
{"code":"def footnote_html(footnote_seed, time)\n      footnote_content = sequence.elements.reduce([]) do |memo, element|\n        if element.respond_to?(:footnote_html)\n          footnote_seed += 1\n          memo + [element.footnote_html(footnote_seed, time)]\n        else\n          memo\n        end\n      end\n    end","language":"ruby"}
{"code":"public function getUnprocessedMails($markProcessed = true, \\Closure $callbackFunction = null)\n    {\n        $search = ' NOT KEYWORD \"'.ImapHelper::PROCESSED_FLAG.'\"';\n\n        return $this\n            ->imapHelper\n            ->fetchMails(\n                $this->imapAdapter,\n                $search,\n                $markProcessed,\n                true,\n                $callbackFunction\n            );\n    }","language":"php"}
{"code":"def inkscape_export(input_file, output_file, export_flag=\"-A\", dpi=90, inkscape_binpath=None):\n    \"\"\" Call Inkscape to export the input_file to output_file using the\n    specific export argument flag for the output file type.\n\n    Parameters\n    ----------\n\n    input_file: str\n        Path to the input file\n\n    output_file: str\n        Path to the output file\n\n    export_flag: str\n        Inkscape CLI flag to indicate the type of the output file\n\n    Returns\n    -------\n    return_value\n        Command call return value\n\n    \"\"\"\n    if not os.path.exists(input_file):\n        log.error('File {} not found.'.format(input_file))\n        raise IOError((0, 'File not found.', input_file))\n\n    if '=' not in export_flag:\n        export_flag += ' '\n\n    arg_strings = []\n    arg_strings += ['--without-gui']\n    arg_strings += ['--export-text-to-path']\n    arg_strings += ['{}\"{}\"'.format(export_flag, output_file)]\n    arg_strings += ['--export-dpi={}'.format(dpi)]\n    arg_strings += ['\"{}\"'.format(input_file)]\n\n    return call_inkscape(arg_strings, inkscape_binpath=inkscape_binpath)","language":"python"}
{"code":"func NewTrackedBuffer(nodeFormatter NodeFormatter) *TrackedBuffer {\n\treturn &TrackedBuffer{\n\t\tBuffer:        new(bytes.Buffer),\n\t\tnodeFormatter: nodeFormatter,\n\t}\n}","language":"go"}
{"code":"@Generated(value = \"com.sun.tools.xjc.Driver\", date = \"2018-10-12T02:54:50+02:00\", comments = \"JAXB RI v2.2.11\")\n    public List<Einzelhandel> getEinzelhandel() {\n        if (einzelhandel == null) {\n            einzelhandel = new ArrayList<Einzelhandel>();\n        }\n        return this.einzelhandel;\n    }","language":"java"}
{"code":"function _rotateToOrientaion(img, orientation) {\n\t\t\tvar RADIANS = Math.PI\/180;\n\t\t\tvar canvas = document.createElement('canvas');\n\t\t\tvar ctx = canvas.getContext('2d');\n\t\t\tvar width = img.width;\n\t\t\tvar height = img.height;\n\n\t\t\tif (Basic.inArray(orientation, [5,6,7,8]) > -1) {\n\t\t\t\tcanvas.width = height;\n\t\t\t\tcanvas.height = width;\n\t\t\t} else {\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\t\t\t}\n\n\t\t\t\/**\n\t\t\t1 = The 0th row is at the visual top of the image, and the 0th column is the visual left-hand side.\n\t\t\t2 = The 0th row is at the visual top of the image, and the 0th column is the visual right-hand side.\n\t\t\t3 = The 0th row is at the visual bottom of the image, and the 0th column is the visual right-hand side.\n\t\t\t4 = The 0th row is at the visual bottom of the image, and the 0th column is the visual left-hand side.\n\t\t\t5 = The 0th row is the visual left-hand side of the image, and the 0th column is the visual top.\n\t\t\t6 = The 0th row is the visual right-hand side of the image, and the 0th column is the visual top.\n\t\t\t7 = The 0th row is the visual right-hand side of the image, and the 0th column is the visual bottom.\n\t\t\t8 = The 0th row is the visual left-hand side of the image, and the 0th column is the visual bottom.\n\t\t\t*\/\n\t\t\tswitch (orientation) {\n\t\t\t\tcase 2:\n\t\t\t\t\t\/\/ horizontal flip\n\t\t\t\t\tctx.translate(width, 0);\n\t\t\t\t\tctx.scale(-1, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t\/\/ 180 rotate left\n\t\t\t\t\tctx.translate(width, height);\n\t\t\t\t\tctx.rotate(180 * RADIANS);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t\/\/ vertical flip\n\t\t\t\t\tctx.translate(0, height);\n\t\t\t\t\tctx.scale(1, -1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t\/\/ vertical flip + 90 rotate right\n\t\t\t\t\tctx.rotate(90 * RADIANS);\n\t\t\t\t\tctx.scale(1, -1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\t\/\/ 90 rotate right\n\t\t\t\t\tctx.rotate(90 * RADIANS);\n\t\t\t\t\tctx.translate(0, -height);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\t\/\/ horizontal flip + 90 rotate right\n\t\t\t\t\tctx.rotate(90 * RADIANS);\n\t\t\t\t\tctx.translate(width, -height);\n\t\t\t\t\tctx.scale(-1, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\t\/\/ 90 rotate left\n\t\t\t\t\tctx.rotate(-90 * RADIANS);\n\t\t\t\t\tctx.translate(-width, 0);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tctx.drawImage(img, 0, 0, width, height);\n\t\t\treturn canvas;\n\t\t}","language":"javascript"}
{"code":"func reconcile(c reconciler, key string) error {\n\tlogrus.Debugf(\"reconcile: %s\\n\", key)\n\n\tctx, namespace, name, err := fromKey(key)\n\tif err != nil {\n\t\truntime.HandleError(err)\n\t\treturn nil\n\t}\n\n\tvar wantPipelineRun bool\n\tpj, err := c.getProwJob(name)\n\tswitch {\n\tcase apierrors.IsNotFound(err):\n\t\t\/\/ Do not want pipeline\n\tcase err != nil:\n\t\treturn fmt.Errorf(\"get prowjob: %v\", err)\n\tcase pj.Spec.Agent != prowjobv1.TektonAgent:\n\t\t\/\/ Do not want a pipeline for this job\n\tcase pjutil.ClusterToCtx(pj.Spec.Cluster) != ctx:\n\t\t\/\/ Build is in wrong cluster, we do not want this build\n\t\tlogrus.Warnf(\"%s found in context %s not %s\", key, ctx, pjutil.ClusterToCtx(pj.Spec.Cluster))\n\tcase pj.DeletionTimestamp == nil:\n\t\twantPipelineRun = true\n\t}\n\n\tvar havePipelineRun bool\n\tp, err := c.getPipelineRun(ctx, namespace, name)\n\tswitch {\n\tcase apierrors.IsNotFound(err):\n\t\t\/\/ Do not have a pipeline\n\tcase err != nil:\n\t\treturn fmt.Errorf(\"get pipelinerun %s: %v\", key, err)\n\tcase p.DeletionTimestamp == nil:\n\t\thavePipelineRun = true\n\t}\n\n\tvar newPipelineRun bool\n\tswitch {\n\tcase !wantPipelineRun:\n\t\tif !havePipelineRun {\n\t\t\tif pj != nil && pj.Spec.Agent == prowjobv1.TektonAgent {\n\t\t\t\tlogrus.Infof(\"Observed deleted: %s\", key)\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\t\t\/\/ Skip deleting if the pipeline run is not created by prow\n\t\tswitch v, ok := p.Labels[kube.CreatedByProw]; {\n\t\tcase !ok, v != \"true\":\n\t\t\treturn nil\n\t\t}\n\t\tlogrus.Infof(\"Delete PipelineRun\/%s\", key)\n\t\tif err = c.deletePipelineRun(ctx, namespace, name); err != nil {\n\t\t\treturn fmt.Errorf(\"delete pipelinerun: %v\", err)\n\t\t}\n\t\treturn nil\n\tcase finalState(pj.Status.State):\n\t\tlogrus.Infof(\"Observed finished: %s\", key)\n\t\treturn nil\n\tcase wantPipelineRun && pj.Spec.PipelineRunSpec == nil:\n\t\treturn fmt.Errorf(\"nil PipelineRunSpec in ProwJob\/%s\", key)\n\tcase wantPipelineRun && !havePipelineRun:\n\t\tid, url, err := c.pipelineID(*pj)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to get pipeline id: %v\", err)\n\t\t}\n\t\tpj.Status.BuildID = id\n\t\tpj.Status.URL = url\n\t\tnewPipelineRun = true\n\t\tpr := makePipelineGitResource(*pj)\n\t\tlogrus.Infof(\"Create PipelineResource\/%s\", key)\n\t\tif pr, err = c.createPipelineResource(ctx, namespace, pr); err != nil {\n\t\t\treturn fmt.Errorf(\"create PipelineResource\/%s: %v\", key, err)\n\t\t}\n\t\tnewp, err := makePipelineRun(*pj, pr)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"make PipelineRun\/%s: %v\", key, err)\n\t\t}\n\t\tlogrus.Infof(\"Create PipelineRun\/%s\", key)\n\t\tp, err = c.createPipelineRun(ctx, namespace, newp)\n\t\tif err != nil {\n\t\t\tjerr := fmt.Errorf(\"start pipeline: %v\", err)\n\t\t\t\/\/ Set the prow job in error state to avoid an endless loop when\n\t\t\t\/\/ the pipeline cannot be executed (e.g. referenced pipeline does not exist)\n\t\t\treturn updateProwJobState(c, key, newPipelineRun, pj, prowjobv1.ErrorState, jerr.Error())\n\t\t}\n\t}\n\n\tif p == nil {\n\t\treturn fmt.Errorf(\"no pipelinerun found or created for %q, wantPipelineRun was %v\", key, wantPipelineRun)\n\t}\n\twantState, wantMsg := prowJobStatus(p.Status)\n\treturn updateProwJobState(c, key, newPipelineRun, pj, wantState, wantMsg)\n}","language":"go"}
{"code":"def run(command, args = nil)\n      cmd = CommandLine.new(command, args)\n      vputs(cmd)\n      cmd.run\n    end","language":"ruby"}
{"code":"def _change_state_for_executable_task_instances(self, task_instances,\n                                                    acceptable_states, session=None):\n        \"\"\"\n        Changes the state of task instances in the list with one of the given states\n        to QUEUED atomically, and returns the TIs changed in SimpleTaskInstance format.\n\n        :param task_instances: TaskInstances to change the state of\n        :type task_instances: list[airflow.models.TaskInstance]\n        :param acceptable_states: Filters the TaskInstances updated to be in these states\n        :type acceptable_states: Iterable[State]\n        :rtype: list[airflow.utils.dag_processing.SimpleTaskInstance]\n        \"\"\"\n        if len(task_instances) == 0:\n            session.commit()\n            return []\n\n        TI = models.TaskInstance\n        filter_for_ti_state_change = (\n            [and_(\n                TI.dag_id == ti.dag_id,\n                TI.task_id == ti.task_id,\n                TI.execution_date == ti.execution_date)\n                for ti in task_instances])\n        ti_query = (\n            session\n            .query(TI)\n            .filter(or_(*filter_for_ti_state_change)))\n\n        if None in acceptable_states:\n            ti_query = ti_query.filter(\n                or_(TI.state == None, TI.state.in_(acceptable_states))  # noqa: E711\n            )\n        else:\n            ti_query = ti_query.filter(TI.state.in_(acceptable_states))\n\n        tis_to_set_to_queued = (\n            ti_query\n            .with_for_update()\n            .all())\n        if len(tis_to_set_to_queued) == 0:\n            self.log.info(\"No tasks were able to have their state changed to queued.\")\n            session.commit()\n            return []\n\n        # set TIs to queued state\n        for task_instance in tis_to_set_to_queued:\n            task_instance.state = State.QUEUED\n            task_instance.queued_dttm = (timezone.utcnow()\n                                         if not task_instance.queued_dttm\n                                         else task_instance.queued_dttm)\n            session.merge(task_instance)\n\n        # Generate a list of SimpleTaskInstance for the use of queuing\n        # them in the executor.\n        simple_task_instances = [SimpleTaskInstance(ti) for ti in\n                                 tis_to_set_to_queued]\n\n        task_instance_str = \"\\n\\t\".join(\n            [repr(x) for x in tis_to_set_to_queued])\n\n        session.commit()\n        self.log.info(\"Setting the following %s tasks to queued state:\\n\\t%s\",\n                      len(tis_to_set_to_queued), task_instance_str)\n        return simple_task_instances","language":"python"}
{"code":"func (v *GetBrowserCommandLineParams) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoBrowser16(&r, v)\n\treturn r.Error()\n}","language":"go"}
{"code":"public org.omg.CORBA.Object resolve_str(String n) throws NotFound, CannotProceed, InvalidName {\n        return resolve(to_name(n));\n    }","language":"java"}
{"code":"def flair_toggle enabled, subreddit\n      logged_in?\n      post('\/api\/setflairenabled', body: {flair_enabled: enabled, uh: @modhash, r: subreddit, api_type: 'json'})\n    end","language":"ruby"}
{"code":"function(content,filePath) {\n        'use strict';\n\n        var self = this;\n\n        var regImport = \/@import\\s*(url)?\\(?['\"]([^'\"%]+)\\.css['\"]\\)?[^;]*;\/ig,\n            regImageOrFont = \/(url)?\\(['\"]?([^:\\)]+\\.(png|jpg|gif|jpeg|ttf|eot|woff|svg))([^\\)]*)['\"]?\\)\/ig,\n            importResult,\n            picAndFontResult;\n\n        var importFilePath = path.dirname(path.resolve(self.config.sourceDir,filePath));\n\n        \/\/ \u66ff\u6362import\n        importResult = regImport.exec(content);\n        if (typeof importResult !== 'undefined' && importResult && importResult[2]) {\n            var importAbsoluteUrl = path.resolve(importFilePath,importResult[2]);\n            \/\/ \u7528%\u53f7\u8868\u793a\u5df2\u7ecf\u66ff\u6362\u597d\u7684import\u8def\u5f84\uff0c\u540e\u7eed\u4f1a\u518d\u53bb\u6389\u767e\u5206\u53f7,\u8fd9\u91cc\u66ff\u6362\u7684\u65f6\n            \/\/ \u5019\u8981\u6ce8\u610f\u5168\u5c40\u7684\u66ff\u6362\n            var regimportReplace = new RegExp(importResult[2],'g');\n            content = content.replace(regimportReplace, \"%\" + path.relative(self.config.sourceDir,importAbsoluteUrl));\n            return self.modifySubImportsPath(content, filePath);\n        }\n        \/\/ \u66ff\u6362\u56fe\u7247\u548cfont\u7684\u8def\u5f84\n        picAndFontResult = regImageOrFont.exec(content);\n        if (typeof picAndFontResult !== 'undefined' && picAndFontResult && picAndFontResult[2] && !\/^\\\/\\\/[^\\\/]+\/.test(picAndFontResult[2])) {\n            var regpicReplace = new RegExp(picAndFontResult[2],'g');\n            var picAbsolutePath = path.resolve(importFilePath,picAndFontResult[2]);\n            \/\/\u89e3\u51b3win\u5e73\u53f0\u4e0b\u8def\u5f84\u7684\u659c\u6760\u95ee\u9898\n            var isWin = (process.platform === 'win32');\n            var _path = path.relative(self.config.sourceDir,picAbsolutePath);\n            if(isWin){\n                _path = path.relative(self.config.sourceDir,picAbsolutePath).split(path.sep).join(\"\\\/\");\n            }\n            \/\/ \u7528\uff1a\u53f7\u8868\u793a\u5df2\u7ecf\u66ff\u6362\u597d\u7684import\u8def\u5f84\uff0c\u540e\u7eed\u4f1a\u518d\u53bb\u6389\u5192\u53f7\n            content = content.replace(regpicReplace, \":\" + _path);\n            return self.modifySubImportsPath(content, filePath);\n        }\n        return content;\n    }","language":"javascript"}
{"code":"def check_prerequisites(\n        prerequisites,\n        checker,\n        msg_tmpl='Prerequisites \"{}\" are required in method \"{}\" but not '\n        'found, please install them first.'):\n    \"\"\"A decorator factory to check if prerequisites are satisfied.\n\n    Args:\n        prerequisites (str of list[str]): Prerequisites to be checked.\n        checker (callable): The checker method that returns True if a\n            prerequisite is meet, False otherwise.\n        msg_tmpl (str): The message template with two variables.\n\n    Returns:\n        decorator: A specific decorator.\n    \"\"\"\n\n    def wrap(func):\n\n        @functools.wraps(func)\n        def wrapped_func(*args, **kwargs):\n            requirements = [prerequisites] if isinstance(\n                prerequisites, str) else prerequisites\n            missing = []\n            for item in requirements:\n                if not checker(item):\n                    missing.append(item)\n            if missing:\n                print(msg_tmpl.format(', '.join(missing), func.__name__))\n                raise RuntimeError('Prerequisites not meet.')\n            else:\n                return func(*args, **kwargs)\n\n        return wrapped_func\n\n    return wrap","language":"python"}
{"code":"def add_virtual_columns_cartesian_velocities_to_pmvr(self, x=\"x\", y=\"y\", z=\"z\", vx=\"vx\", vy=\"vy\", vz=\"vz\", vr=\"vr\", pm_long=\"pm_long\", pm_lat=\"pm_lat\", distance=None):\n    \"\"\"Concert velocities from a cartesian system to proper motions and radial velocities\n\n    TODO: errors\n\n    :param x: name of x column (input)\n    :param y:         y\n    :param z:         z\n    :param vx:       vx\n    :param vy:       vy\n    :param vz:       vz\n    :param vr: name of the column for the radial velocity in the r direction (output)\n    :param pm_long: name of the column for the proper motion component in the longitude direction  (output)\n    :param pm_lat: name of the column for the proper motion component in the latitude direction, positive points to the north pole (output)\n    :param distance: Expression for distance, if not given defaults to sqrt(x**2+y**2+z**2), but if this column already exists, passing this expression may lead to a better performance\n    :return:\n    \"\"\"\n    if distance is None:\n        distance = \"sqrt({x}**2+{y}**2+{z}**2)\".format(**locals())\n    k = 4.74057\n    self.add_variable(\"k\", k, overwrite=False)\n    self.add_virtual_column(vr, \"({x}*{vx}+{y}*{vy}+{z}*{vz})\/{distance}\".format(**locals()))\n    self.add_virtual_column(pm_long, \"-({vx}*{y}-{x}*{vy})\/sqrt({x}**2+{y}**2)\/{distance}\/k\".format(**locals()))\n    self.add_virtual_column(pm_lat, \"-({z}*({x}*{vx}+{y}*{vy}) - ({x}**2+{y}**2)*{vz})\/( ({x}**2+{y}**2+{z}**2) * sqrt({x}**2+{y}**2) )\/k\".format(**locals()))","language":"python"}
{"code":"public function hydrate($value)\n    {\n        $organizationNameEntity = $value;\n        if (is_string($value)) {\n            if (!isset($this->repository)) {\n                throw new \\InvalidArgumentException('OrganizationNameStrategy needs to access to the Repository');\n            }\n            if (!$this->repository instanceof OrganizationNameRepository) {\n                throw new \\InvalidArgumentException('OrganizationNameStrategy repository needs to be of the class Organizations\\Repository\\OrganizationName');\n            }\n            $organizationNameEntity = $this->repository->findbyName($value);\n        }\n        return $organizationNameEntity;\n    }","language":"php"}
{"code":"def path_with_prefix(seedname, path)\n      if @swift_seedname_prefix\n        components = path.split(\"\/\")\n        prefix = seedname + \"_\"  # Alamofire_\n        filename = components[-1]  # Alamofire.swift\n        extension = File.extname(filename)  # .swift\n\n        # only swift files can have prefix in filename\n        if extension == '.swift' and not filename.start_with? prefix\n          filename = prefix + filename  # Alamofire_Alamofire.swift\n          newpath = components[0...-1].join('\/') + '\/' + filename\n          File.rename(path, newpath)  # rename real files\n          path = newpath\n        end\n      end\n      path\n    end","language":"ruby"}
{"code":"def axis_sort(S, axis=-1, index=False, value=None):\n    '''Sort an array along its rows or columns.\n\n    Examples\n    --------\n    Visualize NMF output for a spectrogram S\n\n    >>> # Sort the columns of W by peak frequency bin\n    >>> y, sr = librosa.load(librosa.util.example_audio_file())\n    >>> S = np.abs(librosa.stft(y))\n    >>> W, H = librosa.decompose.decompose(S, n_components=32)\n    >>> W_sort = librosa.util.axis_sort(W)\n\n    Or sort by the lowest frequency bin\n\n    >>> W_sort = librosa.util.axis_sort(W, value=np.argmin)\n\n    Or sort the rows instead of the columns\n\n    >>> W_sort_rows = librosa.util.axis_sort(W, axis=0)\n\n    Get the sorting index also, and use it to permute the rows of H\n\n    >>> W_sort, idx = librosa.util.axis_sort(W, index=True)\n    >>> H_sort = H[idx, :]\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.figure()\n    >>> plt.subplot(2, 2, 1)\n    >>> librosa.display.specshow(librosa.amplitude_to_db(W, ref=np.max),\n    ...                          y_axis='log')\n    >>> plt.title('W')\n    >>> plt.subplot(2, 2, 2)\n    >>> librosa.display.specshow(H, x_axis='time')\n    >>> plt.title('H')\n    >>> plt.subplot(2, 2, 3)\n    >>> librosa.display.specshow(librosa.amplitude_to_db(W_sort,\n    ...                                                  ref=np.max),\n    ...                          y_axis='log')\n    >>> plt.title('W sorted')\n    >>> plt.subplot(2, 2, 4)\n    >>> librosa.display.specshow(H_sort, x_axis='time')\n    >>> plt.title('H sorted')\n    >>> plt.tight_layout()\n\n\n    Parameters\n    ----------\n    S : np.ndarray [shape=(d, n)]\n        Array to be sorted\n\n    axis : int [scalar]\n        The axis along which to compute the sorting values\n\n        - `axis=0` to sort rows by peak column index\n        - `axis=1` to sort columns by peak row index\n\n    index : boolean [scalar]\n        If true, returns the index array as well as the permuted data.\n\n    value : function\n        function to return the index corresponding to the sort order.\n        Default: `np.argmax`.\n\n    Returns\n    -------\n    S_sort : np.ndarray [shape=(d, n)]\n        `S` with the columns or rows permuted in sorting order\n\n    idx : np.ndarray (optional) [shape=(d,) or (n,)]\n        If `index == True`, the sorting index used to permute `S`.\n        Length of `idx` corresponds to the selected `axis`.\n\n    Raises\n    ------\n    ParameterError\n        If `S` does not have exactly 2 dimensions (`S.ndim != 2`)\n    '''\n\n    if value is None:\n        value = np.argmax\n\n    if S.ndim != 2:\n        raise ParameterError('axis_sort is only defined for 2D arrays')\n\n    bin_idx = value(S, axis=np.mod(1-axis, S.ndim))\n    idx = np.argsort(bin_idx)\n\n    sort_slice = [slice(None)] * S.ndim\n    sort_slice[axis] = idx\n\n    if index:\n        return S[tuple(sort_slice)], idx\n    else:\n        return S[tuple(sort_slice)]","language":"python"}
{"code":"def valid_int(x, cast=None):\n    '''Ensure that an input value is integer-typed.\n    This is primarily useful for ensuring integrable-valued\n    array indices.\n\n    Parameters\n    ----------\n    x : number\n        A scalar value to be cast to int\n\n    cast : function [optional]\n        A function to modify `x` before casting.\n        Default: `np.floor`\n\n    Returns\n    -------\n    x_int : int\n        `x_int = int(cast(x))`\n\n    Raises\n    ------\n    ParameterError\n        If `cast` is provided and is not callable.\n    '''\n\n    if cast is None:\n        cast = np.floor\n\n    if not six.callable(cast):\n        raise ParameterError('cast parameter must be callable')\n\n    return int(cast(x))","language":"python"}
{"code":"public function getHumanSize( $decimals=2 )\n    {\n        $sz = array('B', 'KB', 'MB', 'GB', 'TB', 'PB');\n        $factor = floor((strlen($this->getSize()) - 1) \/ 3);\n        if ($factor >= count($sz)) $factor = count($sz)-1;\n        return sprintf(\"%.{$decimals}f\", $this->getSize() \/ pow(1024, $factor)) . $sz[$factor];\n    }","language":"php"}
{"code":"public GraphQLResult processGraphQLMultipart(String graphQLRequest, File file) throws ApiException {\n    Object localVarPostBody = null;\n    \n    \/\/ verify the required parameter 'graphQLRequest' is set\n    if (graphQLRequest == null) {\n      throw new ApiException(400, \"Missing the required parameter 'graphQLRequest' when calling processGraphQLMultipart\");\n    }\n    \n    \/\/ verify the required parameter 'file' is set\n    if (file == null) {\n      throw new ApiException(400, \"Missing the required parameter 'file' when calling processGraphQLMultipart\");\n    }\n    \n    \/\/ create path and map variables\n    String localVarPath = \"\/graphql\/upload\".replaceAll(\"\\\\{format\\\\}\",\"json\");\n\n    \/\/ query params\n    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n    Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n\n\n    \n    if (graphQLRequest != null)\n      localVarFormParams.put(\"graphQLRequest\", graphQLRequest);\nif (file != null)\n      localVarFormParams.put(\"file\", file);\n\n    final String[] localVarAccepts = {\n      \"application\/json\"\n    };\n    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n\n    final String[] localVarContentTypes = {\n      \"multipart\/form-data\"\n    };\n    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n\n    String[] localVarAuthNames = new String[] { \"token\" };\n\n    GenericType<GraphQLResult> localVarReturnType = new GenericType<GraphQLResult>() {};\n    return apiClient.invokeAPI(localVarPath, \"POST\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);\n      }","language":"java"}
{"code":"function synchronizeSelection(options, configuration, watcher) {\n      if (angular.isObject(options.chart) && angular.isObject(options.chart.data) && angular.isObject(options.chart.data.selection) && options.chart.data.selection.enabled === true) {\n\n        \/\/ add onselected listener\n        configuration.data.onselected = function (data, element) {\n\n          \/\/ check if listener is disabled currently\n          if (service.disableSelectionListener) {\n            return;\n          }\n\n          \/\/ update state\n          AngularChartWatcher.updateState(watcher, function () {\n            createSelectionsPath(options);\n            options.state.selected.push(data);\n          });\n\n          \/\/ call user defined callback\n          if (angular.isFunction(options.chart.data.onselected)) {\n            AngularChartWatcher.applyFunction(watcher, function () {\n              options.chart.data.onselected(data, element);\n            });\n          }\n\n        };\n\n        \/\/ add onunselection listener\n        configuration.data.onunselected = function (data, element) {\n\n          \/\/ check if listener is disabled currently\n          if (service.disableSelectionListener) {\n            return;\n          }\n\n          \/\/ update state\n          AngularChartWatcher.updateState(watcher, function () {\n            createSelectionsPath(options);\n            options.state.selected = options.state.selected.filter(function (selected) {\n              return selected.id !== data.id || selected.index !== data.index;\n            });\n          });\n\n          \/\/ call user defined callback\n          if (angular.isFunction(options.chart.data.onunselected)) {\n            AngularChartWatcher.applyFunction(watcher, function () {\n              options.chart.data.onunselected(data, element);\n            });\n          }\n\n        };\n\n      }\n    }","language":"javascript"}
{"code":"func ParseToken(header string) (string, error) {\n\ts := strings.Split(header, \" \")\n\tvar value string\n\tif len(s) < 3 {\n\t\tvalue = s[len(s)-1]\n\t}\n\tif value != \"\" {\n\t\treturn value, nil\n\t}\n\treturn value, ErrInvalidToken\n}","language":"go"}
{"code":"public boolean encodeForLZMA2() {\n        \/\/ LZMA2 uses RangeEncoderToBuffer so IOExceptions aren't possible.\n        try {\n            if (!lz.isStarted() && !encodeInit())\n                return false;\n\n            while (uncompressedSize <= LZMA2_UNCOMPRESSED_LIMIT\n                    && rc.getPendingSize() <= LZMA2_COMPRESSED_LIMIT)\n                if (!encodeSymbol())\n                    return false;\n        } catch (IOException e) {\n            throw new Error();\n        }\n\n        return true;\n    }","language":"java"}
{"code":"func LookupIP(ctx context.Context, host string) (addrs []net.IP, err error) {\n\tpackedAddrs, _, err := resolve(ctx, ipFamilies, host)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"socket: failed resolving %q: %v\", host, err)\n\t}\n\taddrs = make([]net.IP, len(packedAddrs))\n\tfor i, pa := range packedAddrs {\n\t\taddrs[i] = net.IP(pa)\n\t}\n\treturn addrs, nil\n}","language":"go"}
{"code":"func VerifyFormKV(key string, values ...string) http.HandlerFunc {\n\treturn VerifyForm(url.Values{key: values})\n}","language":"go"}
{"code":"def printCursor(self, fieldnames=None, datemap=None, time_format=None):\n        '''\n        Output a cursor to a filename or stdout if filename is \"-\".\n        fmt defines whether we output CSV or JSON.\n        '''\n\n        if self._format == 'csv':\n            count = self.printCSVCursor(fieldnames, datemap, time_format)\n        else:\n            count = self.printJSONCursor( fieldnames, datemap, time_format)\n\n        return count","language":"python"}
{"code":"function isBetween(p, left, right) {\n    if (p >= left && p <= right)\n        return true;\n\n    return false;\n}","language":"javascript"}
{"code":"def list_vm_images(self, location=None, publisher=None, category=None):\n        '''\n        Retrieves a list of the VM Images from the image repository that is\n        associated with the specified subscription.\n        '''\n        path = self._get_vm_image_path()\n        query = ''\n        if location:\n            query += '&location=' + location\n        if publisher:\n            query += '&publisher=' + publisher\n        if category:\n            query += '&category=' + category\n        if query:\n            path = path + '?' + query.lstrip('&')\n        return self._perform_get(path, VMImages)","language":"python"}
{"code":"public function date(string $version, string $format = 'F jS, Y'): string\n    {\n        if (!$format) {\n            return ''; \/\/ Not possible.\n        } elseif (!($time = $this->time($version))) {\n            return ''; \/\/ Not possible.\n        }\n        return date($format, $time);\n    }","language":"php"}
{"code":"protected <E, ID> void setEntityId(final DbEntityDescriptor<E> ded, final E entity, final ID newIdValue) {\n\t\tded.setIdValue(entity, newIdValue);\n\t}","language":"java"}
{"code":"protected String extractRememberMeCookie(HttpServletRequest request) {\n\t\tCookie[] cookies = request.getCookies();\n\n\t\tif ((cookies == null) || (cookies.length == 0)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (Cookie cookie : cookies) {\n\t\t\tif (cookieName.equals(cookie.getName())) {\n\t\t\t\treturn cookie.getValue();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","language":"java"}
{"code":"def add_abstractor_user_method\n      current_user_helper = options[\"current-user-helper\"].presence ||\n                            ask(\"What is the current_user helper called in your app? [current_user]\").presence ||\n                            'current_user if defined?(current_user)'\n      puts \"Defining abstractor_user method inside ApplicationController...\"\n\n      abstractor_user_method = %Q{\n  def abstractor_user\n    #{current_user_helper}\n  end\n  helper_method :abstractor_user\n}\n      inject_into_file(\"#{Rails.root}\/app\/controllers\/application_controller.rb\",\n                       abstractor_user_method,\n                       :after => \"ActionController::Base\\n\")\n    end","language":"ruby"}
{"code":"def save_with_version(*args)\n      ::PaperTrail.request(enabled: false) do\n        @record.save(*args)\n      end\n      record_update(force: true, in_after_callback: false, is_touch: false)\n    end","language":"ruby"}
{"code":"@XmlElementDecl(namespace = \"http:\/\/www.immoxml.de\", name = \"kaution\")\n    @XmlJavaTypeAdapter(Adapter7 .class)\n    public JAXBElement<BigDecimal> createKaution(BigDecimal value) {\n        return new JAXBElement<BigDecimal>(_Kaution_QNAME, BigDecimal.class, null, value);\n    }","language":"java"}
{"code":"def store_redis_keys\n      args = to_arg\n      #store main key\n      redis_old_keys[:key] = self.class.generate_key(args) #store main key\n\n      #store alias keys\n      redis_old_keys[:aliases] = []\n      redis_alias_config.each do |alias_name, fields|\n        redis_old_keys[:aliases] << redis_alias_key(alias_name) if valid_alias_key? alias_name\n      end\n    end","language":"ruby"}
{"code":"def session_new(self, **kwargs):\n        \"\"\"\n        Generate a session id for user based authentication.\n\n        A session id is required in order to use any of the write methods.\n\n        Args:\n            request_token: The token you generated for the user to approve.\n                           The token needs to be approved before being\n                           used here.\n\n        Returns:\n            A dict respresentation of the JSON returned from the API.\n        \"\"\"\n        path = self._get_path('session_new')\n\n        response = self._GET(path, kwargs)\n        self._set_attrs_to_values(response)\n        return response","language":"python"}
{"code":"public static <T> boolean postCompleteRequest(long n,\n                                                  Subscriber<? super T> actual,\n                                                  Queue<T> queue,\n                                                  AtomicLong state,\n                                                  BooleanSupplier isCancelled) {\n        for (; ; ) {\n            long r = state.get();\n\n            \/\/ extract the current request amount\n            long r0 = r & REQUESTED_MASK;\n\n            \/\/ preserve COMPLETED_MASK and calculate new requested amount\n            long u = (r & COMPLETED_MASK) | BackpressureHelper.addCap(r0, n);\n\n            if (state.compareAndSet(r, u)) {\n                \/\/ (complete, 0) -> (complete, n) transition then replay\n                if (r == COMPLETED_MASK) {\n\n                    postCompleteDrain(n | COMPLETED_MASK, actual, queue, state, isCancelled);\n\n                    return true;\n                }\n                \/\/ (active, r) -> (active, r + n) transition then continue with requesting from upstream\n                return false;\n            }\n        }\n\n    }","language":"java"}
{"code":"private function versionNewerThan($major, $minor = 0, $patch = 0)\n    {\n        $versionInfo = $this->version();\n\n        $versionParts = explode('.', $versionInfo['version']);\n\n        return $major > $versionParts[0]\n            || $major == $versionParts[0] && $minor > $versionParts[1]\n            || $major == $versionParts[0] && $minor == $versionParts[1] && $patch >= $versionParts[2];\n    }","language":"php"}
{"code":"func (l *InclusiveRanges) rangeAt(idx int) *InclusiveRange {\n\tif idx < 0 || idx >= l.numRanges() {\n\t\treturn nil\n\t}\n\treturn l.blocks[idx]\n}","language":"go"}
{"code":"def get_check():\n    \"\"\"Get bibdocs to check.\"\"\"\n    try:\n        from invenio.dbquery import run_sql\n    except ImportError:\n        from invenio.legacy.dbquery import run_sql\n\n    return (\n        run_sql('select count(id) from bibdoc', run_on_slave=True)[0][0],\n        [id[0] for id in run_sql('select id from bibdoc', run_on_slave=True)],\n    )","language":"python"}
{"code":"public JsonPathConfig gsonObjectMapperFactory(GsonObjectMapperFactory gsonObjectMapperFactory) {\n        return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory,\n                jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, \n                    johnzonObjectMapperFactory, defaultDeserializer, charset);\n    }","language":"java"}
{"code":"def _indent(self, text, depth=1, *, skip_first_line=False, suffix=\"\"):\n    \"\"\"Indent text by depth * self.indent.\n\n    Text can be either a string, or a list of strings. If it is a string, it will be split on\n    newline to a list of strings.\n\n    if skip_first_line is true, the first line will not be indented like the others.\n    \"\"\"\n    as_list = isinstance(text, list)\n\n    if as_list:\n      lines = text\n    else:\n      lines = text.split(\"\\n\")\n    new_lines = []\n\n    if isinstance(depth, int):\n      spacing = self.indent * depth\n    else:\n      spacing = depth\n\n    for i, line in enumerate(lines):\n      if skip_first_line and i == 0:\n        new_lines.append(\"{0}{1}\".format(line, suffix))\n      else:\n        new_lines.append(\"{0}{1}{2}\".format(spacing, line, suffix))\n\n    if as_list:\n      return new_lines\n    else:\n      return \"\\n\".join(new_lines)","language":"python"}
{"code":"public static void applyWhere(final INDArray to, final Condition condition,\n                                  final Function<Number, Number> function) {\n        \/\/ keep original java implementation for dynamic\n\n        Shape.iterate(to, new CoordinateFunction() {\n            @Override\n            public void process(long[]... coord) {\n                if (condition.apply(to.getDouble(coord[0])))\n                    to.putScalar(coord[0], function.apply(to.getDouble(coord[0])).doubleValue());\n\n            }\n        });\n    }","language":"java"}
{"code":"def delete torrent_hashes\n      torrent_hashes = Array(torrent_hashes)\n      torrent_hashes = torrent_hashes.join('|')\n\n      options = {\n        body: \"hashes=#{torrent_hashes}\"\n      }\n\n      self.class.post('\/command\/delete', options)\n    end","language":"ruby"}
{"code":"public function networkTraffic() {\n    $networkTraffic = $this->command('network_traffic');\n    $requestTraffic = array();\n\n    if (count($networkTraffic) === 0) {\n      return null;\n    }\n\n    foreach ($networkTraffic as $traffic) {\n      $requestTraffic[] = new Request($traffic[\"request\"], $traffic[\"responseParts\"]);\n    }\n\n    return $requestTraffic;\n  }","language":"php"}
{"code":"function updateGraphData()\n   {\n      \/\/ Copy existing data \/ node parameters to new filtered data;\n      if (data)\n      {\n         var existingNodeSimMap = {};\n\n         \/\/ Collect existing simulation data.\n         data.nodes.forEach(function(node)\n         {\n            existingNodeSimMap[node.id] =\n            {\n               weight: node.weight,\n               x: node.x,\n               y: node.y,\n               px: node.px,\n               py: node.py,\n               fixed: node.fixed ? node.fixed : false\n            };\n         });\n\n         \/\/ Copy existing sim data to any package scope that contains the same node ID.\n         for (var mapKey in dataPackageMap)\n         {\n            var graphData = dataPackageMap[mapKey];\n\n            graphData.nodes.forEach(function(node)\n            {\n               if (existingNodeSimMap[node.id])\n               {\n                  for (var key in existingNodeSimMap[node.id]) { node[key] = existingNodeSimMap[node.id][key]; }\n               }\n            });\n         }\n      }\n\n      var allNodesFixed = true;\n\n      \/\/ Set new data\n      data =\n      {\n         directed: dataPackageMap[appOptions.currentScope].directed,\n         multigraph: dataPackageMap[appOptions.currentScope].multigraph,\n         graph: dataPackageMap[appOptions.currentScope].graph,\n         links: dataPackageMap[appOptions.currentScope].links.filter(function(link)\n         {\n            return link.minLevel <= appOptions.currentLevel;\n         }),\n         nodes: dataPackageMap[appOptions.currentScope].nodes.filter(function(node)\n         {\n            if (typeof node.fixed === 'undefined' || node.fixed === false) { allNodesFixed = false; }\n            return node.minLevel <= appOptions.currentLevel;\n         })\n      };\n\n      data.allNodesFixed = allNodesFixed;\n   }","language":"javascript"}
{"code":"function parse(str) {\n    var args = [].slice.call(arguments, 1);\n    var i = 0;\n\n    return str.replace(\/%s\/g, function() {\n        return args[i++];\n    });\n}","language":"javascript"}
{"code":"public String findMessage(String bundleName, final Locale locale, final String key) {\n\n\t\tString indexedKey = calcIndexKey(key);\n\n\t\t\/\/ hierarchy\n\t\tString name = bundleName;\n\t\twhile (true) {\n\t\t\tString msg = getMessage(name, locale, key, indexedKey);\n\t\t\tif (msg != null) {\n\t\t\t\treturn msg;\n\t\t\t}\n\n\t\t\tif (bundleName == null || bundleName.length() == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint ndx = bundleName.lastIndexOf('.');\n\t\t\tif (ndx == -1) {\n\t\t\t\tbundleName = null;\n\t\t\t\tname = fallbackBundlename;\n\t\t\t} else {\n\t\t\t\tbundleName = bundleName.substring(0, ndx);\n\t\t\t\tname = bundleName + '.' + fallbackBundlename;\n\t\t\t}\n\t\t}\n\n\t\t\/\/ default bundles\n\t\tfor (String bname : defaultBundles) {\n\t\t\tString msg = getMessage(bname, locale, key, indexedKey);\n\t\t\tif (msg != null) {\n\t\t\t\treturn msg;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","language":"java"}
{"code":"private void refreshCachedCellsInCurrentPage(final FacesContext facesContext, final String tblName) {\r\n\t\t\/\/ refresh current page calculation fields\r\n\t\tUIComponent s = facesContext.getViewRoot().findComponent(tblName);\r\n\t\tif (s == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tDataTable webDataTable = (DataTable) s;\r\n\t\tint first = webDataTable.getFirst();\r\n\t\tint rowsToRender = webDataTable.getRowsToRender();\r\n\t\tint rowCounts = webDataTable.getRowCount();\r\n\t\tint top = parent.getCurrent().getCurrentTopRow();\r\n\t\tint left = parent.getCurrent().getCurrentLeftColumn();\r\n\r\n\t\tfor (int i = first; i <= (first + rowsToRender); i++) {\r\n\t\t\tif (i < rowCounts) {\r\n\t\t\t\trefreshCachedCellsInRow(tblName, top, left, i);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}","language":"java"}
{"code":"function validateObjectProperties(propertyValidators, allowUnknownProperties, ignoreInternalProperties) {\n        var currentItemEntry = itemStack[itemStack.length - 1];\n        var objectValue = currentItemEntry.itemValue;\n        var oldObjectValue = currentItemEntry.oldItemValue;\n\n        var supportedProperties = [ ];\n        for (var propertyValidatorName in propertyValidators) {\n          var validator = propertyValidators[propertyValidatorName];\n          if (utils.isValueNullOrUndefined(validator) || utils.isValueNullOrUndefined(resolveItemConstraint(validator.type))) {\n            \/\/ Skip over non-validator fields\/properties\n            continue;\n          }\n\n          var propertyValue = objectValue[propertyValidatorName];\n\n          var oldPropertyValue;\n          if (!utils.isValueNullOrUndefined(oldObjectValue)) {\n            oldPropertyValue = oldObjectValue[propertyValidatorName];\n          }\n\n          supportedProperties.push(propertyValidatorName);\n\n          itemStack.push({\n            itemValue: propertyValue,\n            oldItemValue: oldPropertyValue,\n            itemName: propertyValidatorName\n          });\n\n          validateItemValue(validator);\n\n          itemStack.pop();\n        }\n\n        \/\/ Verify there are no unsupported properties in the object\n        if (!allowUnknownProperties) {\n          for (var propertyName in objectValue) {\n            if (ignoreInternalProperties && propertyName.indexOf('_') === 0) {\n              \/\/ These properties are special cases that should always be allowed - generally only applied at the root\n              \/\/ level of the document\n              continue;\n            }\n\n            if (supportedProperties.indexOf(propertyName) < 0) {\n              var objectPath = buildItemPath(itemStack);\n              var fullPropertyPath = objectPath ? objectPath + '.' + propertyName : propertyName;\n              validationErrors.push('property \"' + fullPropertyPath + '\" is not supported');\n            }\n          }\n        }\n      }","language":"javascript"}
{"code":"def loadByteArray(self, context, page, resultLen, resultData, returnError):\n        \"\"\"please override\"\"\"\n        returnError.contents.value = self.IllegalStateError\n        raise NotImplementedError(\"You must override this method.\")","language":"python"}
{"code":"def pkg_info(pkg_path):\n    \"\"\"Return dict describing the context of this package\n\n    Parameters\n    ----------\n    pkg_path : str\n       path containing __init__.py for package\n\n    Returns\n    -------\n    context : dict\n       with named parameters of interest\n    \"\"\"\n    src, hsh = pkg_commit_hash(pkg_path)\n    return dict(\n        ipython_version=release.version,\n        ipython_path=pkg_path,\n        commit_source=src,\n        commit_hash=hsh,\n        sys_version=sys.version,\n        sys_executable=sys.executable,\n        sys_platform=sys.platform,\n        platform=platform.platform(),\n        os_name=os.name,\n        default_encoding=encoding.DEFAULT_ENCODING,\n        )","language":"python"}
{"code":"def generate_dataframe(self, symbols=None, date_index=None, price_type=\"mid\"):\n        \"\"\"\n        Generate a dataframe consisting of the currency prices (specified by symbols)\n        from the start to end date\n        \"\"\"\n\n        # Set defaults if necessary\n        if symbols is None:\n            symbols = list(Currency.objects.all().values_list('symbol', flat=True))\n        try:\n            start_date = date_index[0]\n            end_date = date_index[-1]\n        except:\n            start_date = DATEFRAME_START_DATE\n            end_date = date.today()\n        date_index = date_range(start_date, end_date)\n\n        currency_price_data = CurrencyPrice.objects.filter(currency__symbol__in=symbols,\n                                                           date__gte=date_index[0],\n                                                           date__lte=date_index[-1]).values_list('date', 'currency__symbol', 'ask_price', 'bid_price')\n        try:\n            forex_data_array = np.core.records.fromrecords(currency_price_data, names=['date', 'symbol', 'ask_price', 'bid_price'])\n        except IndexError:\n            forex_data_array = np.core.records.fromrecords([(date(1900, 1, 1), \"\", 0, 0)], names=['date', 'symbol', 'ask_price', 'bid_price'])\n        df = DataFrame.from_records(forex_data_array, index='date')\n        df['date'] = df.index\n\n        if price_type == \"mid\":\n            df['price'] = (df['ask_price'] + df['bid_price']) \/ 2\n        elif price_type == \"ask\":\n            df['price'] = df['ask_price']\n        elif price_type == \"bid\":\n            df['price'] = df['bid_price']\n        else:\n            raise ValueError(\"Incorrect price_type (%s) must be on of 'ask', 'bid' or 'mid'\" % str(price_type))\n\n        df = df.pivot(index='date', columns='symbol', values='price')\n        df = df.reindex(date_index)\n        df = df.fillna(method=\"ffill\")\n        unlisted_symbols = list(set(symbols) - set(df.columns))\n        for unlisted_symbol in unlisted_symbols:\n            df[unlisted_symbol] = np.nan\n        df = df[symbols]\n\n        return df","language":"python"}
{"code":"def build_route(relation):\n    \"\"\"Extract information of one route.\"\"\"\n    if relation.tags.get('type') != 'route':\n        # Build route only for relations of type `route`\n        return\n\n    short_name = create_route_short_name(relation)\n    color = relation.tags.get('color')\n    return\\\n        Route(relation.id,\n              short_name,\n              create_route_long_name(relation, short_name),\n              map_osm_route_type_to_gtfs(relation.tags.get('route')),\n              'https:\/\/www.openstreetmap.org\/relation\/{}'.format(relation.id),\n              color.strip('#') if color else '',\n              get_agency_id(relation))","language":"python"}
{"code":"def plot_spectrum_min_max(self, t=0, f_start=None, f_stop=None, logged=False, if_id=0, c=None, **kwargs):\n        \"\"\" Plot frequency spectrum of a given file\n\n        Args:\n            logged (bool): Plot in linear (False) or dB units (True)\n            if_id (int): IF identification (if multiple IF signals in file)\n            c: color for line\n            kwargs: keyword args to be passed to matplotlib plot()\n        \"\"\"\n        ax = plt.gca()\n\n        plot_f, plot_data = self.grab_data(f_start, f_stop, if_id)\n\n        #Using accending frequency for all plots.\n        if self.header[b'foff'] < 0:\n            plot_data = plot_data[..., ::-1] # Reverse data\n            plot_f = plot_f[::-1]\n\n        fig_max = plot_data[0].max()\n        fig_min = plot_data[0].min()\n\n        print(\"averaging along time axis...\")\n\n        #Since the data has been squeezed, the axis for time goes away if only one bin, causing a bug with axis=1\n        if len(plot_data.shape) > 1:\n            plot_max = plot_data.max(axis=0)\n            plot_min = plot_data.min(axis=0)\n            plot_data = plot_data.mean(axis=0)\n        else:\n            plot_max = plot_data.max()\n            plot_min = plot_data.min()\n            plot_data = plot_data.mean()\n\n        # Rebin to max number of points\n        dec_fac_x = 1\n        MAX_PLT_POINTS = 8*64  # Low resoluition to see the difference.\n        if plot_data.shape[0] > MAX_PLT_POINTS:\n            dec_fac_x = int(plot_data.shape[0] \/ MAX_PLT_POINTS)\n\n        plot_data = rebin(plot_data, dec_fac_x, 1)\n        plot_min = rebin(plot_min, dec_fac_x, 1)\n        plot_max = rebin(plot_max, dec_fac_x, 1)\n        plot_f    = rebin(plot_f, dec_fac_x, 1)\n\n        if logged:\n            plt.plot(plot_f, db(plot_data), \"#333333\", label='mean', **kwargs)\n            plt.plot(plot_f, db(plot_max),  \"#e74c3c\", label='max', **kwargs)\n            plt.plot(plot_f, db(plot_min),  '#3b5b92', label='min', **kwargs)\n            plt.ylabel(\"Power [dB]\")\n        else:\n            plt.plot(plot_f, plot_data,  \"#333333\", label='mean', **kwargs)\n            plt.plot(plot_f, plot_max,   \"#e74c3c\", label='max', **kwargs)\n            plt.plot(plot_f, plot_min,   '#3b5b92', label='min', **kwargs)\n            plt.ylabel(\"Power [counts]\")\n        plt.xlabel(\"Frequency [MHz]\")\n        plt.legend()\n\n        try:\n            plt.title(self.header[b'source_name'])\n        except KeyError:\n            plt.title(self.filename)\n\n        plt.xlim(plot_f[0], plot_f[-1])\n        if logged:\n            plt.ylim(db(fig_min),db(fig_max))","language":"python"}
{"code":"@SuppressWarnings(\"unchecked\")\n\tprivate <C extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity>> C getOrApply(\n\t\t\tC configurer) throws Exception {\n\t\tC existingConfig = (C) getConfigurer(configurer.getClass());\n\t\tif (existingConfig != null) {\n\t\t\treturn existingConfig;\n\t\t}\n\t\treturn apply(configurer);\n\t}","language":"java"}
{"code":"private function backup(array $strings, $path, $filename)\n    {\n        $stringsFile = $path . '\/' . $filename;\n        $jsonStrings = json_encode($strings, JSON_PRETTY_PRINT);\n\n        $this->createDirectory($path);\n\n        file_put_contents($stringsFile, $jsonStrings);\n    }","language":"php"}
{"code":"public function getParent()\n    {\n        \/\/ Load the \"current\" level from the tree\n        $currentLevel = CActiveRecord::model($this->treeClass)->findByAttributes(\n            array('descendantId' => $this->owner->{$this->idAttribute}, 'depth' => 1)\n        );\n\n        if ($currentLevel->ancestorId > 0) {\n            return CActiveRecord::model(get_class($this->owner))->findByPk($currentLevel->ancestorId);\n        } else {\n            return null;\n        }\n    }","language":"php"}
{"code":"public function verify($response, $clientIp = null)\n    {\n        if (empty($response)) return false;\n\n        $response = $this->sendVerifyRequest([\n            'secret'   => $this->secret,\n            'response' => $response,\n            'remoteip' => $clientIp\n        ]);\n\n        return isset($response['success']) && $response['success'] === true;\n    }","language":"php"}
{"code":"function calculateFieldColor(selectedColor, nonSelectedColor, focusedColor, index, out)\n{\n    if(selected.indexOf(index) !== -1 && focused == index)\n    return chalk.bold.rgb(selectedColor.r, selectedColor.g, selectedColor.b)(out);\n    if(selected.indexOf(index) !== -1) \/\/ this goes before focused so selected color gets priority over focused values\n        return chalk.rgb(selectedColor.r, selectedColor.g, selectedColor.b)(out);\n    if(focused == index)\n        return chalk.bold.rgb(focusedColor.r, focusedColor.g, focusedColor.b)(out);\n    return chalk.rgb(nonSelectedColor.r, nonSelectedColor.g, nonSelectedColor.b)(out);\n}","language":"javascript"}
{"code":"def response_body(self):\n        '''\n        Gets response body as a SAFEARRAY and converts the SAFEARRAY to str.\n        '''\n        var_respbody = VARIANT()\n        _WinHttpRequest._ResponseBody(self, byref(var_respbody))\n        if var_respbody.is_safearray_of_bytes():\n            respbody = var_respbody.str_from_safearray()\n            return respbody\n        else:\n            return ''","language":"python"}
{"code":"function off(that, listenerList, root, eventType, selector, handler) {\n\t\tvar listener, nextListener, firstListener, specificList, singleEventType;\n\n\t\tif (!eventType) {\n\t\t\tfor (singleEventType in listenerList) {\n\t\t\t\tif (listenerList.hasOwnProperty(singleEventType)) {\n\t\t\t\t\toff.call(that, that, listenerList, root, singleEventType, selector, handler);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tspecificList = listenerList[eventType];\n\n\t\tif (!specificList) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Support a separated list of event types\n\t\tif (eventType.indexOf(SEPARATOR) !== -1) {\n\t\t\teventType.split(SEPARATOR).forEach(function(eventType) {\n\t\t\t\toff.call(that, that, listenerList, root, eventType, selector, handler);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Remove only parameter matches if specified\n\t\tlistener = firstListener = specificList.first;\n\t\tdo {\n\t\t\tif ((!selector || selector === listener.s) && (!handler || handler === listener.h)) {\n\n\t\t\t\t\/\/ listener.next will be undefined after listener is removed, so save a reference here\n\t\t\t\tnextListener = listener.next;\n\t\t\t\tspecificList.remove(listener);\n\t\t\t\tlistener = nextListener;\n\t\t\t} else {\n\t\t\t\tlistener = listener.next;\n\t\t\t}\n\t\t} while (listener && listener !== firstListener);\n\n\t\t\/\/ All listeners removed\n\t\tif (!specificList.length) {\n\t\t\tdelete listenerList[eventType];\n\n\t\t\t\/\/ Remove the main handler\n\t\t\troot.removeEventListener(eventType, that.handle, false);\n\t\t}\n\t}","language":"javascript"}
{"code":"def get_listing opts = {}\n      # Build the basic url\n      url = \"%s\/%s.json\" % [('\/r\/' + opts[:subreddit] if opts[:subreddit] ), (opts[:page] if opts[:page])]\n      # Delete subreddit and page from the hash, they dont belong in the query\n      [:subreddit, :page].each {|k| opts.delete k}\n      query = opts\n      # Make the request\n      get(url, query: query)\n    end","language":"ruby"}
{"code":"func (w *WriteBuffer) WriteBytes(in []byte) {\n\tif b := w.reserve(len(in)); b != nil {\n\t\tcopy(b, in)\n\t}\n}","language":"go"}
{"code":"public function setEntries($entries)\n    {\n        \/\/ by Warringer\\Types\\Reference\n        $func = function ($value) { return new Reference($value); };\n\n        foreach ($entries as $key => $value) {\n            $this->entries[$key] = $func($value);\n        }\n    }","language":"php"}
{"code":"func (v *ExecutionContextDescription) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoRuntime27(&r, v)\n\treturn r.Error()\n}","language":"go"}
{"code":"function iterator(traverse, obj, options) {\n  return function reduce(stack, entity) {\n    var base = obj ? obj[entity] : entity\n      , name = options.name || entity;\n\n    \/\/\n    \/\/ Fabricated objects should provide each constructor with the name\n    \/\/ of its property on the original object.\n    \/\/\n    if (obj) options.name = entity;\n\n    \/\/\n    \/\/ Run the functions, traverse will handle init.\n    \/\/\n    if (js(base)) {\n      return stack.concat(init(\n        base,\n        'string' === is(name) ? name : '',\n        options\n      ));\n    }\n\n    \/\/\n    \/\/ When we've been supplied with an array as base assume we want to keep it\n    \/\/ as array and do not want it to be merged.\n    \/\/\n    if (Array.isArray(base)) {\n      options.name = name; \/\/ Force the name of the entry for all items in array.\n      stack.push(traverse(base, options));\n\n      return stack;\n    }\n\n    return stack.concat(traverse(base, options));\n  };\n}","language":"javascript"}
{"code":"public double[][] projToLatLon(double[][] from, double[][] to) {\r\n    int cnt = from[0].length;\r\n    double[] fromXA = from[INDEX_X];\r\n    double[] fromYA = from[INDEX_Y];\r\n    double[] toLatA = to[INDEX_LAT];\r\n    double[] toLonA = to[INDEX_LON];\r\n\r\n    double toLat, toLon;\r\n    for (int i = 0; i < cnt; i++) {\r\n      double fromX = fromXA[i];\r\n      double fromY = fromYA[i];\r\n\r\n      double x = (fromX - falseEasting) \/ scale;\r\n      double d = (fromY - falseNorthing) \/ scale + lat0;\r\n      toLon = Math.toDegrees(lon0 + Math.atan2(Math.sinh(x), Math.cos(d)));\r\n      toLat = Math.toDegrees(Math.asin(Math.sin(d) \/ Math.cosh(x)));\r\n\r\n      toLatA[i] = (double) toLat;\r\n      toLonA[i] = (double) toLon;\r\n    }\r\n    return to;\r\n  }","language":"java"}
{"code":"func clean(p string) string {\n\tif !strings.HasPrefix(p, \"\/\") {\n\t\tp = \"\/\" + p\n\t}\n\treturn internalDefault(path.Clean(p))\n}","language":"go"}
{"code":"def poly_vec2s\n      points.map do |point|\n        x,y = point.split(\",\").map {|p| p.to_i }\n        CP::Vec2.new(x,y)\n      end.reverse\n    end","language":"ruby"}
{"code":"def type_cast(values)\n      # Force into an array and run type_cast on each element.\n      [values].flatten.compact.map { |value| __getobj__.type_cast(value) }\n    end","language":"ruby"}
{"code":"public RhinoScriptBuilder evaluateChain(final InputStream stream, final String sourceName)\r\n    throws IOException {\r\n    notNull(stream);\r\n    try {\r\n      getContext().evaluateReader(scope, new InputStreamReader(stream), sourceName, 1, null);\r\n      return this;\r\n    } catch(final RhinoException e) {\r\n      if (e instanceof RhinoException) {\r\n        LOG.error(\"RhinoException: {}\", RhinoUtils.createExceptionMessage(e));\r\n      }\r\n      throw e;\r\n    } catch (final RuntimeException e) {\r\n      LOG.error(\"Exception caught\", e);\r\n      throw e;\r\n    } finally {\r\n      stream.close();\r\n    }\r\n  }","language":"java"}
{"code":"def call_misc (function, list_pointer)\n\n      list_pointer = list_pointer.pointer \\\n        if list_pointer.is_a?(Rufus::Tokyo::List)\n\n      begin\n        l = do_call_misc(function, list_pointer)\n        raise \"function '#{function}' failed\" unless l\n        Rufus::Tokyo::List.new(l).release\n      ensure\n        Rufus::Tokyo::List.free(list_pointer)\n      end\n    end","language":"ruby"}
{"code":"def update_status!(force: false)\n      # this will make it easier to differentiate from current_status\n      cached_status = status\n\n      # by default only update if its an active job\n      if  (cached_status.not_submitted? && pbsid) || cached_status.active? || force\n        # get the current status from the system\n        current_status = job.status\n\n        # if job is done, lets re-validate\n        if current_status.completed?\n          current_status = results_valid? ? OSC::Machete::Status.passed : OSC::Machete::Status.failed\n        end\n\n        if (current_status != cached_status) || force\n          self.status = current_status\n          self.save\n        end\n      end\n\n    rescue PBS::Error => e\n      # we log the error but we just don't update the status\n      Rails.logger.error(\"During update_status! call on job with pbsid #{pbsid} and id #{id}\" \\\n                          \" a PBS::Error was thrown: #{e.message}\")\n    end","language":"ruby"}
{"code":"func (capture *Capture) QueryFrame() *IplImage {\n\trv := C.cvQueryFrame((*C.CvCapture)(capture))\n\treturn (*IplImage)(rv)\n}","language":"go"}
{"code":"def gzipped_tarball\n      gz = StringIO.new(\"\")\n      z = Zlib::GzipWriter.new(gz, compression_level)\n      z.write(tarball.string)\n      z.close\n\n      # z was closed to write the gzip footer, so\n      # now we need a new StringIO\n      StringIO.new(gz.string)\n    end","language":"ruby"}
{"code":"func AcquireApplicationLockWait(appName string, owner string, reason string, timeout time.Duration) (bool, error) {\n\ttimeoutChan := time.After(timeout)\n\tfor {\n\t\tappLock := appTypes.AppLock{\n\t\t\tLocked:      true,\n\t\t\tReason:      reason,\n\t\t\tOwner:       owner,\n\t\t\tAcquireDate: time.Now().In(time.UTC),\n\t\t}\n\t\tconn, err := db.Conn()\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\terr = conn.Apps().Update(bson.M{\"name\": appName, \"lock.locked\": bson.M{\"$in\": []interface{}{false, nil}}}, bson.M{\"$set\": bson.M{\"lock\": appLock}})\n\t\tconn.Close()\n\t\tif err == nil {\n\t\t\treturn true, nil\n\t\t}\n\t\tif err != mgo.ErrNotFound {\n\t\t\treturn false, err\n\t\t}\n\t\tselect {\n\t\tcase <-timeoutChan:\n\t\t\treturn false, nil\n\t\tcase <-time.After(300 * time.Millisecond):\n\t\t}\n\t}\n}","language":"go"}
{"code":"public static void main(String[] args) {\n        \/\/ Defaults\n        int port = 8080;\n\n        String host = null; \/\/ bind to all interfaces by default\n        List<File> rootDirs = new ArrayList<File>();\n        boolean quiet = false;\n        String cors = null;\n        Map<String, String> options = new HashMap<String, String>();\n\n        \/\/ Parse command-line, with short and long versions of the options.\n        for (int i = 0; i < args.length; ++i) {\n            if (\"-h\".equalsIgnoreCase(args[i]) || \"--host\".equalsIgnoreCase(args[i])) {\n                host = args[i + 1];\n            } else if (\"-p\".equalsIgnoreCase(args[i]) || \"--port\".equalsIgnoreCase(args[i])) {\n                port = Integer.parseInt(args[i + 1]);\n            } else if (\"-q\".equalsIgnoreCase(args[i]) || \"--quiet\".equalsIgnoreCase(args[i])) {\n                quiet = true;\n            } else if (\"-d\".equalsIgnoreCase(args[i]) || \"--dir\".equalsIgnoreCase(args[i])) {\n                rootDirs.add(new File(args[i + 1]).getAbsoluteFile());\n            } else if (args[i].startsWith(\"--cors\")) {\n                cors = \"*\";\n                int equalIdx = args[i].indexOf('=');\n                if (equalIdx > 0) {\n                    cors = args[i].substring(equalIdx + 1);\n                }\n            } else if (\"--licence\".equalsIgnoreCase(args[i])) {\n                System.out.println(SimpleWebServer.LICENCE + \"\\n\");\n            } else if (args[i].startsWith(\"-X:\")) {\n                int dot = args[i].indexOf('=');\n                if (dot > 0) {\n                    String name = args[i].substring(0, dot);\n                    String value = args[i].substring(dot + 1, args[i].length());\n                    options.put(name, value);\n                }\n            }\n        }\n\n        if (rootDirs.isEmpty()) {\n            rootDirs.add(new File(\".\").getAbsoluteFile());\n        }\n        options.put(\"host\", host);\n        options.put(\"port\", \"\" + port);\n        options.put(\"quiet\", String.valueOf(quiet));\n        StringBuilder sb = new StringBuilder();\n        for (File dir : rootDirs) {\n            if (sb.length() > 0) {\n                sb.append(\":\");\n            }\n            try {\n                sb.append(dir.getCanonicalPath());\n            } catch (IOException ignored) {\n            }\n        }\n        options.put(\"home\", sb.toString());\n        ServiceLoader<WebServerPluginInfo> serviceLoader = ServiceLoader.load(WebServerPluginInfo.class);\n        for (WebServerPluginInfo info : serviceLoader) {\n            String[] mimeTypes = info.getMimeTypes();\n            for (String mime : mimeTypes) {\n                String[] indexFiles = info.getIndexFilesForMimeType(mime);\n                if (!quiet) {\n                    System.out.print(\"# Found plugin for Mime type: \\\"\" + mime + \"\\\"\");\n                    if (indexFiles != null) {\n                        System.out.print(\" (serving index files: \");\n                        for (String indexFile : indexFiles) {\n                            System.out.print(indexFile + \" \");\n                        }\n                    }\n                    System.out.println(\").\");\n                }\n                registerPluginForMimeType(indexFiles, mime, info.getWebServerPlugin(mime), options);\n            }\n        }\n        ServerRunner.executeInstance(new SimpleWebServer(host, port, rootDirs, quiet, cors));\n    }","language":"java"}
{"code":"def get_file_splits(self, id, source, target, fsize, splitsize):\n    '''Get file splits for upload\/download\/copy operation.'''\n    pos = 0\n    part = 1 # S3 part id starts from 1\n    mpi = ThreadUtil.MultipartItem(id)\n    splits = []\n\n    while pos < fsize:\n      chunk = min(splitsize, fsize - pos)\n      assert(chunk > 0)\n      splits.append((source, target, mpi, pos, chunk, part))\n      part += 1\n      pos += chunk\n    mpi.total = len(splits)\n\n    return splits","language":"python"}
{"code":"protected double getDouble(dap4.core.util.Index idx)\n    {\n        assert data.getScheme() == Scheme.ATOMIC;\n        try {\n            Object value = data.read(idx);\n            value = Convert.convert(DapType.FLOAT64, this.basetype, value);\n            return (Double) java.lang.reflect.Array.get(value, 0);\n        } catch (IOException ioe) {\n            throw new IndexOutOfBoundsException(ioe.getMessage());\n        }\n    }","language":"java"}
{"code":"protected function _text(string $text, array $options = [])\n\t{\n\t\t$cmd = '';\n\n\t\t\/\/ Reverse the vertical offset\n\t\t\/\/ When the image is positioned at the bottom\n\t\t\/\/ we don't want the vertical offset to push it\n\t\t\/\/ further down. We want the reverse, so we'll\n\t\t\/\/ invert the offset. Note: The horizontal\n\t\t\/\/ offset flips itself automatically\n\t\tif ($options['vAlign'] === 'bottom')\n\t\t{\n\t\t\t$options['vOffset'] = $options['vOffset'] * -1;\n\t\t}\n\n\t\tif ($options['hAlign'] === 'right')\n\t\t{\n\t\t\t$options['hOffset'] = $options['hOffset'] * -1;\n\t\t}\n\n\t\t\/\/ Font\n\t\tif (! empty($options['fontPath']))\n\t\t{\n\t\t\t$cmd .= \" -font '{$options['fontPath']}'\";\n\t\t}\n\n\t\tif (isset($options['hAlign']) && isset($options['vAlign']))\n\t\t{\n\t\t\tswitch ($options['hAlign'])\n\t\t\t{\n\t\t\t\tcase 'left':\n\t\t\t\t\t$xAxis   = $options['hOffset'] + $options['padding'];\n\t\t\t\t\t$yAxis   = $options['vOffset'] + $options['padding'];\n\t\t\t\t\t$gravity = $options['vAlign'] === 'top' ? 'NorthWest' : 'West';\n\t\t\t\t\tif ($options['vAlign'] === 'bottom')\n\t\t\t\t\t{\n\t\t\t\t\t\t$gravity = 'SouthWest';\n\t\t\t\t\t\t$yAxis   = $options['vOffset'] - $options['padding'];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'center':\n\t\t\t\t\t$xAxis   = $options['hOffset'] + $options['padding'];\n\t\t\t\t\t$yAxis   = $options['vOffset'] + $options['padding'];\n\t\t\t\t\t$gravity = $options['vAlign'] === 'top' ? 'North' : 'Center';\n\t\t\t\t\tif ($options['vAlign'] === 'bottom')\n\t\t\t\t\t{\n\t\t\t\t\t\t$yAxis   = $options['vOffset'] - $options['padding'];\n\t\t\t\t\t\t$gravity = 'South';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'right':\n\t\t\t\t\t$xAxis   = $options['hOffset'] - $options['padding'];\n\t\t\t\t\t$yAxis   = $options['vOffset'] + $options['padding'];\n\t\t\t\t\t$gravity = $options['vAlign'] === 'top' ? 'NorthEast' : 'East';\n\t\t\t\t\tif ($options['vAlign'] === 'bottom')\n\t\t\t\t\t{\n\t\t\t\t\t\t$gravity = 'SouthEast';\n\t\t\t\t\t\t$yAxis   = $options['vOffset'] - $options['padding'];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$xAxis = $xAxis >= 0 ? '+' . $xAxis : $xAxis;\n\t\t\t$yAxis = $yAxis >= 0 ? '+' . $yAxis : $yAxis;\n\n\t\t\t$cmd .= \" -gravity {$gravity} -geometry {$xAxis}{$yAxis}\";\n\t\t}\n\n\t\t\/\/ Color\n\t\tif (isset($options['color']))\n\t\t{\n\t\t\tlist($r, $g, $b) = sscanf(\"#{$options['color']}\", '#%02x%02x%02x');\n\n\t\t\t$cmd .= \" -fill 'rgba({$r},{$g},{$b},{$options['opacity']})'\";\n\t\t}\n\n\t\t\/\/ Font Size - use points....\n\t\tif (isset($options['fontSize']))\n\t\t{\n\t\t\t$cmd .= \" -pointsize {$options['fontSize']}\";\n\t\t}\n\n\t\t\/\/ Text\n\t\t$cmd .= \" -annotate 0 '{$text}'\";\n\n\t\t$source      = ! empty($this->resource) ? $this->resource : $this->image->getPathname();\n\t\t$destination = $this->getResourcePath();\n\n\t\t$cmd = \" '{$source}' {$cmd} '{$destination}'\";\n\n\t\t$this->process($cmd);\n\t}","language":"php"}
{"code":"func (v *VM) RemoveSnapshot(snapshot *Snapshot, options RemoveSnapshotOption) error {\n\tvar jobHandle C.VixHandle = C.VIX_INVALID_HANDLE\n\tvar err C.VixError = C.VIX_OK\n\n\tjobHandle = C.VixVM_RemoveSnapshot(v.handle, \/\/vmHandle\n\t\tsnapshot.handle,                     \/\/snapshotHandle\n\t\tC.VixRemoveSnapshotOptions(options), \/\/options\n\t\tnil, \/\/callbackProc\n\t\tnil) \/\/clientData\n\n\tdefer C.Vix_ReleaseHandle(jobHandle)\n\n\terr = C.vix_job_wait(jobHandle)\n\tif C.VIX_OK != err {\n\t\treturn &Error{\n\t\t\tOperation: \"vm.RemoveSnapshot\",\n\t\t\tCode:      int(err & 0xFFFF),\n\t\t\tText:      C.GoString(C.Vix_GetErrorText(err, nil)),\n\t\t}\n\t}\n\n\treturn nil\n}","language":"go"}
{"code":"private J2eePreAuthenticatedProcessingFilter getFilter(\n\t\t\tAuthenticationManager authenticationManager) {\n\t\tif (j2eePreAuthenticatedProcessingFilter == null) {\n\t\t\tj2eePreAuthenticatedProcessingFilter = new J2eePreAuthenticatedProcessingFilter();\n\t\t\tj2eePreAuthenticatedProcessingFilter\n\t\t\t\t\t.setAuthenticationManager(authenticationManager);\n\t\t\tj2eePreAuthenticatedProcessingFilter\n\t\t\t\t\t.setAuthenticationDetailsSource(createWebAuthenticationDetailsSource());\n\t\t\tj2eePreAuthenticatedProcessingFilter = postProcess(j2eePreAuthenticatedProcessingFilter);\n\t\t}\n\n\t\treturn j2eePreAuthenticatedProcessingFilter;\n\t}","language":"java"}
{"code":"def get_predictions(genes):\n    \"\"\"Get sift predictions from genes.\"\"\"\n    data = {\n        'sift_predictions': [],\n        'polyphen_predictions': [],\n        'region_annotations': [],\n        'functional_annotations': []\n    }\n    for gene_obj in genes:\n        for pred_key in data:\n            gene_key = pred_key[:-1]\n            if len(genes) == 1:\n                value = gene_obj.get(gene_key, '-')\n            else:\n                gene_id = gene_obj.get('hgnc_symbol') or str(gene_obj['hgnc_id'])\n                value = ':'.join([gene_id, gene_obj.get(gene_key, '-')])\n            data[pred_key].append(value)\n\n    return data","language":"python"}
{"code":"private static Configuration getAppConfiguration() {\n        if (appConfig == null) {\n            \/\/\u4ecefreemarker \u89c6\u56fe\u4e2d\u83b7\u53d6\u6240\u6709\u914d\u7f6e\n            appConfig = (Configuration) FreeMarkerRender.getConfiguration().clone();\n            try {\n                \/\/\u8bbe\u7f6e\u6a21\u677f\u8def\u5f84\n                appConfig.setDirectoryForTemplateLoading(\n                        new File(PathKit.getWebRootPath() + Goja.viewPath));\n                appConfig.setObjectWrapper(new BeansWrapperBuilder(Configuration.VERSION_2_3_21).build());\n            } catch (IOException e) {\n                logger.error(\"The Freemarkers has error!\", e);\n            }\n        }\n        return appConfig;\n    }","language":"java"}
{"code":"def get_settings(self, integration_id):\n        \"\"\"Return settings for given integration as a dictionary.\"\"\"\n\n        try:\n            integration = self.get(integration_id=integration_id)\n            return json.loads(integration.settings)\n        except (self.model.DoesNotExist, ValueError):\n            return {}","language":"python"}
{"code":"public function setTravelMode($travelMode = null)\n    {\n        if (!in_array($travelMode, TravelMode::getTravelModes()) && ($travelMode !== null)) {\n            throw DirectionsException::invalidDirectionsRequestTravelMode();\n        }\n\n        $this->travelMode = $travelMode;\n    }","language":"php"}
{"code":"def choice content = nil, opts = nil, html_options = nil, &block\n      if block.nil?\n        opts    = @options.merge(opts || {})\n      else\n        content = @options.merge(content || {})\n      end\n\n      @items << Choice.new(content, opts, html_options, &block).render\n    end","language":"ruby"}
{"code":"private String saveTmpFile(ByteBuffer b, int offset, int len, String filename_hint) {\n        String path = \"\";\n        if (len > 0) {\n            FileOutputStream fileOutputStream = null;\n            try {\n                ITempFile tempFile = this.tempFileManager.createTempFile(filename_hint);\n                ByteBuffer src = b.duplicate();\n                fileOutputStream = new FileOutputStream(tempFile.getName());\n                FileChannel dest = fileOutputStream.getChannel();\n                src.position(offset).limit(offset + len);\n                dest.write(src.slice());\n                path = tempFile.getName();\n            } catch (Exception e) { \/\/ Catch exception if any\n                throw new Error(e); \/\/ we won't recover, so throw an error\n            } finally {\n                NanoHTTPD.safeClose(fileOutputStream);\n            }\n        }\n        return path;\n    }","language":"java"}
{"code":"function fmtShort(ms) {\n  if (ms >= d$1) {\n    return Math.round(ms \/ d$1) + 'd'\n  }\n  if (ms >= h) {\n    return Math.round(ms \/ h) + 'h'\n  }\n  if (ms >= m) {\n    return Math.round(ms \/ m) + 'm'\n  }\n  if (ms >= s) {\n    return Math.round(ms \/ s) + 's'\n  }\n  return ms + 'ms'\n}","language":"javascript"}
{"code":"function parseSimpleString(parser) {\n  var offset = parser.offset;\n  var length = parser.buffer.length;\n  var string = '';\n\n  while (offset < length) {\n    var c1 = parser.buffer[offset++];\n    if (c1 === 13) {\n      var c2 = parser.buffer[offset++];\n      if (c2 === 10) {\n        parser.offset = offset;\n        return string;\n      }\n      string += String.fromCharCode(c1) + String.fromCharCode(c2);\n      continue;\n    }\n    string += String.fromCharCode(c1);\n  }\n  return undefined;\n}","language":"javascript"}
{"code":"def commit_user(githubuser, commituser)\n\n      users = db[:users]\n\n      name = commituser['name']\n      email = commituser['email'] #if is_valid_email(commituser['email'])\n      # Github user can be null when the commit email has not been associated\n      # with any account in Github.\n      login = githubuser['login'] unless githubuser.nil?\n\n      # web-flow is a special user reserved for web-based commits:\n      # https:\/\/api.github.com\/users\/web-flow\n      # We do not follow the process below as this user's email\n      # (noreply@github.com) clashes other existing users' emails.\n      if login == 'web-flow'\n        return ensure_user_byuname('web-flow')\n      end\n\n      return ensure_user(\"#{name}<#{email}>\", false, false) if login.nil?\n\n      dbuser = users.first(:login => login)\n      byemail = users.first(:email => email)\n\n      if dbuser.nil?\n        # We do not have the user in the database yet\n        added = ensure_user(login, false, false)\n\n        # A commit user can be found by email but not\n        # by the user name he used to commit. This probably means that the\n        # user has probably changed his user name. Treat the user's by-email\n        # description as valid.\n        if added.nil? and not byemail.nil?\n          warn \"Found user #{byemail[:login]} with same email #{email} as non existing user #{login}. Assigning user #{login} to #{byemail[:login]}\"\n          return users.first(:login => byemail[:login])\n        end\n\n        # This means that the user's login has been associated with a\n        # Github user by the time the commit was done (and hence Github was\n        # able to associate the commit to an account), but afterwards the\n        # user has deleted his account (before GHTorrent processed it).\n        # On absense of something better to do, try to find the user by email\n        # and return a \"fake\" user entry.\n        if added.nil?\n          warn \"User account for user #{login} deleted from Github\"\n          return ensure_user(\"#{name}<#{email}>\", false, false)\n        end\n\n        if byemail.nil?\n          users.filter(:login => login).update(:name => name) if added[:name].nil?\n          users.filter(:login => login).update(:email => email) if added[:email].nil?\n        else\n          # There is a previous entry for the user, currently identified by\n          # email. This means that the user has updated his account and now\n          # Github is able to associate his commits with his git credentials.\n          # As the previous entry might have already associated records, just\n          # delete the new one and update the existing with any extra data.\n          users.filter(:login => login).delete\n          users.filter(:email => email).update(\n              :login => login,\n              :company => added[:company],\n              :location => added[:location],\n              :created_at => added[:created_at]\n          )\n        end\n      else\n        users.filter(:login => login).update(:name => name) if dbuser[:name].nil?\n        users.filter(:login => login).update(:email => email) if dbuser[:email].nil?\n      end\n      users.first(:login => login)\n\n    end","language":"ruby"}
{"code":"protected function setupResultObject()\n    {\n        $browserData = $this->detectByType();\n        foreach ($browserData as $key => $value) {\n            if ($key === 'originalInfo') {\n                $this->setAttributes($value);\n                continue;\n            }\n            Tools::runSetter($this->resultObject, $key, $value);\n        }\n        $this->additionalInfo = $browserData;\n    }","language":"php"}
{"code":"protected Dimension getMinimumThumbSize()\n    {\n        int thickness = THICKNESS;\n\n        return isVertical() ? new Dimension(thickness, thickness * 2) : new Dimension(thickness * 2, thickness);\n    }","language":"java"}
{"code":"function postinstall () {\n    var json = Readers.getBowerJSON();\n    if (!json.scripts || !json.scripts.postinstall) return; \/\/\/nothing to be done ...\n    Node.executeCommand(json.scripts.postinstall).done(Node.info.bind(null, 'Postinstall done'), Node.info.bind(null, 'Postinstall failed'));\n  }","language":"javascript"}
{"code":"func (auth *Auth) AzureTables(account, continuationToken string) (*AzureListTableResponse, error) {\n\tv := url.Values{}\n\tif continuationToken != \"\" {\n\t\tv.Add(\"continuationToken\", continuationToken)\n\t}\n\tcd := tcclient.Client(*auth)\n\tresponseObject, _, err := (&cd).APICall(nil, \"GET\", \"\/azure\/\"+url.QueryEscape(account)+\"\/tables\", new(AzureListTableResponse), v)\n\treturn responseObject.(*AzureListTableResponse), err\n}","language":"go"}
{"code":"function getContextuallyTypedParameterType(parameter) {\n            var func = parameter.parent;\n            if (isFunctionExpressionOrArrowFunction(func) || ts.isObjectLiteralMethod(func)) {\n                if (isContextSensitive(func)) {\n                    var contextualSignature = getContextualSignature(func);\n                    if (contextualSignature) {\n                        var funcHasRestParameters = ts.hasRestParameter(func);\n                        var len = func.parameters.length - (funcHasRestParameters ? 1 : 0);\n                        var indexOfParameter = ts.indexOf(func.parameters, parameter);\n                        if (indexOfParameter < len) {\n                            return getTypeAtPosition(contextualSignature, indexOfParameter);\n                        }\n                        \/\/ If last parameter is contextually rest parameter get its type\n                        if (funcHasRestParameters &&\n                            indexOfParameter === (func.parameters.length - 1) &&\n                            isRestParameterIndex(contextualSignature, func.parameters.length - 1)) {\n                            return getTypeOfSymbol(ts.lastOrUndefined(contextualSignature.parameters));\n                        }\n                    }\n                }\n            }\n            return undefined;\n        }","language":"javascript"}
{"code":"func (c *JobConfig) SetPostsubmits(jobs map[string][]Postsubmit) error {\n\tnj := map[string][]Postsubmit{}\n\tfor k, v := range jobs {\n\t\tnj[k] = make([]Postsubmit, len(v))\n\t\tcopy(nj[k], v)\n\t\tif err := SetPostsubmitRegexes(nj[k]); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tc.Postsubmits = nj\n\treturn nil\n}","language":"go"}
{"code":"function(Template, expression, tag){\n\t\tswitch(tag){\n\t\t\tcase Template.language.tag('set'):\n\t\t\t\treturn new Set(Template,expression);\n\t\t\tcase Template.language.tag('setalist'):\n\t\t\t\treturn new SetList(Template,expression);\n\t\t\tcase Template.language.tag('setahash'):\n\t\t\t\treturn new SetHash(Template,expression);\n\t\t\tcase Template.language.tag('addtolist'):\n\t\t\t\treturn new AddToList(Template,expression);\n\t\t\tcase Template.language.tag('setaregex'):\n\t\t\t\treturn new SetARegEx(Template,expression);\n\t\t\tdefault:\n\t\t\t\treturn {skip:true};\n\t\t}\n\t}","language":"javascript"}
{"code":"public function getCustomerToMailAddress($formData = [])\n    {\n        $email = $this->getAttribute('mail_customer_to_address');\n\n        if (is_object($formData)) {\n            if (method_exists($formData, 'getEmail')) {\n                $email = $formData->getEmail();\n            } elseif (isset($formData->email)) {\n                $email = $formData->email;\n            }\n        } elseif (is_array($formData) && isset($formData['email'])) {\n            $email = $formData['email'];\n        }\n\n        return $email;\n    }","language":"php"}
{"code":"func (pcs Trace) TrimAbove(pc Call) Trace {\n\tfor len(pcs) > 0 && pcs[len(pcs)-1] != pc {\n\t\tpcs = pcs[:len(pcs)-1]\n\t}\n\treturn pcs\n}","language":"go"}
{"code":"func (s *OffsetStash) ResetOffset(msg *sarama.ConsumerMessage, metadata string) {\n\ts.ResetPartitionOffset(msg.Topic, msg.Partition, msg.Offset, metadata)\n}","language":"go"}
{"code":"def write_text_manifest\n      File.open(text_manifest_path, \"w\") do |f|\n        f.puts \"#{name} #{build_version}\"\n        f.puts \"\"\n        f.puts Omnibus::Reports.pretty_version_map(self)\n      end\n    end","language":"ruby"}
{"code":"def get_token(self,\n                  token_name,\n                  project_name,\n                  dataset_name):\n        \"\"\"\n        Get a token with the given parameters.\n        Arguments:\n            project_name (str): Project name\n            dataset_name (str): Dataset name project is based on\n            token_name (str): Token name\n        Returns:\n            dict: Token info\n        \"\"\"\n        return self.resources.get_token(token_name,\n                                        project_name,\n                                        dataset_name)","language":"python"}
{"code":"func containerLoadFromAllProjects(s *state.State) ([]container, error) {\n\tvar projects []string\n\n\terr := s.Cluster.Transaction(func(tx *db.ClusterTx) error {\n\t\tvar err error\n\t\tprojects, err = tx.ProjectNames()\n\t\treturn err\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcontainers := []container{}\n\tfor _, project := range projects {\n\t\tprojectContainers, err := containerLoadByProject(s, project)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrapf(nil, \"Load containers in project %s\", project)\n\t\t}\n\t\tcontainers = append(containers, projectContainers...)\n\t}\n\n\treturn containers, nil\n}","language":"go"}
{"code":"def iplot_state(quantum_state, method='city', figsize=None):\n    \"\"\"Plot the quantum state.\n\n    Args:\n        quantum_state (ndarray): statevector or density matrix\n                                 representation of a quantum state.\n        method (str): Plotting method to use.\n        figsize (tuple): Figure size in pixels.\n\n    Raises:\n        VisualizationError: if the input is not a statevector or density\n        matrix, or if the state is not an multi-qubit quantum state.\n    \"\"\"\n    warnings.warn(\"iplot_state is deprecated, and will be removed in \\\n                  the 0.9 release. Use the iplot_state_ * functions \\\n                  instead.\",\n                  DeprecationWarning)\n    rho = _validate_input_state(quantum_state)\n    if method == \"city\":\n        iplot_state_city(rho, figsize=figsize)\n    elif method == \"paulivec\":\n        iplot_state_paulivec(rho, figsize=figsize)\n    elif method == \"qsphere\":\n        iplot_state_qsphere(rho, figsize=figsize)\n    elif method == \"bloch\":\n        iplot_bloch_multivector(rho, figsize=figsize)\n    elif method == \"hinton\":\n        iplot_state_hinton(rho, figsize=figsize)\n    else:\n        raise VisualizationError('Invalid plot state method.')","language":"python"}
{"code":"def children(self, parent_item, navigation_type, use_template, context):\n        \"\"\"Builds and returns site tree item children structure for 'sitetree_children' tag.\n\n        :param TreeItemBase parent_item:\n        :param str|unicode navigation_type: menu, sitetree\n        :param str|unicode use_template:\n        :param Context context:\n        :rtype: list\n        \"\"\"\n        # Resolve parent item and current tree alias.\n        parent_item = self.resolve_var(parent_item, context)\n        tree_alias, tree_items = self.get_sitetree(parent_item.tree.alias)\n\n        # Mark path to current item.\n        self.tree_climber(tree_alias, self.get_tree_current_item(tree_alias))\n\n        tree_items = self.get_children(tree_alias, parent_item)\n        tree_items = self.filter_items(tree_items, navigation_type)\n        tree_items = self.apply_hook(tree_items, '%s.children' % navigation_type)\n        self.update_has_children(tree_alias, tree_items, navigation_type)\n\n        my_template = get_template(use_template)\n\n        context.push()\n        context['sitetree_items'] = tree_items\n        rendered = my_template.render(context.flatten() if _CONTEXT_FLATTEN else context)\n        context.pop()\n\n        return rendered","language":"python"}
{"code":"def write_file_entry\n      write_entry do |path, filetime, name|\n        write PKHeader.pk0304(filetime, name.length, true).pack('VvvvvvVVVvv'), name\n        ret = deflate_file path\n        write PKHeader.pk0708(ret[:crc], ret[:complen], ret[:uncomplen]).pack('VVVV')\n        ret\n      end\n    end","language":"ruby"}
{"code":"public static function phpSelf($dropqs = true)\n    {\n        $url = null;\n        if (php_sapi_name() != 'cli') {\n\n            $schema = 'http';\n            if (isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) {\n                $schema .= 's';\n            }\n            $url = sprintf('%s:\/\/%s%s', $schema, $_SERVER['SERVER_NAME'],\n                $_SERVER['REQUEST_URI']);\n\n            $parts = parse_url($url);\n\n            $port   = $_SERVER['SERVER_PORT'];\n            $scheme = $parts['scheme'];\n            $host   = $parts['host'];\n            if (isset($parts['path'])) {\n                $path = $parts['path'];\n            } else {\n                $path = null;\n            }\n            if (isset($parts['query'])) {\n                $qs = $parts['query'];\n            } else {\n                $qs = null;\n            }\n            $port || $port = ($scheme == 'https') ? '443' : '80';\n\n            if (($scheme == 'https' && $port != '443') || ($scheme == 'http' && $port\n                != '80')\n            ) {\n                $host = \"$host:$port\";\n            }\n            $url = \"$scheme:\/\/$host$path\";\n            if (!$dropqs) {\n                return \"{$url}?{$qs}\";\n            } else {\n                return $url;\n            }\n        }\n    }","language":"php"}
{"code":"function(url, type, hash) {\n    var adapter = this;\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      hash = adapter.ajaxOptions(url, type, hash);\n\n      hash.success = function(json) {\n        Ember.run(null, resolve, json);\n      };\n\n      hash.error = function(jqXHR, textStatus, errorThrown) {\n        Ember.run(null, reject, adapter.ajaxError(jqXHR));\n      };\n\n      Ember.$.ajax(hash);\n    }, \"DS: RestAdapter#ajax \" + type + \" to \" + url);\n  }","language":"javascript"}
{"code":"def health_check_ldd\n      regexp_ends = \".*(\" + IGNORED_ENDINGS.map { |e| e.gsub(\/\\.\/, '\\.') }.join(\"|\") + \")$\"\n      regexp_patterns = IGNORED_PATTERNS.map { |e| \".*\" + e.gsub(\/\\\/\/, '\\\/') + \".*\" }.join(\"|\")\n      regexp = regexp_ends + \"|\" + regexp_patterns\n\n      current_library = nil\n      bad_libs = {}\n\n      read_shared_libs(\"find #{project.install_dir}\/ -type f -regextype posix-extended ! -regex '#{regexp}' | xargs ldd\") do |line|\n        case line\n        when \/^(.+):$\/\n          current_library = Regexp.last_match[1]\n          log.debug(log_key) { \"Analyzing dependencies for #{current_library}\" }\n        when \/^\\s+(.+) \\=\\>\\s+(.+)( \\(.+\\))?$\/\n          name = Regexp.last_match[1]\n          linked = Regexp.last_match[2]\n          bad_libs = check_for_bad_library(bad_libs, current_library, name, linked)\n        when \/^\\s+(.+) \\(.+\\)$\/\n          next\n        when \/^\\s+statically linked$\/\n          next\n        when \/^\\s+libjvm.so\/\n          next\n        when \/^\\s+libjava.so\/\n          next\n        when \/^\\s+libmawt.so\/\n          next\n        when \/^\\s+not a dynamic executable$\/ # ignore non-executable files\n        else\n          log.warn(log_key) do\n            \"Line did not match for #{current_library}\\n#{line}\"\n          end\n        end\n      end\n\n      bad_libs\n    end","language":"ruby"}
{"code":"protected function parseImports(array $imports, $configPath)\n    {\n        foreach ($imports as $import) {\n            $config = $this->parse(dirname($configPath) . '\/' .$import['resource']);\n            if ($config !== null) {\n                $this->_configSettings = $this->mergeConfigurations(\n                    $this->_configSettings, $config\n                );\n            }\n        }\n    }","language":"php"}
{"code":"def _init_properties(self):\n        \"\"\" Loop through the list of Properties,\n        extract the derived and required properties and do the\n        appropriate book-keeping\n        \"\"\"\n        self._missing = {}\n        for k, p in self.params.items():\n            if p.required:\n                self._missing[k] = p\n            if isinstance(p, Derived):\n                if p.loader is None:\n                    # Default to using _<param_name>\n                    p.loader = self.__getattribute__(\"_%s\" % k)\n                elif isinstance(p.loader, str):\n                    p.loader = self.__getattribute__(p.loader)","language":"python"}
{"code":"func (p GenerateTestReportParams) WithGroup(group string) *GenerateTestReportParams {\n\tp.Group = group\n\treturn &p\n}","language":"go"}
{"code":"function StoreManager(options) {\n  var stores = {};\n  this.get = function (name) {\n    if (!stores[name]) {\n      stores[name] = options.store(name);\n    }\n    return stores[name];\n  };\n}","language":"javascript"}
{"code":"def draw(alpha = 255, z_index = 0, color = 0xffffff)\n      return unless @visible\n\n      c = (alpha << 24) | color\n      if @img\n        if @img.is_a?(Array)\n          @img[0].draw(@x, @y, z_index, @scale_x, @scale_y, c)\n          @img[1].draw(@x + @tile_w, @y, z_index, @center_scale_x, @scale_y, c) if @draw_center_x\n          @img[2].draw(@x + @w - @tile_w, @y, z_index, @scale_x, @scale_y, c)\n          @img[3].draw(@x, @y + @tile_h, z_index, @scale_x, @center_scale_y, c) if @draw_center_y\n          @img[4].draw(@x + @tile_w, @y + @tile_h, z_index, @center_scale_x, @center_scale_y, c) if @draw_center_x && @draw_center_y\n          @img[5].draw(@x + @w - @tile_w, @y + @tile_h, z_index, @scale_x, @center_scale_y, c) if @draw_center_y\n          @img[6].draw(@x, @y + @h - @tile_h, z_index, @scale_x, @scale_y, c)\n          @img[7].draw(@x + @tile_w, @y + @h - @tile_h, z_index, @center_scale_x, @scale_y, c) if @draw_center_x\n          @img[8].draw(@x + @w - @tile_w, @y + @h - @tile_h, z_index, @scale_x, @scale_y, c)\n        else\n          @img.draw(@x, @y, z_index, @w.to_f \/ @img.width, @h.to_f \/ @img.height)\n        end\n      end\n\n      @controls.each { |k| k.draw(alpha, z_index, color) if k.visible }\n    end","language":"ruby"}
{"code":"def keys (options={})\n\n      if @type == \"tcf\"\n        min, max = \"min\", \"max\"\n        l        = lib.tcfdbrange2( as_fixed, min, Rufus::Tokyo.blen(min),\n                                              max, Rufus::Tokyo.blen(max), -1)\n      else\n        pre = options.fetch(:prefix, \"\")\n\n        l = lib.abs_fwmkeys(\n          @db, pre, Rufus::Tokyo.blen(pre), options[:limit] || -1)\n      end\n\n      l = Rufus::Tokyo::List.new(l)\n\n      options[:native] ? l : l.release\n    end","language":"ruby"}
{"code":"def set_delete(policy, key)\n      begin_cmd\n      field_count = estimate_key_size(key)\n      size_buffer\n      write_header_with_policy(policy, 0, INFO2_WRITE|INFO2_DELETE, field_count, 0)\n      write_key(key)\n      end_cmd\n    end","language":"ruby"}
{"code":"func (in *App) DeepCopy() *App {\n\tif in == nil {\n\t\treturn nil\n\t}\n\tout := new(App)\n\tin.DeepCopyInto(out)\n\treturn out\n}","language":"go"}
{"code":"func (c *Client) GetProject(name string) (*Project, error) {\n\tp := &Project{}\n\terr := c.get([]string{\"project\", name}, nil, p)\n\treturn p, err\n}","language":"go"}
{"code":"def _before_validation\n      fix_basedirpath\n\n      # parent, basedirpath\n      if self.parent_id.nil? && !self.basedirpath.blank?\n        set_parent_from_basedirpath\n      elsif self.basedirpath.nil? && !self.parent_id.nil?\n        set_basedirpath_from_parent\n      end\n\n      set_basepath\n    end","language":"ruby"}
{"code":"public function getStringRepresentation() {\n\t\tif (!is_array($this->throwableArray)) {\n\t\t\t$renderer = new LoggerRendererException();\n\t\t\t\n\t\t\t$this->throwableArray = explode(\"\\n\", $renderer->render($this->throwable));\n\t\t}\n\t\t\n\t\treturn $this->throwableArray;\n\t}","language":"php"}
{"code":"protected void fireTreeNodesRemoved(Object source, Object[] path,\r\n                                        int[] childIndices,\r\n                                        Object[] children) {\r\n        \/\/ Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        TreeModelEvent e = null;\r\n        \/\/ Process the listeners last to first, notifying\r\n        \/\/ those that are interested in this event\r\n        for (int i = listeners.length-2; i>=0; i-=2) {\r\n            if (listeners[i]==TreeModelListener.class) {\r\n                \/\/ Lazily create the event:\r\n                if (e == null)\r\n                    e = new TreeModelEvent(source, path,\r\n                                           childIndices, children);\r\n                ((TreeModelListener)listeners[i+1]).treeNodesRemoved(e);\r\n            }\r\n        }\r\n    }","language":"java"}
{"code":"func (srv *Server) StartServe() error {\n\tvar err error\n\tsrv.ln, err = net.Listen(srv.network, srv.address)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar opts []grpc.ServerOption\n\topts = append(opts, grpc.MaxRecvMsgSize(int(maxRequestBytes+grpcOverheadBytes)))\n\topts = append(opts, grpc.MaxSendMsgSize(maxSendBytes))\n\topts = append(opts, grpc.MaxConcurrentStreams(maxStreams))\n\tsrv.grpcServer = grpc.NewServer(opts...)\n\n\trpcpb.RegisterTransportServer(srv.grpcServer, srv)\n\n\tsrv.lg.Info(\n\t\t\"gRPC server started\",\n\t\tzap.String(\"address\", srv.address),\n\t\tzap.String(\"listener-address\", srv.ln.Addr().String()),\n\t)\n\terr = srv.grpcServer.Serve(srv.ln)\n\tif err != nil && strings.Contains(err.Error(), \"use of closed network connection\") {\n\t\tsrv.lg.Info(\n\t\t\t\"gRPC server is shut down\",\n\t\t\tzap.String(\"address\", srv.address),\n\t\t\tzap.Error(err),\n\t\t)\n\t} else {\n\t\tsrv.lg.Warn(\n\t\t\t\"gRPC server returned with error\",\n\t\t\tzap.String(\"address\", srv.address),\n\t\t\tzap.Error(err),\n\t\t)\n\t}\n\treturn err\n}","language":"go"}
{"code":"func (p *Process) ForEachReversePtr(y Object, fn func(x Object, r *Root, i, j int64) bool) {\n\tp.reverseEdges()\n\n\tidx, _ := p.findObjectIndex(p.Addr(y))\n\tfor _, a := range p.redge[p.ridx[idx]:p.ridx[idx+1]] {\n\t\t\/\/ Read pointer, compute offset in y.\n\t\tptr := p.proc.ReadPtr(a)\n\t\tj := ptr.Sub(p.Addr(y))\n\n\t\t\/\/ Find source of pointer.\n\t\tx, i := p.FindObject(a)\n\t\tif x != 0 {\n\t\t\t\/\/ Source is an object.\n\t\t\tif !fn(x, nil, i, j) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\t\/\/ Source is a root.\n\t\tk := sort.Search(len(p.rootIdx), func(k int) bool {\n\t\t\tr := p.rootIdx[k]\n\t\t\treturn a < r.Addr.Add(r.Type.Size)\n\t\t})\n\t\tr := p.rootIdx[k]\n\t\tif !fn(0, r, a.Sub(r.Addr), j) {\n\t\t\treturn\n\t\t}\n\t}\n}","language":"go"}
{"code":"public function checkLink($link_hash, $paragraph_id) {\n    \/\/ Load file and paragraph.\n    $entity = $this->getSubscribeFileEntity('link_hash', $link_hash);\n    $this->checkLinkActive($entity);\n    $paragraph = Paragraph::load($paragraph_id);\n    $file_hash = $entity->get('file_hash')->get(0)->getValue();\n    $link_options = [\n      'absolute' => TRUE,\n      'attributes' => ['class' => 'btn btn-primary btn-orange']\n    ];\n\n    \/\/ Generate download link\/\n    $button_text = $paragraph->get('field_d_p_sf_download_button')->getValue();\n    $download_link = Link::createFromRoute($button_text[0]['value'], 'd_p_subscribe_file.downloadfile.getFile', ['file_hash' => $file_hash['value']], $link_options);\n    $rendered_download_link = $download_link->toString()->getGeneratedLink();\n\n    \/\/ Generate download page with link.\n    $display_settings = ['label' => 'hidden',];\n    $body = $paragraph->get('field_d_p_sf_download_page')->view($display_settings);\n    $body[0]['#text'] = str_replace(\"[download-button]\", $rendered_download_link, $body[0]['#text']);\n    return [\n      '#theme' => 'd_p_subscribe_file_download_page',\n      '#body' => $body,\n    ];\n  }","language":"php"}
{"code":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> retry(Predicate<? super Throwable> predicate) {\n        return retry(Long.MAX_VALUE, predicate);\n    }","language":"java"}
{"code":"func (cgp *CGP) Domain(name string) *Domain {\n\treturn &Domain{cgp: cgp, Name: name}\n}","language":"go"}
{"code":"@Bean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME)\n\tpublic Filter springSecurityFilterChain() throws Exception {\n\t\tboolean hasConfigurers = webSecurityConfigurers != null\n\t\t\t\t&& !webSecurityConfigurers.isEmpty();\n\t\tif (!hasConfigurers) {\n\t\t\tWebSecurityConfigurerAdapter adapter = objectObjectPostProcessor\n\t\t\t\t\t.postProcess(new WebSecurityConfigurerAdapter() {\n\t\t\t\t\t});\n\t\t\twebSecurity.apply(adapter);\n\t\t}\n\t\treturn webSecurity.build();\n\t}","language":"java"}
{"code":"private void handleStageError(ErrorCode errorCode, Exception e) {\n    final String errorMessage = \"Failure Happened\";\n    LOG.error(errorMessage, e);\n    try {\n      errorRecordHandler.onError(errorCode, e);\n    } catch (StageException se) {\n      LOG.error(\"Error when routing to stage error\", se);\n      \/\/Way to throw stage exception from runnable to main source thread\n      Throwables.propagate(se);\n    }\n  }","language":"java"}
{"code":"def update_classifier(classifier_id:, positive_examples: nil, negative_examples: nil, negative_examples_filename: nil)\n      raise ArgumentError.new(\"classifier_id must be provided\") if classifier_id.nil?\n\n      raise ArgumentError.new(\"positive_examples must be a hash\") unless positive_examples.nil? || positive_examples.is_a?(Hash)\n\n      headers = {\n      }\n      sdk_headers = Common.new.get_sdk_headers(\"watson_vision_combined\", \"V3\", \"update_classifier\")\n      headers.merge!(sdk_headers)\n\n      params = {\n        \"version\" => @version\n      }\n\n      form_data = {}\n\n      positive_examples&.each do |key, value|\n        part_name = \"%s_positive_examples\" % key.to_s\n        unless value.instance_of?(StringIO) || value.instance_of?(File)\n          value = value.respond_to?(:to_json) ? StringIO.new(value.to_json) : StringIO.new(value)\n        end\n        filename = value.path if value.respond_to?(:path)\n        form_data[part_name.to_sym] = HTTP::FormData::File.new(value, content_type: \"application\/octet-stream\", filename: filename)\n      end\n\n      unless negative_examples.nil?\n        unless negative_examples.instance_of?(StringIO) || negative_examples.instance_of?(File)\n          negative_examples = negative_examples.respond_to?(:to_json) ? StringIO.new(negative_examples.to_json) : StringIO.new(negative_examples)\n        end\n        negative_examples_filename = negative_examples.path if negative_examples_filename.nil? && negative_examples.respond_to?(:path)\n        form_data[:negative_examples] = HTTP::FormData::File.new(negative_examples, content_type: \"application\/octet-stream\", filename: negative_examples_filename)\n      end\n\n      method_url = \"\/v3\/classifiers\/%s\" % [ERB::Util.url_encode(classifier_id)]\n\n      response = request(\n        method: \"POST\",\n        url: method_url,\n        headers: headers,\n        params: params,\n        form: form_data,\n        accept_json: true\n      )\n      response\n    end","language":"ruby"}
{"code":"public static Date getDateUsingDemarkatedMatch( String dateString, String dateFormatString, char demark )\n  {\n    \/\/ extract the match string\n    int pos1 = dateFormatString.indexOf( demark);\n    int pos2 = dateFormatString.indexOf( demark, pos1+1);\n    if ((pos1 < 0) || (pos2 < 0)) {\n      logger.error(\"Must delineate Date between 2 '#' chars, dateFormatString = '\"+ dateFormatString+\"'\", new Throwable());\n      return null;\n    }\n    String match = dateFormatString.substring(pos1+1, pos2);\n\n    int pos3 = dateString.indexOf(match);\n    if (pos3 < 0) return null;\n\n    if (pos1 > 0) {  \/\/ pos1 > 0, date is before the match: \"yyyyMMddHH#\/wrfout_d01_#\"\n      dateFormatString = dateFormatString.substring(0, pos1);\n      dateString = dateString.substring(pos3-dateFormatString.length(), pos3);\n\n    }  else {        \/\/ pos1 == 0, date is after the match: \"#wrfout_d01_#yyyy-MM-dd_HHmm\"\n      dateFormatString = dateFormatString.substring(pos2+1);\n      dateString = dateString.substring(pos3+match.length());\n    }\n\n    \/\/ any leading or trailing \".\" in the dateFormatString means trim\n    int posDot1 = 0;\n    while (dateFormatString.charAt(posDot1) == '.')\n      posDot1++;\n    int posDot2 = dateFormatString.length();\n    while (dateFormatString.charAt(posDot2-1) == '.')\n      posDot2--;\n    if (posDot1 != 0 || posDot2 != dateFormatString.length()) {\n      dateFormatString = dateFormatString.substring(posDot1, posDot2);\n      dateString = dateString.substring(posDot1, posDot2);\n    }\n\n    return getDateUsingCompleteDateFormatWithOffset( dateString, dateFormatString, 0 );\n  }","language":"java"}
{"code":"def set_widths file, line, method\n      @format = LocationFormat.new file: file, line: line, method: method\n    end","language":"ruby"}
{"code":"def bind(self, graph, reset=True, initialize=True):\n        '''Bind this layer into a computation graph.\n\n        This method is a wrapper for performing common initialization tasks. It\n        calls :func:`resolve`, :func:`setup`, and :func:`log`.\n\n        Parameters\n        ----------\n        graph : :class:`Network <theanets.graph.Network>`\n            A computation network in which this layer is to be bound.\n        reset : bool, optional\n            If ``True`` (the default), reset the resolved layers for this layer.\n        initialize : bool, optional\n            If ``True`` (the default), initialize the parameters for this layer\n            by calling :func:`setup`.\n\n        Raises\n        ------\n        theanets.util.ConfigurationError :\n            If an input cannot be resolved.\n        '''\n        if reset:\n            for k in self._input_shapes:\n                self._input_shapes[k] = None\n            for k in self._output_shapes:\n                self._output_shapes[k] = None\n        self.resolve_inputs(graph.layers)\n        self.resolve_outputs()\n        self.activate = activations.build(\n            self.kwargs.get('activation', 'relu'), self)\n        if initialize:\n            self.setup()\n        self.log()","language":"python"}
{"code":"func (p *StopAllWorkersParams) Do(ctx context.Context) (err error) {\n\treturn cdp.Execute(ctx, CommandStopAllWorkers, nil, nil)\n}","language":"go"}
{"code":"private void showNode(TreeModel tree, Object node) {\n    if (node == null) return;\n    InvCatalogTreeNode tnode = (InvCatalogTreeNode) node;\n    DatasetNode cp = tnode.ds;\n    System.out.println(\" node= \"+cp.getName()+\" leaf= \"+tree.isLeaf( node));\n    for (int i=0; i< tree.getChildCount(node); i++)\n      showNode(tree, tree.getChild(node, i));\n  }","language":"java"}
{"code":"def gaussian_cost(X):\n    '''Return the average log-likelihood of data under a standard normal\n    '''\n\n    d, n = X.shape\n\n    if n < 2:\n        return 0\n\n    sigma = np.var(X, axis=1, ddof=1)\n\n    cost = -0.5 * d * n * np.log(2. * np.pi) - 0.5 * (n - 1.) * np.sum(sigma)\n    return cost","language":"python"}
{"code":"func (r *ProtocolLXD) GetContainerSnapshots(containerName string) ([]api.ContainerSnapshot, error) {\n\tsnapshots := []api.ContainerSnapshot{}\n\n\t\/\/ Fetch the raw value\n\t_, err := r.queryStruct(\"GET\", fmt.Sprintf(\"\/containers\/%s\/snapshots?recursion=1\", url.QueryEscape(containerName)), nil, \"\", &snapshots)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn snapshots, nil\n}","language":"go"}
{"code":"def filter(self, *filters, **kwargs):\n        \"\"\"\n        Returns this Query instance with the query args combined with\n        existing set with AND.\n\n        kwargs are simply passed to a new Filter object and combined to any\n        other filters with AND.\n\n        By default, everything is combined using AND. If you provide\n        multiple filters in a single filter call, those are ANDed\n        together. If you provide multiple filters in multiple filter\n        calls, those are ANDed together.\n\n        If you want something different, use the F class which supports\n        ``&`` (and), ``|`` (or) and ``~`` (not) operators. Then call\n        filter once with the resulting Filter instance.\n        \"\"\"\n        f = list(filters)\n\n        if kwargs:\n            f += [Filter(**kwargs)]\n\n        return self._clone(filters=f)","language":"python"}
{"code":"func (ms *MockServers) StopAt(idx int) {\n\tms.mu.Lock()\n\tdefer ms.mu.Unlock()\n\n\tif ms.Servers[idx].ln == nil {\n\t\treturn\n\t}\n\n\tms.Servers[idx].GrpcServer.Stop()\n\tms.Servers[idx].GrpcServer = nil\n\tms.Servers[idx].ln = nil\n\tms.wg.Done()\n}","language":"go"}
{"code":"function factory (type, opts) {\n  return (cmds, options) => {\n    const cmd = { exec: execa.exec, shell: execa.shell }\n    return cmd[type](cmds, Object.assign({}, opts, options))\n  }\n}","language":"javascript"}
{"code":"def intervals(context, build):\n    \"\"\"Show all indexes in the database\"\"\"\n    LOG.info(\"Running scout view index\")\n    adapter = context.obj['adapter']\n\n    intervals = adapter.get_coding_intervals(build)\n    nr_intervals = 0\n    longest = 0\n    for chrom in CHROMOSOMES:\n        for iv in intervals[chrom]:\n            iv_len = iv.end - iv.begin\n            if iv_len > longest:\n                longest = iv_len\n        int_nr = len(intervals.get(chrom, []))\n        click.echo(\"{0}\\t{1}\".format(chrom, int_nr))\n        nr_intervals += int_nr\n\n    LOG.info(\"Total nr intervals:%s\", nr_intervals)\n    LOG.info(\"Total nr genes:%s\", adapter.all_genes(build).count())\n    LOG.info(\"Longest interval:%s\", longest)","language":"python"}
{"code":"public function get()\n    {\n        $res = array();\n        foreach ($this->value as $val) {\n            $res[] = $val->get();\n        }\n        return $res;\n    }","language":"php"}
{"code":"function() {\r\n            \r\n            var _this            = this;\r\n            var preview          = this.preview;\r\n            var settings         = this.settings;\r\n            var codeMirror       = this.codeMirror;\r\n            var mouseOrTouch     = editormd.mouseOrTouch;\r\n            \r\n            if (!settings.syncScrolling) {\r\n                return this;\r\n            }\r\n                \r\n            var cmBindScroll = function() {    \r\n                codeMirror.find(\".CodeMirror-scroll\").bind(mouseOrTouch(\"scroll\", \"touchmove\"), function(event) {\r\n                    var height    = $(this).height();\r\n                    var scrollTop = $(this).scrollTop();                    \r\n                    var percent   = (scrollTop \/ $(this)[0].scrollHeight);\r\n                    \r\n                    var tocHeight = 0;\r\n                    \r\n                    preview.find(\".markdown-toc-list\").each(function(){\r\n                        tocHeight += $(this).height();\r\n                    });\r\n                    \r\n                    var tocMenuHeight = preview.find(\".editormd-toc-menu\").height();\r\n                    tocMenuHeight = (!tocMenuHeight) ? 0 : tocMenuHeight;\r\n\r\n                    if (scrollTop === 0) \r\n                    {\r\n                        preview.scrollTop(0);\r\n                    } \r\n                    else if (scrollTop + height >= $(this)[0].scrollHeight - 16)\r\n                    { \r\n                        preview.scrollTop(preview[0].scrollHeight);                        \r\n                    } \r\n                    else\r\n                    {\r\n                        preview.scrollTop((preview[0].scrollHeight  + tocHeight + tocMenuHeight) * percent);\r\n                    }\r\n                    \r\n                    $.proxy(settings.onscroll, _this)(event);\r\n                });\r\n            };\r\n\r\n            var cmUnbindScroll = function() {\r\n                codeMirror.find(\".CodeMirror-scroll\").unbind(mouseOrTouch(\"scroll\", \"touchmove\"));\r\n            };\r\n\r\n            var previewBindScroll = function() {\r\n                \r\n                preview.bind(mouseOrTouch(\"scroll\", \"touchmove\"), function(event) {\r\n                    var height    = $(this).height();\r\n                    var scrollTop = $(this).scrollTop();         \r\n                    var percent   = (scrollTop \/ $(this)[0].scrollHeight);\r\n                    var codeView  = codeMirror.find(\".CodeMirror-scroll\");\r\n\r\n                    if(scrollTop === 0) \r\n                    {\r\n                        codeView.scrollTop(0);\r\n                    }\r\n                    else if (scrollTop + height >= $(this)[0].scrollHeight)\r\n                    {\r\n                        codeView.scrollTop(codeView[0].scrollHeight);                        \r\n                    }\r\n                    else \r\n                    {\r\n                        codeView.scrollTop(codeView[0].scrollHeight * percent);\r\n                    }\r\n                    \r\n                    $.proxy(settings.onpreviewscroll, _this)(event);\r\n                });\r\n\r\n            };\r\n\r\n            var previewUnbindScroll = function() {\r\n                preview.unbind(mouseOrTouch(\"scroll\", \"touchmove\"));\r\n            }; \r\n\r\n\t\t\tcodeMirror.bind({\r\n\t\t\t\tmouseover  : cmBindScroll,\r\n\t\t\t\tmouseout   : cmUnbindScroll,\r\n\t\t\t\ttouchstart : cmBindScroll,\r\n\t\t\t\ttouchend   : cmUnbindScroll\r\n\t\t\t});\r\n            \r\n            if (settings.syncScrolling === \"single\") {\r\n                return this;\r\n            }\r\n            \r\n\t\t\tpreview.bind({\r\n\t\t\t\tmouseover  : previewBindScroll,\r\n\t\t\t\tmouseout   : previewUnbindScroll,\r\n\t\t\t\ttouchstart : previewBindScroll,\r\n\t\t\t\ttouchend   : previewUnbindScroll\r\n\t\t\t});\r\n\r\n            return this;\r\n        }","language":"javascript"}
{"code":"public function type($type)\n    {\n        $this->params['type'] = array();\n        $args                 = func_get_args();\n        foreach ($args as $arg) {\n            $this->params['type'][] = $arg;\n        }\n\n        return $this;\n    }","language":"php"}
{"code":"def online?(path = nil)\n      NS::Browser.get(url(path)).code.nonzero? ? true : false\n    end","language":"ruby"}
{"code":"function reduce(object, fn) {\n  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  return keys(object).reduce(function (accum, key) {\n    return fn(accum, object[key], key);\n  }, initial);\n}","language":"javascript"}
{"code":"public function switchForm($formName = null, $id = null)\n    {\n        $this->formHelper->switchForm($formName, $id);\n    }","language":"php"}
{"code":"public function tell($user, $text)\n    {\n        return $this->say($this->sequencer->format('@'.$user).' '.$text);\n    }","language":"php"}
{"code":"public static function extendProfiler(\n        ContainerInterface $container,\n        ?ProfilerContract $profiler = null\n    ): ?ProfilerContract {\n        if ($profiler !== null) {\n            $options = self::resolveOptions($container->get('config'));\n\n            if ($options['collector']['translation']) {\n                $profiler->addCollector(new ViserioTranslationDataCollector(\n                    $container->get(TranslatorContract::class)\n                ));\n            }\n        }\n\n        return $profiler;\n    }","language":"php"}
{"code":"func autoScaleHistoryHandler(w http.ResponseWriter, r *http.Request, t auth.Token) error {\n\tif !permission.Check(t, permission.PermNodeAutoscale) {\n\t\treturn permission.ErrUnauthorized\n\t}\n\tskip, _ := strconv.Atoi(r.URL.Query().Get(\"skip\"))\n\tlimit, _ := strconv.Atoi(r.URL.Query().Get(\"limit\"))\n\thistory, err := autoscale.ListAutoScaleEvents(skip, limit)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif len(history) == 0 {\n\t\tw.WriteHeader(http.StatusNoContent)\n\t\treturn nil\n\t}\n\tw.Header().Set(\"Content-Type\", \"application\/json\")\n\treturn json.NewEncoder(w).Encode(&history)\n}","language":"go"}
{"code":"def increase_priority torrent_hashes\n      torrent_hashes = Array(torrent_hashes)\n      torrent_hashes = torrent_hashes.join('|')\n\n      options = {\n        body: \"hashes=#{torrent_hashes}\"\n      }\n\n      self.class.post('\/command\/increasePrio', options)\n    end","language":"ruby"}
{"code":"function (url, db) {\n    this.server = new Drowsy.Server(url);\n    this.db = this.server.database(db);\n\n    \/\/ User model\n    this.User = this.db.Document('users').extend({\n      addTag: function (tag) {\n        var tags = _.clone(this.get('tags'));\n\n        \/\/ if no classes array exists add it\n        if (!tags) {\n          tags = [];\n        }\n\n        tags.push(tag);\n        this.set('tags', _.uniq(tags));\n      },\n\n      removeTag: function (tag) {\n        var tags = this.get('tags');\n        this.set('tags', _.without(tags, tag));\n      },\n\n      addCohort: function (c) {\n        var classes = _.clone(this.get('cohorts'));\n        \/\/ if no cohorts array exists add it\n        if (!cohorts) {\n          cohorts = [];\n        }\n\n        cohorts.push(c);\n        this.set('cohorts', _.uniq(cohorts));\n      },\n\n      removeCohort: function (c) {\n        var cohorts = this.get('cohorts');\n        this.set('cohorts', _.without(cohorts, c));\n      },\n\n      isTeacher: function() {\n        if (this.get('user_role') === 'teacher') {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    });\n\n    this.Users = this.db.Collection('users').extend({\n      model: this.User\n    });\n\n    \/*\n     *   Group model\n     *\/\n    this.Group = this.db.Document('groups').extend({\n      addGroup: function (group) {\n        var groups = _.clone(this.get('groups'));\n        groups.push(group);\n        this.set('groups', _.uniq(group));\n      }\n    });\n\n    this.Groups = this.db.Collection('groups').extend({\n      model: this.Group\n    });\n\n    \/\/ Run model\n    this.Run = this.db.Document('runs').extend({\n    });\n\n    this.Runs = this.db.Collection('runs').extend({\n      model: this.Run\n    });\n\n    \/*\n     *   Model for Cohorts\n     *\/\n    this.Cohort = this.db.Document('cohorts').extend({\n      addDiscussion: function (discussionId) {\n        var discussions = _.clone(this.get('discussions'));\n\n        \/\/ if no discussions array exists add it\n        if (!discussions) {\n          discussions = [];\n        }\n\n        discussions.push(discussionId);\n        this.set('discussions', _.uniq(discussions));\n      },\n\n      removeDiscussion: function (discussionId) {\n        var discussions = this.get('discussions');\n        this.set('discussions', _.without(discussions, discussionId));\n      }\n\n    });\n\n    this.Cohorts = this.db.Collection('cohorts').extend({\n      model: this.Cohort\n    });\n\n    \/*\n     *   Model for Discussions\n     *\/\n    this.Discussion = this.db.Document('discussions').extend({\n    });\n\n    this.Discussions = this.db.Collection('discussions').extend({\n      model: this.Discussion\n    });\n\n  }","language":"javascript"}
{"code":"def exit_code\n      fail_chance   = ENV.fetch('REX_SIMULATE_FAIL_CHANCE', 0).to_i\n      fail_exitcode = ENV.fetch('REX_SIMULATE_EXIT', 0).to_i\n      if fail_exitcode == 0 || fail_chance < (Random.rand * 100).round\n        0\n      else\n        fail_exitcode\n      end\n    end","language":"ruby"}
{"code":"function findVersion (versions, version) {\n    var cleanedVersion = semver.clean(version);\n    for (var i = 0; i < versions.length; i++) {\n        if (semver.clean(versions[i]) === cleanedVersion) {\n            return versions[i];\n        }\n    }\n    return null;\n}","language":"javascript"}
{"code":"function getExampleCode(comment) {\n  var expectedResult = comment.expectedResult;\n  var isAsync = comment.isAsync;\n  var testCase = comment.testCase;\n\n  if(isAsync) {\n    return '\\nfunction cb(err, result) {' +\n      'if(err) return done(err);' +\n      'result.should.eql(' + expectedResult + ');' +\n      'done();' +\n    '}\\n' +\n    'var returnValue = ' + testCase + ';' +\n    'if(returnValue && returnValue.then && typeof returnValue.then === \\'function\\') {' +\n      'returnValue.then(cb.bind(null, null), cb);' +\n    '}';\n  } else {\n    return '(' + testCase + ').should.eql(' + expectedResult + ');';\n  }\n}","language":"javascript"}
{"code":"function FeedSummary(props) {\n  const { children, className, content, date, user } = props\n\n  const classes = cx('summary', className)\n  const rest = getUnhandledProps(FeedSummary, props)\n  const ElementType = getElementType(FeedSummary, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      <\/ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedUser, val => ({ content: val }), user, { autoGenerateKey: false })}\n      {content}\n      {createShorthand(FeedDate, val => ({ content: val }), date, { autoGenerateKey: false })}\n    <\/ElementType>\n  )\n}","language":"javascript"}
{"code":"public function getAction(int $id)\n    {\n        try {\n            $em = $this->getDoctrine()->getManager();\n            $entity = $em->getRepository($this->entityClassName())->find($id);\n            if ($entity) {\n                return $entity;\n            }\n            return FOSView::create('Not Found', Response::HTTP_NO_CONTENT);\n        } catch (\\Exception $e) {\n            return FOSView::create($e->getMessage(), Response::HTTP_INTERNAL_SERVER_ERROR);\n        }\n    }","language":"php"}
{"code":"def replace(template)\n            template = template.to_mixml_template\n\n            each_node do |node|\n                value = template.evaluate(node)\n                node.replace(value)\n            end\n        end","language":"ruby"}
{"code":"@Override\n  public Object getId() {\n    if (rawElement == null)\n      \/\/ CREATE A TEMPORARY ID\n      return vOut.getIdentity() + \"->\" + vIn.getIdentity();\n\n    setCurrentGraphInThreadLocal();\n\n    return super.getId();\n  }","language":"java"}
{"code":"def header column, name = nil\n      @column  = column\n      defaults = [translate_headers_by_defaults, translate_headers_by_defaults_active_record, translate_headers_by_active_record, header_name(name)]\n      @name    = UiBibz::Utils::Internationalization.new(translate_headers_by_model, default: defaults).translate\n      sortable? ? sortable_link : title\n    end","language":"ruby"}
{"code":"function decodeJoinGroupResponse (resp) {\n  var result = {\n    members: []\n  };\n\n  var error;\n\n  Binary.parse(resp)\n    .word32bs('size')\n    .word32bs('correlationId')\n    .word16bs('errorCode')\n    .tap(function (vars) {\n      error = createGroupError(vars.errorCode);\n    })\n    .word32bs('generationId')\n    .tap(function (vars) {\n      result.generationId = vars.generationId;\n    })\n    .word16bs('groupProtocol')\n    .tap(function (vars) {\n      this.buffer('groupProtocol', vars.groupProtocol);\n      result.groupProtocol = vars.groupProtocol = vars.groupProtocol.toString();\n    })\n    .word16bs('leaderId')\n    .tap(function (vars) {\n      this.buffer('leaderId', vars.leaderId);\n      result.leaderId = vars.leaderId = vars.leaderId.toString();\n    })\n    .word16bs('memberId')\n    .tap(function (vars) {\n      this.buffer('memberId', vars.memberId);\n      result.memberId = vars.memberId = vars.memberId.toString();\n    })\n    .word32bs('memberNum')\n    .loop(function (end, vars) {\n      if (error) {\n        return end();\n      }\n\n      if (vars.memberNum-- === 0) return end();\n      var memberMetadata;\n      this.word16bs('groupMemberId')\n        .tap(function (vars) {\n          this.buffer('groupMemberId', vars.groupMemberId);\n          vars.memberId = vars.groupMemberId.toString();\n        })\n        .word32bs('memberMetadata')\n        .tap(function (vars) {\n          if (vars.memberMetadata > -1) {\n            this.buffer('memberMetadata', vars.memberMetadata);\n            memberMetadata = decodeGroupData(this.vars.memberMetadata);\n            memberMetadata.id = vars.memberId;\n            result.members.push(memberMetadata);\n          }\n        });\n    });\n\n  return error || result;\n}","language":"javascript"}
{"code":"def field(label, start_node: nil, placeholder: false, id: false)\n      start_node ||= self\n\n      if placeholder\n        start_node.element(placeholder: label).to_subtype\n      elsif id\n        start_node.element(id: label).to_subtype\n      else\n        field_label = label.respond_to?(:for) ? label : start_node.label(text: label)\n        determine_field(start_node, field_label)\n      end\n    end","language":"ruby"}
{"code":"func NewChildCursor(tx *bolt.Tx, path string) *ChildCursor {\n\tpath = clean(path)\n\tc := fs(tx).Cursor()\n\tdir := b(path)\n\tk, v := c.Seek(append(dir, nullByte[0]))\n\tif !bytes.Equal(dir, nullByte) {\n\t\tdir = append(dir, nullByte[0])\n\t}\n\tif !bytes.HasPrefix(k, dir) {\n\t\tk, v = nil, nil\n\t}\n\treturn &ChildCursor{\n\t\tc:   c,\n\t\tdir: dir,\n\t\tk:   k,\n\t\tv:   v,\n\t}\n}","language":"go"}
{"code":"private void handleSqlException(\n    SQLException exception,\n    List<Record> inputRecords,\n    List<OnRecordErrorException> errors\n  ) throws StageException {\n    if(jdbcUtil.isDataError(getCustomDataSqlStateCodes(), getConnectionString(), exception)) {\n      String formattedError = jdbcUtil.formatSqlException(exception);\n      LOG.error(JdbcErrors.JDBC_89.getMessage(), formattedError);\n\n      for(Record inputRecord : inputRecords) {\n        errors.add(new OnRecordErrorException(inputRecord, JdbcErrors.JDBC_89, formattedError));\n      }\n      return;\n    }\n\n    super.handleSqlException(exception);\n  }","language":"java"}
{"code":"public function getNotificationCount(UserInterface $participant, $seen = null)\n    {\n        $qb = $this->getParticipantMetadataQb($participant, $seen);\n        $qb->select($qb->expr()->count('m'));\n        return $qb->getQuery()->getSingleScalarResult();\n    }","language":"php"}
{"code":"function( $rows, c ) {\n         var i, j, k, l, cell, cells, rowIndex, rowSpan, colSpan, firstAvailCol,\n         \/\/ total columns has been calculated, use it to set the matrixrow\n          columns = c && c.columns || 0,\n          matrix = [],\n          matrixrow = new Array( columns );\n         for ( i = 0; i < $rows.length; i++ ) {\n            cells = $rows[ i ].cells;\n            for ( j = 0; j < cells.length; j++ ) {\n               cell = cells[ j ];\n               rowIndex = cell.parentNode.rowIndex;\n               rowSpan = cell.rowSpan || 1;\n               colSpan = cell.colSpan || 1;\n               if ( typeof matrix[ rowIndex ] === 'undefined' ) {\n                  matrix[ rowIndex ] = [];\n               }\n               \/\/ Find first available column in the first row\n               for ( k = 0; k < matrix[ rowIndex ].length + 1; k++ ) {\n                  if ( typeof matrix[ rowIndex ][ k ] === 'undefined' ) {\n                     firstAvailCol = k;\n                     break;\n                  }\n               }\n               \/\/ jscs:disable disallowEmptyBlocks\n               if ( columns && cell.cellIndex === firstAvailCol ) {\n                  \/\/ don't to anything\n               } else if ( cell.setAttribute ) {\n                  \/\/ jscs:enable disallowEmptyBlocks\n                  \/\/ add data-column (setAttribute = IE8+)\n                  cell.setAttribute( 'data-column', firstAvailCol );\n               } else {\n                  \/\/ remove once we drop support for IE7 - 1\/12\/2016\n                  $( cell ).attr( 'data-column', firstAvailCol );\n               }\n               for ( k = rowIndex; k < rowIndex + rowSpan; k++ ) {\n                  if ( typeof matrix[ k ] === 'undefined' ) {\n                     matrix[ k ] = [];\n                  }\n                  matrixrow = matrix[ k ];\n                  for ( l = firstAvailCol; l < firstAvailCol + colSpan; l++ ) {\n                     matrixrow[ l ] = 'x';\n                  }\n               }\n            }\n         }\n         return matrixrow.length;\n      }","language":"javascript"}
{"code":"def pr_is_intra_branch(req)\n      return false unless pr_has_head_repo(req)\n\n      if req['head']['repo']['owner']['login'] ==\n          req['base']['repo']['owner']['login'] and\n          req['head']['repo']['full_name'] == req['base']['repo']['full_name']\n        true\n      else\n        false\n      end\n    end","language":"ruby"}
{"code":"public static void requestBillingAgreement(BraintreeFragment fragment, PayPalRequest request,\n            PayPalApprovalHandler handler) {\n        if (request.getAmount() == null) {\n            fragment.sendAnalyticsEvent(\"paypal.billing-agreement.selected\");\n            if (request.shouldOfferCredit()) {\n                fragment.sendAnalyticsEvent(\"paypal.billing-agreement.credit.offered\");\n            }\n\n            requestOneTimePayment(fragment, request, true, handler);\n        } else {\n            fragment.postCallback(new BraintreeException(\n                    \"There must be no amount specified for the Billing Agreement flow\"));\n        }\n    }","language":"java"}
{"code":"public static void disableDPM(String username, String password, String organizationId, Context context) throws IOException {\n    String dpmBaseURL = normalizeDpmBaseURL(context.configuration.get(RemoteSSOService.DPM_BASE_URL_CONFIG, \"\"));\n    String userToken = retrieveUserToken(dpmBaseURL, username, password);\n    try {\n      disableDPM(userToken, organizationId, context);\n    } finally {\n      logout(dpmBaseURL, userToken);\n    }\n  }","language":"java"}
{"code":"def _send_content(self, method=\"\/sendMessage\"):\n        \"\"\"send via HTTP Post.\"\"\"\n        url = self.base_url + method\n\n        try:\n            resp = requests.post(url, json=self.message)\n            resp.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            raise MessageSendError(e)\n\n        if self.verbose:\n            if method == \"\/sendMessage\":\n                content_type = \"Message body\"\n            elif method == \"\/sendDocument\":\n                content_type = \"Attachment: \" + self.message[\"document\"]\n            print(timestamp(), content_type, \"sent.\")","language":"python"}
{"code":"def publish(klass, pattern, options)\n      if options[:platform_mappings]\n        options[:platform_mappings] = FFI_Yajl::Parser.parse(File.read(File.expand_path(options[:platform_mappings])))\n      end\n\n      klass.publish(pattern, options) do |package|\n        say(\"Published '#{package.name}' for #{package.metadata[:platform]}-#{package.metadata[:platform_version]}\", :green)\n      end\n    end","language":"ruby"}
{"code":"def send_request(channel_id, method, properties={})\n      Util.error_check :\"sending a request\",\n        @conn.send_method(Integer(channel_id), method.to_sym, properties)\n      \n      nil\n    end","language":"ruby"}
{"code":"def set_cursor_position(x, y)\n            if stdout && x && y\n                coord = Coord.new(x, y)\n                self.set_console_cursor_position(stdout, coord)\n            end\n        end","language":"ruby"}
{"code":"public void move(Number amount)\n  {\n    double max = MAX_MOVE_AMOUNT;\n    Saver<Double> s = penDown ? new Mover(new Point(getX(), getY())) : new EmptyMover();\n    animate(amount.doubleValue(), max, s);\n  }","language":"java"}
{"code":"func authEnableCommandFunc(cmd *cobra.Command, args []string) {\n\tif len(args) != 0 {\n\t\tExitWithError(ExitBadArgs, fmt.Errorf(\"auth enable command does not accept any arguments\"))\n\t}\n\n\tctx, cancel := commandCtx(cmd)\n\tcli := mustClientFromCmd(cmd)\n\tvar err error\n\tfor err == nil {\n\t\tif _, err = cli.AuthEnable(ctx); err == nil {\n\t\t\tbreak\n\t\t}\n\t\tif err == rpctypes.ErrRootRoleNotExist {\n\t\t\tif _, err = cli.RoleAdd(ctx, \"root\"); err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif _, err = cli.UserGrantRole(ctx, \"root\", \"root\"); err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tcancel()\n\tif err != nil {\n\t\tExitWithError(ExitError, err)\n\t}\n\n\tfmt.Println(\"Authentication Enabled\")\n}","language":"go"}
{"code":"def client\n      @client ||= Savon.client(Metaforce.configuration.partner_wsdl) do |wsdl|\n        wsdl.endpoint = Metaforce.configuration.endpoint\n      end.tap { |client| client.http.auth.ssl.verify_mode = :none }\n    end","language":"ruby"}
{"code":"func (s *stm) cmps() []v3.Cmp {\n\tcmps := make([]v3.Cmp, 0, len(s.rset))\n\tfor k, rk := range s.rset {\n\t\tcmps = append(cmps, isKeyCurrent(k, rk))\n\t}\n\treturn cmps\n}","language":"go"}
{"code":"function(comment) {\n              const isLicense =\n                comment.toLowerCase().includes(\"license\") ||\n                comment.toLowerCase().includes(\"copyright\");\n              if (isLicense === false) {\n                return false;\n              }\n              if (lastLicense !== comment) {\n                lastLicense = comment;\n                return true;\n              } else {\n                return false;\n              }\n            }","language":"javascript"}
{"code":"def pick_signed_metadata_statements_regex(self, pattern, context):\n        \"\"\"\n        Pick signed metadata statements based on ISS pattern matching\n        \n        :param pattern: A regular expression to match the iss against\n        :return: list of tuples (FO ID, signed metadata statement)\n        \"\"\"\n        comp_pat = re.compile(pattern)\n        sms_dict = self.signer.metadata_statements[context]\n        res = []\n        for iss, vals in sms_dict.items():\n            if comp_pat.search(iss):\n                res.extend((iss, vals))\n        return res","language":"python"}
{"code":"def clear_sessions password\n      logged_in?\n      clear = post('\/api\/clear_sessions', body: { curpass: password, dest: @baseurl, uh: @modhash, api_type: 'json' })\n      set_cookies clear.headers['set-cookie']\n      return clear\n    end","language":"ruby"}
{"code":"public function findAllByEntityTypeAndEntityId($entityType, $entityId)\n    {\n\n        \/\/ initialize the params\n        $params = array(\n            MemberNames::ENTITY_TYPE => $entityType,\n            MemberNames::ENTITY_ID   => $entityId\n        );\n\n        \/\/ load and return the URL rewrites\n        $this->urlRewritesByEntityTypeAndEntityIdStmt->execute($params);\n        return $this->urlRewritesByEntityTypeAndEntityIdStmt->fetchAll(\\PDO::FETCH_ASSOC);\n    }","language":"php"}
{"code":"func (g *Gateway) currentRaftNodes() ([]db.RaftNode, error) {\n\tif g.raft == nil {\n\t\treturn nil, raft.ErrNotLeader\n\t}\n\tservers, err := g.raft.Servers()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tprovider := raftAddressProvider{db: g.db}\n\tnodes := make([]db.RaftNode, len(servers))\n\tfor i, server := range servers {\n\t\taddress, err := provider.ServerAddr(server.ID)\n\t\tif err != nil {\n\t\t\tif err != db.ErrNoSuchObject {\n\t\t\t\treturn nil, errors.Wrap(err, \"Failed to fetch raft server address\")\n\t\t\t}\n\t\t\t\/\/ Use the initial address as fallback. This is an edge\n\t\t\t\/\/ case that happens when a new leader is elected and\n\t\t\t\/\/ its raft_nodes table is not fully up-to-date yet.\n\t\t\taddress = server.Address\n\t\t}\n\t\tid, err := strconv.Atoi(string(server.ID))\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"Non-numeric server ID\")\n\t\t}\n\t\tnodes[i].ID = int64(id)\n\t\tnodes[i].Address = string(address)\n\t}\n\treturn nodes, nil\n}","language":"go"}
{"code":"function findTokenOnLeftOfPosition(file, position) {\n        \/\/ Ideally, getTokenAtPosition should return a token. However, it is currently\n        \/\/ broken, so we do a check to make sure the result was indeed a token.\n        var tokenAtPosition = getTokenAtPosition(file, position);\n        if (isToken(tokenAtPosition) && position > tokenAtPosition.getStart(file) && position < tokenAtPosition.getEnd()) {\n            return tokenAtPosition;\n        }\n        return findPrecedingToken(position, file);\n    }","language":"javascript"}
{"code":"def deal_with_valid_option(temp_tables, temp_columns, temp_column_types, res)\n\t\t\tif !temp_tables.empty?\n\t\t\t\tcheck_given_tables_validity(temp_tables)\n\t\t\t\ttemp_tables.each do |t|\n\t\t\t\t\tres << convert_table(t)\n\t\t\t\tend\n\t\t\telsif !temp_columns.keys.empty?\n\t\t\t\tcheck_given_columns_validity(temp_columns)\n\t\t\t\tres << convert_from_columns_hash(temp_columns)\n\t\t\telsif !temp_column_types.empty?\n\t\t\t\tcheck_given_columns_validity(temp_column_types)\n\t\t\t\tres << convert_from_column_types_hash(temp_column_types)\n\t\t\tend\n\t\tend","language":"ruby"}
{"code":"def remove_git_dirs\n      log.internal(log_key) { \"Removing git directories\" }\n\n      Dir.glob(\"#{install_dir}\/**\/{,.*}\/config\").reject do |path|\n        REQUIRED_GIT_FILES.any? do |required_file|\n          !File.exist?(File.join(File.dirname(path), required_file))\n        end\n      end.each do |path|\n        log.internal(log_key) { \"Removing git dir `#{path}'\" }\n        FileUtils.rm_rf(File.dirname(path))\n      end\n\n      true\n    end","language":"ruby"}
{"code":"def getParser(self, doc=None):\n        \"\"\"Get the command line option parser.\n        \"\"\"\n        if self.parser:\n            return self.parser\n        env = self.env\n        parser = self.parserClass(doc)\n        parser.add_option(\n            \"-V\",\"--version\", action=\"store_true\",\n            dest=\"version\", default=False,\n            help=\"Output nose version and exit\")\n        parser.add_option(\n            \"-p\", \"--plugins\", action=\"store_true\",\n            dest=\"showPlugins\", default=False,\n            help=\"Output list of available plugins and exit. Combine with \"\n            \"higher verbosity for greater detail\")\n        parser.add_option(\n            \"-v\", \"--verbose\",\n            action=\"count\", dest=\"verbosity\",\n            default=self.verbosity,\n            help=\"Be more verbose. [NOSE_VERBOSE]\")\n        parser.add_option(\n            \"--verbosity\", action=\"store\", dest=\"verbosity\",\n            metavar='VERBOSITY',\n            type=\"int\", help=\"Set verbosity; --verbosity=2 is \"\n            \"the same as -v\")\n        parser.add_option(\n            \"-q\", \"--quiet\", action=\"store_const\", const=0, dest=\"verbosity\",\n            help=\"Be less verbose\")\n        parser.add_option(\n            \"-c\", \"--config\", action=\"append\", dest=\"files\",\n            metavar=\"FILES\",\n            help=\"Load configuration from config file(s). May be specified \"\n            \"multiple times; in that case, all config files will be \"\n            \"loaded and combined\")\n        parser.add_option(\n            \"-w\", \"--where\", action=\"append\", dest=\"where\",\n            metavar=\"WHERE\",\n            help=\"Look for tests in this directory. \"\n            \"May be specified multiple times. The first directory passed \"\n            \"will be used as the working directory, in place of the current \"\n            \"working directory, which is the default. Others will be added \"\n            \"to the list of tests to execute. [NOSE_WHERE]\"\n            )\n        parser.add_option(\n            \"--py3where\", action=\"append\", dest=\"py3where\",\n            metavar=\"PY3WHERE\",\n            help=\"Look for tests in this directory under Python 3.x. \"\n            \"Functions the same as 'where', but only applies if running under \"\n            \"Python 3.x or above.  Note that, if present under 3.x, this \"\n            \"option completely replaces any directories specified with \"\n            \"'where', so the 'where' option becomes ineffective. \"\n            \"[NOSE_PY3WHERE]\"\n            )\n        parser.add_option(\n            \"-m\", \"--match\", \"--testmatch\", action=\"store\",\n            dest=\"testMatch\", metavar=\"REGEX\",\n            help=\"Files, directories, function names, and class names \"\n            \"that match this regular expression are considered tests.  \"\n            \"Default: %s [NOSE_TESTMATCH]\" % self.testMatchPat,\n            default=self.testMatchPat)\n        parser.add_option(\n            \"--tests\", action=\"store\", dest=\"testNames\", default=None,\n            metavar='NAMES',\n            help=\"Run these tests (comma-separated list). This argument is \"\n            \"useful mainly from configuration files; on the command line, \"\n            \"just pass the tests to run as additional arguments with no \"\n            \"switch.\")\n        parser.add_option(\n            \"-l\", \"--debug\", action=\"store\",\n            dest=\"debug\", default=self.debug,\n            help=\"Activate debug logging for one or more systems. \"\n            \"Available debug loggers: nose, nose.importer, \"\n            \"nose.inspector, nose.plugins, nose.result and \"\n            \"nose.selector. Separate multiple names with a comma.\")\n        parser.add_option(\n            \"--debug-log\", dest=\"debugLog\", action=\"store\",\n            default=self.debugLog, metavar=\"FILE\",\n            help=\"Log debug messages to this file \"\n            \"(default: sys.stderr)\")\n        parser.add_option(\n            \"--logging-config\", \"--log-config\",\n            dest=\"loggingConfig\", action=\"store\",\n            default=self.loggingConfig, metavar=\"FILE\",\n            help=\"Load logging config from this file -- bypasses all other\"\n            \" logging config settings.\")\n        parser.add_option(\n            \"-I\", \"--ignore-files\", action=\"append\", dest=\"ignoreFiles\",\n            metavar=\"REGEX\",\n            help=\"Completely ignore any file that matches this regular \"\n            \"expression. Takes precedence over any other settings or \"\n            \"plugins. \"\n            \"Specifying this option will replace the default setting. \"\n            \"Specify this option multiple times \"\n            \"to add more regular expressions [NOSE_IGNORE_FILES]\")\n        parser.add_option(\n            \"-e\", \"--exclude\", action=\"append\", dest=\"exclude\",\n            metavar=\"REGEX\",\n            help=\"Don't run tests that match regular \"\n            \"expression [NOSE_EXCLUDE]\")\n        parser.add_option(\n            \"-i\", \"--include\", action=\"append\", dest=\"include\",\n            metavar=\"REGEX\",\n            help=\"This regular expression will be applied to files, \"\n            \"directories, function names, and class names for a chance \"\n            \"to include additional tests that do not match TESTMATCH.  \"\n            \"Specify this option multiple times \"\n            \"to add more regular expressions [NOSE_INCLUDE]\")\n        parser.add_option(\n            \"-x\", \"--stop\", action=\"store_true\", dest=\"stopOnError\",\n            default=self.stopOnError,\n            help=\"Stop running tests after the first error or failure\")\n        parser.add_option(\n            \"-P\", \"--no-path-adjustment\", action=\"store_false\",\n            dest=\"addPaths\",\n            default=self.addPaths,\n            help=\"Don't make any changes to sys.path when \"\n            \"loading tests [NOSE_NOPATH]\")\n        parser.add_option(\n            \"--exe\", action=\"store_true\", dest=\"includeExe\",\n            default=self.includeExe,\n            help=\"Look for tests in python modules that are \"\n            \"executable. Normal behavior is to exclude executable \"\n            \"modules, since they may not be import-safe \"\n            \"[NOSE_INCLUDE_EXE]\")\n        parser.add_option(\n            \"--noexe\", action=\"store_false\", dest=\"includeExe\",\n            help=\"DO NOT look for tests in python modules that are \"\n            \"executable. (The default on the windows platform is to \"\n            \"do so.)\")\n        parser.add_option(\n            \"--traverse-namespace\", action=\"store_true\",\n            default=self.traverseNamespace, dest=\"traverseNamespace\",\n            help=\"Traverse through all path entries of a namespace package\")\n        parser.add_option(\n            \"--first-package-wins\", \"--first-pkg-wins\", \"--1st-pkg-wins\",\n            action=\"store_true\", default=False, dest=\"firstPackageWins\",\n            help=\"nose's importer will normally evict a package from sys.\"\n            \"modules if it sees a package with the same name in a different \"\n            \"location. Set this option to disable that behavior.\")\n\n        self.plugins.loadPlugins()\n        self.pluginOpts(parser)\n\n        self.parser = parser\n        return parser","language":"python"}
{"code":"protected function table(string $table): TableBlueprint\n    {\n        if (empty($this->capsule)) {\n            throw new MigrationException(\"Unable to get table blueprint, no capsule are set\");\n        }\n\n        return new TableBlueprint($this->capsule, $table);\n    }","language":"php"}
{"code":"def value(self, index, extra):\n        \"\"\"Give count and value.\"\"\"\n        index = index\n        if index==0: return 1, 0\n        if index<=self.RLEMAX: return (1<<index)+extra, 0\n        return 1, index-self.RLEMAX","language":"python"}
{"code":"function() {\n\t\t\t\t_error_flag = true;\n\t\t\t\t_sync_flag = false;\n\n\t\t\t\tif (!~Basic.inArray(_p('readyState'), [XMLHttpRequest.UNSENT, XMLHttpRequest.OPENED, XMLHttpRequest.DONE])) {\n\t\t\t\t\t_p('readyState', XMLHttpRequest.DONE);\n\t\t\t\t\t_send_flag = false;\n\n\t\t\t\t\tif (_xhr) {\n\t\t\t\t\t\t_xhr.getRuntime().exec.call(_xhr, 'XMLHttpRequest', 'abort', _upload_complete_flag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_STATE_ERR);\n\t\t\t\t\t}\n\n\t\t\t\t\t_upload_complete_flag = true;\n\t\t\t\t} else {\n\t\t\t\t\t_p('readyState', XMLHttpRequest.UNSENT);\n\t\t\t\t}\n\t\t\t}","language":"javascript"}
{"code":"def main():\r\n    \"\"\"Delete previous webhooks. If local ngrok tunnel, create a webhook.\"\"\"\r\n    api = WebexTeamsAPI()\r\n    delete_webhooks_with_name(api, name=WEBHOOK_NAME)\r\n    public_url = get_ngrok_public_url()\r\n    if public_url is not None:\r\n        create_ngrok_webhook(api, public_url)","language":"python"}
{"code":"protected function encrypt()\n    {\n\n        $hash_string = $this->vanityUrl.$this->parameters['orderAmount'].$this->parameters['merchantTxnId'].$this->parameters['currency'];\n\n        $this->hash = hash_hmac('sha1', $hash_string, $this->secretKey);\n\n    }","language":"php"}
{"code":"protected function configureStfalconTinymceBundle(ContainerBuilder $container, array $config, array $bundles)\n    {\n        $tinymceConfig = new TinymceConfiguration();\n        $container->prependExtensionConfig('stfalcon_tinymce', $tinymceConfig->build($config, $bundles));\n    }","language":"php"}
{"code":"func ExplainCmd() *cobra.Command {\n\tvar exo = &cli.ExplainOptions{}\n\n\tvar cmd = &cobra.Command{\n\t\tUse:   \"explain\",\n\t\tShort: \"Explain cluster\",\n\t\tLong:  `Output expected and actual state of the given cluster`,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tswitch len(args) {\n\t\t\tcase 0:\n\t\t\t\texo.Name = viper.GetString(keyKubicornName)\n\t\t\tcase 1:\n\t\t\t\texo.Name = args[0]\n\t\t\tdefault:\n\t\t\t\tlogger.Critical(\"Too many arguments.\")\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\n\t\t\tif err := runExplain(exo); err != nil {\n\t\t\t\tlogger.Critical(err.Error())\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\t\t},\n\t}\n\n\tfs := cmd.Flags()\n\n\tbindCommonStateStoreFlags(&exo.StateStoreOptions, fs)\n\tbindCommonAwsFlags(&exo.AwsOptions, fs)\n\n\tfs.StringVarP(&exo.Output, keyOutput, \"o\", viper.GetString(keyOutput), descOutput)\n\tfs.StringVar(&exo.GitRemote, keyGitConfig, viper.GetString(keyGitConfig), descGitConfig)\n\n\treturn cmd\n}","language":"go"}
{"code":"private ValueMember[] getValueMembersForTypeCode() {\n        LocalContained[] c = _contents(DefinitionKind.dk_ValueMember, false);\n        ValueMember[] vms = new ValueMember[c.length];\n        for (int i = 0; i < c.length; ++i) {\n            ValueMemberDefImpl vmdi = (ValueMemberDefImpl) c[i];\n\n            vms[i] = new ValueMember(vmdi.name(),\n                    null, \/\/ ignore id\n                    null, \/\/ ignore defined_in\n                    null, \/\/ ignore version\n                    vmdi.type(),\n                    null, \/\/ ignore type_def\n                    vmdi.access());\n        }\n\n        return vms;\n    }","language":"java"}
{"code":"def [] file, *ps, &exe\n\t\t\topts = ::Hash === ps.last ? ps.pop : {}\n\t\t\topts[:env] = self\n\t\t\tname, type, flg = ps[0] || opts[:name], ps[1] || opts[:type], ps[2] || opts[:flags]\n\t\t\tps.push opts\n\t\t\t@dbs[ [file, name, flg | CREATE]] ||= (type || SBDB::Unknown).new file, *ps, &exe\n\t\tend","language":"ruby"}
{"code":"function(routeName, routeArgs) {\n      \/\/ make sure an onRoute before trying to call it\n      if (_.isFunction(this.onRoute)) {\n        \/\/ find the path that matches the current route\n        var routePath = _.invert(this.getOption('appRoutes'))[routeName];\n        this.onRoute(routeName, routePath, routeArgs);\n      }\n    }","language":"javascript"}
{"code":"def get_user_stat\n            response = self.get(\"\/v1\/stats\/users.json?auth_token=#{@auth_token}\")\n            JSON.parse response.body if response and response.body\n        end","language":"ruby"}
{"code":"function uniq(array, isSorted, iteratee, thisArg) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (isSorted != null && typeof isSorted != 'boolean') {\n        thisArg = iteratee;\n        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;\n        isSorted = false;\n      }\n      iteratee = iteratee == null ? iteratee : baseCallback(iteratee, thisArg, 3);\n      return (isSorted)\n        ? sortedUniq(array, iteratee)\n        : baseUniq(array, iteratee);\n    }","language":"javascript"}
{"code":"public static Optional<String> getSpringBootVersion(MavenProject mavenProject) {\n        return Optional.ofNullable(MavenUtil.getDependencyVersion(mavenProject, SpringBootConfigurationHelper.SPRING_BOOT_GROUP_ID, SpringBootConfigurationHelper.SPRING_BOOT_ARTIFACT_ID));\n    }","language":"java"}
{"code":"function getSQL($only_sql = false)\n    {\n        $this->sql = &$this->querySQL[$this->qid];\n        if ($only_sql) {\n            return $this->sql;\n        }\n\n        $params = $this->queryParams[$this->qid];\n        return array('sql' => $this->sql, 'params' => $params);\n    }","language":"php"}
{"code":"function CustomEvent(type, eventInitDict) {\n        \/*jshint eqnull:true *\/\n        var event = document.createEvent(eventName);\n        if (typeof type != 'string') {\n          throw new Error('An event name must be provided');\n        }\n        if (eventName == 'Event') {\n          event.initCustomEvent = initCustomEvent;\n        }\n        if (eventInitDict == null) {\n          eventInitDict = defaultInitDict;\n        }\n        event.initCustomEvent(\n          type,\n          eventInitDict.bubbles,\n          eventInitDict.cancelable,\n          eventInitDict.detail\n        );\n        return event;\n      }","language":"javascript"}
{"code":"public static final Class getArgClass(Object arg)\n    {\n        if (arg == null)\n            return null;\n        Class c = arg.getClass();\n        if (c == Boolean.class)\n            return Boolean.TYPE;\n        else if (c.getSuperclass() == Number.class) {\n            if (c == Integer.class)\n                return Integer.TYPE;\n            if (c == Double.class)\n                return Double.TYPE;\n            if (c == Byte.class)\n                return Byte.TYPE;\n            if (c == Long.class)\n                return Long.TYPE;\n            if (c == Float.class)\n                return Float.TYPE;\n            if (c == Short.class)\n                return Short.TYPE;\n        } else if (c == Character.class)\n            return Character.TYPE;\n        return c;\n    }","language":"java"}
{"code":"def maximize_priority torrent_hashes\n      torrent_hashes = Array(torrent_hashes)\n      torrent_hashes = torrent_hashes.join('|')\n\n      options = {\n        body: \"hashes=#{torrent_hashes}\"\n      }\n\n      self.class.post('\/command\/topPrio', options)\n    end","language":"ruby"}
{"code":"def write_localization_file\n      render_template(resource_path(\"localization-#{localization}.wxl.erb\"),\n        destination: \"#{staging_dir}\/localization-#{localization}.wxl\",\n        variables: {\n          name: project.package_name,\n          friendly_name: project.friendly_name,\n          maintainer: project.maintainer,\n        }\n      )\n    end","language":"ruby"}
{"code":"public function parseScopeArguments(array $scope)\n    {\n        $scope = new MosaicArray($scope);\n        $result = [];\n\n        \/\/ If \"type\" key has been provided, we have to typecast the result\n        $type = $scope->getItem('type');\n\n        \/\/ Get default scope argument value\n        $default = $scope->getItem('default');\n\n        \/\/ Get request parameter value\n        $value = $this->getInputManager()->get($scope['alias'], null);\n\n        \/\/ If there are no parameters with the scope name:\n        \/\/ 1) in a case when no default value is set, return null to ignore this scope\n        \/\/ 2) if default value is set, return it\n        if (is_null($value)) {\n            return !is_null($default) ? [$default] : null;\n        }\n\n        \/\/ If \"keys\" configuration key has been provided, we are dealing with an array parameter (e.g. <input name=\"somename[somekey]\">)\n        $keys = $scope->getItem('keys');\n\n        \/\/ If \"keys\" are empty, we have to perform some DRY actions\n        if (is_null($keys)) {\n            $keys = ['default'];\n            $value = ['default' => $value];\n        }\n\n        foreach ((array) $keys as $key) {\n            $arg = $this->setType($value[$key], $type);\n\n            \/\/ Empty arguments are not allowed by default in order to allow default scope argument values\n            \/\/ Set allowEmpty option to `true` if you want to change this behavior\n            if ($arg !== '' or $scope->getItem('allowEmpty')) {\n                $result[] = $arg;\n            }\n        }\n\n        return $result;\n    }","language":"php"}
{"code":"function doSpawn(method, command, args, options) {\n    var result = {};\n\n    var cp;\n    var cpPromise = new ChildProcessPromise();\n    var reject = cpPromise._cpReject;\n    var resolve = cpPromise._cpResolve;\n\n    var successfulExitCodes = (options && options.successfulExitCodes) || [0];\n\n    cp = method(command, args, options);\n\n    \/\/ Don't return the whole Buffered result by default.\n    var captureStdout = false;\n    var captureStderr = false;\n\n    var capture = options && options.capture;\n    if (capture) {\n        for (var i = 0, len = capture.length; i < len; i++) {\n            var cur = capture[i];\n            if (cur === 'stdout') {\n                captureStdout = true;\n            } else if (cur === 'stderr') {\n                captureStderr = true;\n            }\n        }\n    }\n\n    result.childProcess = cp;\n\n    if (captureStdout) {\n        result.stdout = '';\n\n        cp.stdout.on('data', function(data) {\n            result.stdout += data;\n        });\n    }\n\n    if (captureStderr) {\n        result.stderr = '';\n\n        cp.stderr.on('data', function(data) {\n            result.stderr += data;\n        });\n    }\n\n    cp.on('error', reject);\n\n    cp.on('close', function(code) {\n        if (successfulExitCodes.indexOf(code) === -1) {\n            var commandStr = command + (args.length ? (' ' + args.join(' ')) : '');\n            var message = '`' + commandStr + '` failed with code ' + code;\n            var err = new ChildProcessError(message, code, cp);\n\n            if (captureStderr) {\n                err.stderr = result.stderr.toString();\n            }\n\n            if (captureStdout) {\n                err.stdout = result.stdout.toString();\n            }\n\n            reject(err);\n        } else {\n            result.code = code;\n            resolve(result);\n        }\n    });\n\n    cpPromise.childProcess = cp;\n\n    return cpPromise;\n}","language":"javascript"}
{"code":"private static function initConfig($app_name, array $runtime_config)\n    {\n        $request = Request::getInstance();\n        $host = $request->getHostInfo();\n        $index_name = $request->getIndexName();\n\n        $request_url = $request->getBaseUrl();\n        $script_path = $request->getScriptFilePath();\n\n        \/\/app\u540d\u79f0\u548c\u8def\u5f84\n        $runtime_config['app'] = array(\n            'name' => $app_name,\n            'path' => APP_PATH_DIR . $app_name . DIRECTORY_SEPARATOR\n        );\n\n        $env_config = array(\n            \/\/url\u76f8\u5173\u8bbe\u7f6e\n            'url' => array(\n                'host' => $host,\n                'index' => $index_name,\n                'request' => $request_url,\n                'full_request' => $host . $request_url\n            ),\n\n            \/\/\u914d\u7f6e\u548c\u7f13\u5b58\u7684\u7edd\u5bf9\u8def\u5f84\n            'path' => array(\n                'cache' => PROJECT_REAL_PATH . 'cache' . DIRECTORY_SEPARATOR,\n                'config' => PROJECT_REAL_PATH . 'config' . DIRECTORY_SEPARATOR,\n                'script' => $script_path . DIRECTORY_SEPARATOR,\n            ),\n\n            \/\/\u9759\u6001\u6587\u4ef6url\u548c\u7edd\u5bf9\u8def\u5f84\n            'static' => array(\n                'url' => $host . $request_url . '\/static\/',\n                'path' => $script_path . DIRECTORY_SEPARATOR . 'static' . DIRECTORY_SEPARATOR\n            )\n        );\n\n        foreach ($env_config as $key => $value) {\n            if (isset($runtime_config[$key]) && is_array($runtime_config[$key])) {\n                $runtime_config[$key] = array_merge($value, $runtime_config[$key]);\n            } elseif (!isset($runtime_config[$key])) {\n                $runtime_config[$key] = $value;\n            }\n        }\n\n        return Config::load(APP_PATH_DIR . $app_name . DIRECTORY_SEPARATOR . 'init.php')->combine($runtime_config);\n    }","language":"php"}
{"code":"func (c *Connection) dispatchInbound(_ uint32, _ uint32, call *InboundCall, frame *Frame) {\n\tif call.log.Enabled(LogLevelDebug) {\n\t\tcall.log.Debugf(\"Received incoming call for %s from %s\", call.ServiceName(), c.remotePeerInfo)\n\t}\n\n\tif err := call.readMethod(); err != nil {\n\t\tcall.log.WithFields(\n\t\t\tLogField{\"remotePeer\", c.remotePeerInfo},\n\t\t\tErrField(err),\n\t\t).Error(\"Couldn't read method.\")\n\t\tc.opts.FramePool.Release(frame)\n\t\treturn\n\t}\n\n\tcall.commonStatsTags[\"endpoint\"] = call.methodString\n\tcall.statsReporter.IncCounter(\"inbound.calls.recvd\", call.commonStatsTags, 1)\n\tif span := call.response.span; span != nil {\n\t\tspan.SetOperationName(call.methodString)\n\t}\n\n\t\/\/ TODO(prashant): This is an expensive way to check for cancellation. Use a heap for timeouts.\n\tgo func() {\n\t\tselect {\n\t\tcase <-call.mex.ctx.Done():\n\t\t\t\/\/ checking if message exchange timedout or was cancelled\n\t\t\t\/\/ only two possible errors at this step:\n\t\t\t\/\/ context.DeadlineExceeded\n\t\t\t\/\/ context.Canceled\n\t\t\tif call.mex.ctx.Err() != nil {\n\t\t\t\tcall.mex.inboundExpired()\n\t\t\t}\n\t\tcase <-call.mex.errCh.c:\n\t\t\tif c.log.Enabled(LogLevelDebug) {\n\t\t\t\tcall.log.Debugf(\"Wait for timeout\/cancellation interrupted by error: %v\", call.mex.errCh.err)\n\t\t\t}\n\t\t\t\/\/ when an exchange errors out, mark the exchange as expired\n\t\t\t\/\/ and call cancel so the server handler's context is canceled\n\t\t\t\/\/ TODO: move the cancel to the parent context at connnection level\n\t\t\tcall.response.cancel()\n\t\t\tcall.mex.inboundExpired()\n\t\t}\n\t}()\n\n\tc.handler.Handle(call.mex.ctx, call)\n}","language":"go"}
{"code":"function isIndependentFunctionLikeDeclaration(node) {\n            if (node.kind !== 144 \/* Constructor *\/ && (!node.type || !isIndependentType(node.type))) {\n                return false;\n            }\n            for (var _i = 0, _a = node.parameters; _i < _a.length; _i++) {\n                var parameter = _a[_i];\n                if (!isIndependentVariableLikeDeclaration(parameter)) {\n                    return false;\n                }\n            }\n            return true;\n        }","language":"javascript"}
{"code":"def _is_from_future_import(stmt, name):\n    \"\"\"Check if the name is a future import from another module.\"\"\"\n    try:\n        module = stmt.do_import_module(stmt.modname)\n    except astroid.AstroidBuildingException:\n        return None\n\n    for local_node in module.locals.get(name, []):\n        if isinstance(local_node, astroid.ImportFrom) and local_node.modname == FUTURE:\n            return True\n    return None","language":"python"}
{"code":"static private void transferGroup(NetcdfFile ds, NetcdfDataset targetDs, Group src, Group targetGroup, ReplaceVariableCheck replaceCheck) {\n    boolean unlimitedOK = true; \/\/ LOOK why not allowed?\n\n    \/\/ group attributes\n    transferGroupAttributes(src, targetGroup);\n\n    \/\/ dimensions\n    for (Dimension d : src.getDimensions()) {\n      if (null == targetGroup.findDimensionLocal(d.getShortName())) {\n        Dimension newd = new Dimension(d.getShortName(), d.getLength(), d.isShared(), unlimitedOK && d.isUnlimited(), d.isVariableLength());\n        targetGroup.addDimension(newd);\n      }\n    }\n\n    \/\/ variables\n    for (Variable v : src.getVariables()) {\n      Variable targetV = targetGroup.findVariable(v.getShortName());\n      VariableEnhanced targetVe = (VariableEnhanced) targetV;\n      boolean replace = (replaceCheck != null) && replaceCheck.replace(v); \/\/ replaceCheck not currently used\n\n      if (replace || (null == targetV)) { \/\/ replace it\n        if ((v instanceof Structure) && !(v instanceof StructureDS)) {\n           v = new StructureDS(targetGroup, (Structure) v);\n\n          \/\/ else if (!(v instanceof VariableDS) && !(v instanceof StructureDS)) Doug Lindolm\n        } else if (!(v instanceof VariableDS)) {\n          v = new VariableDS(targetGroup, v, false);  \/\/ enhancement done by original variable, this is just to reparent to target dataset.\n        }\n\n        if (null != targetV) targetGroup.remove(targetV);\n        targetGroup.addVariable(v); \/\/ reparent group\n        v.resetDimensions(); \/\/ dimensions will be different\n\n      } else if (!targetV.hasCachedData() && (targetVe.getOriginalVariable() == null)) {\n        \/\/ this is the case where we defined the variable, but didnt set its data. we now set it with the first nested\n        \/\/ dataset that has a variable with the same name\n        targetVe.setOriginalVariable(v);\n      }\n    }\n\n    \/\/ nested groups - check if target already has it\n    for (Group srcNested : src.getGroups()) {\n      Group nested = targetGroup.findGroup(srcNested.getShortName());\n      if (null == nested) {\n        nested = new Group(ds, targetGroup, srcNested.getShortName());\n        targetGroup.addGroup(nested);\n      }\n      transferGroup(ds, targetDs, srcNested, nested, replaceCheck);\n    }\n  }","language":"java"}
{"code":"func (c *Canceler) Cancelable() bool {\n\tc.lock.Lock()\n\tlength := len(c.reqChCancel)\n\tc.lock.Unlock()\n\n\treturn length > 0\n}","language":"go"}
{"code":"def shutdown\n\n      @hooks.each do |n, o, hook, b|\n\n        hook.shutdown if hook.respond_to?(:shutdown)\n      end\n    end","language":"ruby"}
{"code":"def add(self, name, filt, info='', params=(), setn=None):\n        \"\"\"\n        Add filter.\n\n        Parameters\n        ----------\n        name : str\n            filter name\n        filt : array_like\n            boolean filter array\n        info : str\n            informative description of the filter\n        params : tuple\n            parameters used to make the filter\n\n        Returns\n        -------\n        None\n        \"\"\"\n\n        iname = '{:.0f}_'.format(self.n) + name\n        self.index[self.n] = iname\n\n        if setn is None:\n            setn = self.maxset + 1\n        self.maxset = setn\n\n        if setn not in self.sets.keys():\n            self.sets[setn] = [iname]\n        else:\n            self.sets[setn].append(iname)\n\n        # self.keys is not added to?\n        self.components[iname] = filt\n        self.info[iname] = info\n        self.params[iname] = params\n        for a in self.analytes:\n            self.switches[a][iname] = False\n        self.n += 1\n        return","language":"python"}
{"code":"def cleanup_html(html):\n    \"\"\" This 'cleans' the HTML, meaning that any page structure is removed\n    (only the contents of <body> are used, if there is any <body).\n    Also <ins> and <del> tags are removed.  \"\"\"\n    match = _body_re.search(html)\n    if match:\n        html = html[match.end():]\n    match = _end_body_re.search(html)\n    if match:\n        html = html[:match.start()]\n    html = _ins_del_re.sub('', html)\n    return html","language":"python"}
{"code":"protected ResourceBundle getBundle(final String bundleName, final Locale locale, final ClassLoader classLoader) {\n\t\treturn ResourceBundle.getBundle(bundleName, locale, classLoader);\n\t}","language":"java"}
{"code":"function(store, type, ids) {\n    return this.ajax(this.buildURL(type.typeKey), 'GET', { data: { ids: ids } });\n  }","language":"javascript"}
{"code":"function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    \/\/ another video track is enabled, disable it\n    list[i].selected = false;\n  }\n}","language":"javascript"}
{"code":"def read(self):\n        \"\"\"Read the default, additional, system, and user config files.\n\n        :raises DefaultConfigValidationError: There was a validation error with\n                                              the *default* file.\n        \"\"\"\n        if self.default_file:\n            self.read_default_config()\n        return self.read_config_files(self.all_config_files())","language":"python"}
{"code":"def process_batch(batch)\n      batch = ETL::Batch::Batch.resolve(batch, self)\n      say \"Processing batch #{batch.file}\"\n    \n      ETL::Engine.batch = ETL::Execution::Batch.create!(\n        :batch_file => batch.file,\n        :status => 'executing'\n      )\n      \n      batch.execute\n      \n      ETL::Engine.batch.completed_at = Time.now\n      ETL::Engine.batch.status = (errors.length > 0 ? 'completed with errors' : 'completed')\n      ETL::Engine.batch.save!\n    end","language":"ruby"}
{"code":"def visit(self, visit_uri):\n        \"\"\"\n        Navigate to the given URL. The URL can either be a relative URL or an absolute URL. The\n        behavior of either depends on the driver. ::\n\n            session.visit(\"\/foo\")\n            session.visit(\"http:\/\/google.com\")\n\n        For drivers which can run against an external application, such as the Selenium driver,\n        giving an absolute URL will navigate to that page. This allows testing applications running\n        on remote servers. For these drivers, setting :data:`capybara.app_host` will make the\n        remote server the default. For example::\n\n            capybara.app_host = \"http:\/\/google.com\"\n            session.visit(\"\/\")  # visits the Google homepage\n\n        Args:\n            visit_uri (str): The URL to navigate to.\n        \"\"\"\n\n        self.raise_server_error()\n\n        visit_uri = urlparse(visit_uri)\n\n        if capybara.app_host:\n            uri_base = urlparse(capybara.app_host)\n        elif self.server:\n            uri_base = urlparse(\"http:\/\/{}:{}\".format(self.server.host, self.server.port))\n        else:\n            uri_base = None\n\n        visit_uri = ParseResult(\n            scheme=visit_uri.scheme or (uri_base.scheme if uri_base else \"\"),\n            netloc=visit_uri.netloc or (uri_base.netloc if uri_base else \"\"),\n            path=visit_uri.path,\n            params=visit_uri.params,\n            query=visit_uri.query,\n            fragment=visit_uri.fragment)\n\n        self.driver.visit(visit_uri.geturl())","language":"python"}
{"code":"public function amOnAction($action, $params = [])\n    {\n        $namespacedAction = $this->actionWithNamespace($action);\n\n        $domain = $this->app['routes']->getByAction($namespacedAction)->domain();\n        $absolute = ! is_null($domain);\n\n        $url = $this->app['url']->action($action, $params, $absolute);\n        $this->amOnPage($url);\n    }","language":"php"}
{"code":"public void\n    expand()\n    {\n        \/\/ Create a queue of unprocessed leaf compounds\n        Queue<DapVariable> queue = new ArrayDeque<DapVariable>();\n\n        for(int i = 0; i < variables.size(); i++) {\n            DapVariable var = variables.get(i);\n            if(!var.isTopLevel())\n                continue;\n            \/\/ prime the queue\n            DapType base = var.getBaseType();\n            if(base.getTypeSort().isCompound()) {\n                DapStructure struct = (DapStructure) base; \/\/ remember Sequence subclass Structure\n                if(expansionCount(struct) == 0)\n                    queue.add(var);\n            }\n        }\n        \/\/ Process the queue in prefix order\n        while(queue.size() > 0) {\n            DapVariable vvstruct = queue.remove();\n            DapStructure dstruct = (DapStructure) vvstruct.getBaseType();\n            for(DapVariable field : dstruct.getFields()) {\n                if(findVariableIndex(field) < 0) {\n                    \/\/ Add field as leaf\n                    this.segments.add(new Segment(field));\n                    this.variables.add(field);\n                }\n                DapType fbase = field.getBaseType();\n                if(fbase.getTypeSort().isCompound()) {\n                    if(expansionCount((DapStructure) fbase) == 0)\n                        queue.add(field);\n                }\n            }\n        }\n        this.expansion = Expand.EXPANDED;\n    }","language":"java"}
{"code":"public Collection<String> clearSearchResultsByPage(TextPageCriteria criteria)\n\t{\n\t\tGeodeLuceneSearch search = new GeodeLuceneSearch(this.clientCache);\n\t\n\t\treturn search.clearSearchResultsByPage(criteria,this.getRegion(criteria.getPageRegionName()));\n\t\t\n\t}","language":"java"}
{"code":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <R> Observable<R> concatMapSingleDelayError(Function<? super T, ? extends SingleSource<? extends R>> mapper, boolean tillTheEnd) {\n        return concatMapSingleDelayError(mapper, tillTheEnd, 2);\n    }","language":"java"}
{"code":"public function getTagCloud($requestQuery = null)\n    {\n        if (is_null($this->tagCloud)\n            || $requestQuery != $this->lastRequestQuery\n        ) {\n            $this->tagCloud = $this->createTagCloud($requestQuery);\n            $this->lastRequestQuery = $requestQuery;\n        }\n\n        return $this->tagCloud;\n    }","language":"php"}
{"code":"def append(key, bins, options = nil)\n      policy = create_policy(options, WritePolicy, default_write_policy)\n      command = WriteCommand.new(@cluster, policy, key, hash_to_bins(bins), Aerospike::Operation::APPEND)\n      execute_command(command)\n    end","language":"ruby"}
{"code":"function PureComponent(props, context, updater) {\n  \/\/ Duplicated from Component.\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  \/\/ We initialize the default updater but the real one gets injected by the\n  \/\/ renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}","language":"javascript"}
{"code":"public function setType(int $type)\n    {\n    \tif (!in_array($type, [\n            self::TYPE_STRING, \n            self::TYPE_NUMBER, \n            self::TYPE_BOOL_TRUE, \n            self::TYPE_BOOL_FALSE,\n            self::TYPE_NULL,\n        ]))\n        {\n            throw new LogicalNodeException('Invalid value type assigned.');\n        }\n\n    \t$this->type = $type;\n    }","language":"php"}
{"code":"def issues(self, from_date=None):\n        \"\"\"Get the issues from pagination\"\"\"\n\n        payload = {\n            'state': 'all',\n            'order_by': 'updated_at',\n            'sort': 'asc',\n            'per_page': PER_PAGE\n        }\n\n        if from_date:\n            payload['updated_after'] = from_date.isoformat()\n\n        return self.fetch_items(GitLabClient.ISSUES, payload)","language":"python"}
{"code":"def embedding_lookup(params, ids, partition_strategy: \"mod\", name: nil, validate_indices: true, max_norm: nil)\n      _embedding_lookup_and_transform(params, ids, partition_strategy: partition_strategy, name: name, max_norm: max_norm, transform_fn: nil)\n    end","language":"ruby"}
{"code":"func readstr(pos uint32) string {\n\tpos2 := int64(pos)\n\tvar retval string\n\tlenbyte := make([]byte, 1)\n\t_, err := f.ReadAt(lenbyte, pos2)\n\tif err != nil {\n\t\tfmt.Println(\"File read failed:\", err)\n\t}\n\tstrlen := lenbyte[0]\n\tdata := make([]byte, strlen)\n\t_, err = f.ReadAt(data, pos2 + 1)\n\tif err != nil {\n\t\tfmt.Println(\"File read failed:\", err)\n\t}\n\tretval = string(data[:strlen])\n\treturn retval\n}","language":"go"}
{"code":"def _prm_write_pandas_data(self, key, data, group, fullname, flag, **kwargs):\n        \"\"\"Stores a pandas DataFrame into hdf5.\n\n        :param key:\n\n            Name of data item to store\n\n        :param data:\n\n            Pandas Data to Store\n\n        :param group:\n\n            Group node where to store data in hdf5 file\n\n        :param fullname:\n\n            Full name of the `data_to_store`s original container, only needed for throwing errors.\n\n        :param flag:\n\n            If it is a series, frame or panel\n\n        \"\"\"\n        try:\n            if 'filters' not in kwargs:\n                filters = self._all_get_filters(kwargs)\n                kwargs['filters'] = filters\n            if 'format' not in kwargs:\n                kwargs['format'] = self.pandas_format\n            if 'encoding' not in kwargs:\n                kwargs['encoding'] = self.encoding\n\n            overwrite = kwargs.pop('overwrite', False)\n\n            if key in group and not (overwrite or kwargs.get('append', False)):\n                raise ValueError(\n                    'DataFrame `%s` already exists in `%s`. '\n                    'To append pass ``append=`True```.' % (key, fullname))\n            else:\n                self._logger.debug('Appending to pandas data `%s` in `%s`' % (key, fullname))\n\n            if data is not None and (kwargs['format'] == 'f' or kwargs['format'] == 'fixed'):\n                kwargs['expectedrows'] = data.shape[0]\n\n            name = group._v_pathname + '\/' + key\n            self._hdf5store.put(name, data, **kwargs)\n            self._hdf5store.flush()\n            self._hdf5file.flush()\n\n            frame_group = group._f_get_child(key)\n            setattr(frame_group._v_attrs, HDF5StorageService.STORAGE_TYPE, flag)\n            self._hdf5file.flush()\n\n        except:\n            self._logger.error('Failed storing pandas data `%s` of `%s`.' % (key, fullname))\n            raise","language":"python"}
{"code":"function makeSignature(params) {\n\tif (!params) return \"()\";\n\tvar signature = \"(\"\n\t+\n\tparams.filter(\n\t\tfunction($) {\n      return !\/\\w+\\.\\w+\/.test($.name);\n\t\t}\n\t).map(\n\t\tfunction($) {\n      var name = $.isOptional ?\n          '[' + $.name + ']' : $.name;\n\t\t\treturn name;\n\t\t}\n\t).join(\", \")\n\t+\n\t\")\";\n\treturn signature;\n}","language":"javascript"}
{"code":"protected function cleanLogEvent(string $event): string\n    {\n        if (($classes_pos = mb_strripos($event, '\\\\Classes\\\\')) !== false) {\n            $event = mb_substr($event, $classes_pos + 9);\n        } \/\/ This chops off `*\\Classes\\` from `__METHOD__`.\n        $event = str_replace($this->App->namespace, '', $event);\n\n        return $event = $this->c::mbTrim($event, '', '\\\\');\n    }","language":"php"}
{"code":"def k_checksum\n      sum = 0\n      checksum_values_with_c_checksum.each_with_index do |value, index|\n        sum += ((index % 15) + 1) * value\n      end\n      sum % 47\n    end","language":"ruby"}
{"code":"@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Maybe<T> unsubscribeOn(final Scheduler scheduler) {\n        ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\n        return RxJavaPlugins.onAssembly(new MaybeUnsubscribeOn<T>(this, scheduler));\n    }","language":"java"}
{"code":"function getDownloadURL($base, $packageinfo, $prefstate, $installed, $channel = false)\n    {\n        $states = $this->betterStates($prefstate, true);\n        if (!$states) {\n            return PEAR::raiseError('\"' . $prefstate . '\" is not a valid state');\n        }\n\n        $channel  = $packageinfo['channel'];\n        $package  = $packageinfo['package'];\n        $state    = isset($packageinfo['state'])   ? $packageinfo['state']   : null;\n        $version  = isset($packageinfo['version']) ? $packageinfo['version'] : null;\n        $restFile = $base . 'r\/' . strtolower($package) . '\/allreleases.xml';\n\n        $info = $this->_rest->retrieveData($restFile, false, false, $channel);\n        if (PEAR::isError($info)) {\n            return PEAR::raiseError('No releases available for package \"' .\n                $channel . '\/' . $package . '\"');\n        }\n\n        if (!isset($info['r'])) {\n            return false;\n        }\n\n        $release = $found = false;\n        if (!is_array($info['r']) || !isset($info['r'][0])) {\n            $info['r'] = array($info['r']);\n        }\n\n        foreach ($info['r'] as $release) {\n            if (!isset($this->_rest->_options['force']) && ($installed &&\n                  version_compare($release['v'], $installed, '<'))) {\n                continue;\n            }\n\n            if (isset($state)) {\n                \/\/ try our preferred state first\n                if ($release['s'] == $state) {\n                    $found = true;\n                    break;\n                }\n                \/\/ see if there is something newer and more stable\n                \/\/ bug #7221\n                if (in_array($release['s'], $this->betterStates($state), true)) {\n                    $found = true;\n                    break;\n                }\n            } elseif (isset($version)) {\n                if ($release['v'] == $version) {\n                    $found = true;\n                    break;\n                }\n            } else {\n                if (in_array($release['s'], $states)) {\n                    $found = true;\n                    break;\n                }\n            }\n        }\n\n        return $this->_returnDownloadURL($base, $package, $release, $info, $found, false, $channel);\n    }","language":"php"}
{"code":"def user_create( attributes: )\n      # http:\/\/blog.liveedu.tv\/ruby-generate-random-string\/\n      password = SecureRandom.base64\n      defaults  = { suspended: true, password: password, change_password_at_next_login: true }\n      user_attr = defaults.merge( attributes )\n      # create a google user object\n      user_object = Google::Apis::AdminDirectoryV1::User.new user_attr\n      # create user in directory services\n      response = service.insert_user( user_object )\n      {response: response, attributes: attributes[:primary_email], command: :user_create}\n    end","language":"ruby"}
{"code":"protected function optimizeProcess()\n    {\n        $this->output->write(Decorate::notice(str_pad('Generating optimized auto-loader', 40, ' ')), false);\n\n        $return = $this->optimizer->optimizeProcess();\n\n        if ($return) {\n            $this->info('Success');\n        } else {\n            $this->error('Error');\n        }\n\n        return $return;\n    }","language":"php"}
{"code":"@Override\n    public void startField(String field, int index) {\n      logOpen(field);\n      delegate.startField(field, index);\n    }","language":"java"}
{"code":"def ldelete (*keys)\n\n      keys = keys.flatten.collect { |k| k.to_s }\n\n      # only ADB has the #misc method...\n\n      if @db.respond_to?(:misc)\n        @db.misc('outlist', keys)\n      else\n        keys.each { |k| self.delete(k) }\n      end\n\n      nil\n    end","language":"ruby"}
{"code":"public function authenticate(LoginRequest $request)\n    {\n        $throttles = $this->isUsingThrottlesLoginsTrait();\n\n        if ($throttles && $this->hasTooManyLoginAttempts($request)) {\n            return $this->sendLockoutResponse($request);\n        }\n\n        $credentials = $this->getCredentials($request);\n\n        try {\n            if (Auth::attempt($credentials, $request->has('remember'))) {\n                return $this->handleUserWasAuthenticated($request, $throttles);\n            }\n        } catch (Exception $e) {\n            \/\/ Catch LDAP bind errors.\n        }\n\n        \/\/ If the login attempt was unsuccessful we will increment the number of attempts\n        \/\/ to login and redirect the user back to the login form. Of course, when this\n        \/\/ user surpasses their maximum number of attempts they will get locked out.\n        if ($throttles) {\n            $this->incrementLoginAttempts($request);\n        }\n\n        return redirect($this->loginPath())\n            ->withInput($request->only($this->loginUsername(), 'remember'))\n            ->withErrors([\n                $this->loginUsername() => $this->getFailedLoginMessage(),\n            ]);\n    }","language":"php"}
{"code":"def DupFd(fd):\n    '''Return a wrapper for an fd.'''\n    popen_obj = get_spawning_popen()\n    if popen_obj is not None:\n        return popen_obj.DupFd(popen_obj.duplicate_for_child(fd))\n    elif HAVE_SEND_HANDLE and sys.version_info[:2] > (3, 3):\n        from multiprocessing import resource_sharer\n        return resource_sharer.DupFd(fd)\n    else:\n        raise TypeError(\n            'Cannot pickle connection object. This object can only be '\n            'passed when spawning a new process'\n        )","language":"python"}
{"code":"protected function clearRow()\n    {\n\n        \/\/ query whether or not the column keys has been initialized\n        if ($this->cleanUpEmptyColumnKeys === null) {\n            \/\/ initialize the array with the column keys that has to be cleaned-up\n            $this->cleanUpEmptyColumnKeys = array();\n\n            \/\/ query whether or not column names that has to be cleaned up have been configured\n            if ($this->getSubject()->getConfiguration()->hasParam(ConfigurationKeys::CLEAN_UP_EMPTY_COLUMNS)) {\n                \/\/ if yes, load the column names\n                $cleanUpEmptyColumns = $this->getSubject()->getCleanUpColumns();\n\n                \/\/ translate the column names into column keys\n                foreach ($cleanUpEmptyColumns as $cleanUpEmptyColumn) {\n                    if ($this->hasHeader($cleanUpEmptyColumn)) {\n                        $this->cleanUpEmptyColumnKeys[] = $this->getHeader($cleanUpEmptyColumn);\n                    }\n                }\n            }\n        }\n\n        \/\/ remove all the empty values from the row, expected the columns has to be cleaned-up\n        return array_filter(\n            $this->row,\n            function ($value, $key) {\n                return ($value !== null && $value !== '') || in_array($key, $this->cleanUpEmptyColumnKeys);\n            },\n            ARRAY_FILTER_USE_BOTH\n        );\n    }","language":"php"}
{"code":"public MediaType withParameter(String attribute, String value)\n\t{\n\t\tMap<String, String> params = new HashMap<String, String>();\n\t\tparams.put(attribute, value);\n\t\treturn withParameters(params);\n\t}","language":"java"}
{"code":"@Override\n    public void updatePlayInfo(Volume volume) {\n        if (this.volume.equals(volume))\n            return;\n        this.volume = volume;\n        MusicHelper.super.updatePlayInfo(volume);\n    }","language":"java"}
{"code":"function renamedOption (originalName, newName) {\n  return function (val) {\n    warning(util.format(\"option `%s' has been renamed to `%s'\", originalName, newName))\n    return val\n  }\n}","language":"javascript"}
{"code":"function GridColumn(props) {\n  const {\n    children,\n    className,\n    computer,\n    color,\n    floated,\n    largeScreen,\n    mobile,\n    only,\n    stretched,\n    tablet,\n    textAlign,\n    verticalAlign,\n    widescreen,\n    width,\n  } = props\n\n  const classes = cx(\n    color,\n    useKeyOnly(stretched, 'stretched'),\n    useMultipleProp(only, 'only'),\n    useTextAlignProp(textAlign),\n    useValueAndKey(floated, 'floated'),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(computer, 'wide computer'),\n    useWidthProp(largeScreen, 'wide large screen'),\n    useWidthProp(mobile, 'wide mobile'),\n    useWidthProp(tablet, 'wide tablet'),\n    useWidthProp(widescreen, 'wide widescreen'),\n    useWidthProp(width, 'wide'),\n    'column',\n    className,\n  )\n  const rest = getUnhandledProps(GridColumn, props)\n  const ElementType = getElementType(GridColumn, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    <\/ElementType>\n  )\n}","language":"javascript"}
{"code":"@Generated(value = \"com.sun.tools.xjc.Driver\", date = \"2018-10-12T02:54:50+02:00\", comments = \"JAXB RI v2.2.11\")\n    public void setZeiteinheit(PreisZeiteinheit.Zeiteinheit value) {\n        this.zeiteinheit = value;\n    }","language":"java"}
{"code":"public HttpMultiMap<V> remove(final String name) {\n\t\tint h = hash(name);\n\t\tint i = index(h);\n\t\t_remove(h, i, name);\n\t\treturn this;\n\t}","language":"java"}
{"code":"protected boolean insert(E element, boolean unlockAndBlock)\n    {\n        \/\/ Create a new record for the data item.\n        SynchRecordImpl<E> record = new SynchRecordImpl<E>(element);\n\n        boolean result = buffer.offer(record);\n\n        if (result)\n        {\n            count++;\n\n            \/\/ Tell any waiting consumers that the queue is not empty.\n            notEmpty.signal();\n\n            if (unlockAndBlock)\n            {\n                \/\/ Allow other threads to read\/write the queue.\n                lock.unlock();\n\n                \/\/ Wait until a consumer takes this data item.\n                record.waitForConsumer();\n            }\n\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }","language":"java"}
{"code":"def load(pbfile)\n      f = File.new(pbfile, \"r\")\n      lines = []\n      while !f.eof? && (str = f.readline.strip)\n        lines << str\n      end\n      evaluate_lines(lines)\n    end","language":"ruby"}
{"code":"def merge_args(find_args, runtime_args, visibility_args = {})\n      find_args = find_args.dup\n      runtime_args = runtime_args.dup\n      options = visibility_args.dup\n      SitePrism.logger.debug(\"Initial args: #{find_args}, #{runtime_args}.\")\n\n      recombine_args(find_args, runtime_args, options)\n\n      return [*find_args, *runtime_args] if options.empty?\n\n      [*find_args, *runtime_args, options]\n    end","language":"ruby"}
{"code":"function (list, index, target, record, e) {\n        var me = this,\n            store = list.getStore(),\n            node = store.getAt(index);\n\n        me.fireEvent('itemtap', this, list, index, target, record, e);\n        if (node.isLeaf()) {\n            me.fireEvent('leafitemtap', this, list, index, target, record, e);\n            me.goToLeaf(node);\n        }\n        else {\n            this.goToNode(node);\n        }\n    }","language":"javascript"}
{"code":"public static function transliterate( $string, $flag = self::DIACRITICS ) {\n\n\t\tif ( $flag === ( $flag | self::NONE ) ) {\n\t\t\treturn $string;\n\t\t}\n\n\t\tif ( !isset( self::$transliterationMap[$flag] ) ) {\n\t\t\t$transliterationMap = array();\n\n\t\t\tif ( $flag === ( $flag | self::GREEK ) ) {\n\t\t\t\t$transliterationMap += self::$greekMap;\n\t\t\t}\n\n\t\t\tif ( $flag === ( $flag | self::DIACRITICS ) ) {\n\t\t\t\t$transliterationMap += self::$diacriticsMap;\n\t\t\t}\n\n\t\t\t\/\/ Keep it static for the duration of a request to avoid negative\n\t\t\t\/\/ performance impact\n\t\t\tself::$transliterationMap[$flag]['k'] = array_keys( $transliterationMap );\n\t\t\tself::$transliterationMap[$flag]['v'] = array_values( $transliterationMap );\n\n\t\t\tunset( $transliterationMap );\n\t\t}\n\n\t\treturn str_replace(\n\t\t\tself::$transliterationMap[$flag]['k'],\n\t\t\tself::$transliterationMap[$flag]['v'],\n\t\t\t$string\n\t\t);\n\t}","language":"php"}
{"code":"def _set_options(self, qobj_config=None, backend_options=None):\n        \"\"\"Set the backend options for all experiments in a qobj\"\"\"\n        # Reset default options\n        self._initial_unitary = self.DEFAULT_OPTIONS[\"initial_unitary\"]\n        self._chop_threshold = self.DEFAULT_OPTIONS[\"chop_threshold\"]\n        if backend_options is None:\n            backend_options = {}\n\n        # Check for custom initial statevector in backend_options first,\n        # then config second\n        if 'initial_unitary' in backend_options:\n            self._initial_unitary = np.array(backend_options['initial_unitary'],\n                                             dtype=complex)\n        elif hasattr(qobj_config, 'initial_unitary'):\n            self._initial_unitary = np.array(qobj_config.initial_unitary,\n                                             dtype=complex)\n        if self._initial_unitary is not None:\n            # Check the initial unitary is actually unitary\n            shape = np.shape(self._initial_unitary)\n            if len(shape) != 2 or shape[0] != shape[1]:\n                raise BasicAerError(\"initial unitary is not a square matrix\")\n            iden = np.eye(len(self._initial_unitary))\n            u_dagger_u = np.dot(self._initial_unitary.T.conj(),\n                                self._initial_unitary)\n            norm = np.linalg.norm(u_dagger_u - iden)\n            if round(norm, 10) != 0:\n                raise BasicAerError(\"initial unitary is not unitary\")\n            # Check the initial statevector is normalized\n\n        # Check for custom chop threshold\n        # Replace with custom options\n        if 'chop_threshold' in backend_options:\n            self._chop_threshold = backend_options['chop_threshold']\n        elif hasattr(qobj_config, 'chop_threshold'):\n            self._chop_threshold = qobj_config.chop_threshold","language":"python"}
{"code":"def email_addresses(text)\n      text.gsub(@regex[:mail]) do\n        text = $&\n        if auto_linked?($`, $')\n          text\n        else\n          display_text = (block_given?) ? yield(text) : text\n          # mail_to text, display_text\n          \"<a href='mailto:#{text}'>#{display_text}<\/a>\"\n        end\n      end\n    end","language":"ruby"}
{"code":"function &fromTgzFile($file, $state)\n    {\n        if (!class_exists('Archive_Tar')) {\n            require_once 'Archive\/Tar.php';\n        }\n\n        $tar = new Archive_Tar($file);\n        if ($this->_debug <= 1) {\n            $tar->pushErrorHandling(PEAR_ERROR_RETURN);\n        }\n\n        $content = $tar->listContent();\n        if ($this->_debug <= 1) {\n            $tar->popErrorHandling();\n        }\n\n        if (!is_array($content)) {\n            if (is_string($file) && strlen($file < 255) &&\n                  (!file_exists($file) || !@is_file($file))) {\n                $ret = PEAR::raiseError(\"could not open file \\\"$file\\\"\");\n                return $ret;\n            }\n\n            $file = realpath($file);\n            $ret = PEAR::raiseError(\"Could not get contents of package \\\"$file\\\"\".\n                                     '. Invalid tgz file.');\n            return $ret;\n        }\n\n        if (!count($content) && !@is_file($file)) {\n            $ret = PEAR::raiseError(\"could not open file \\\"$file\\\"\");\n            return $ret;\n        }\n\n        $xml      = null;\n        $origfile = $file;\n        foreach ($content as $file) {\n            $name = $file['filename'];\n            if ($name == 'package2.xml') { \/\/ allow a .tgz to distribute both versions\n                $xml = $name;\n                break;\n            }\n\n            if ($name == 'package.xml') {\n                $xml = $name;\n                break;\n            } elseif (preg_match('\/package.xml$\/', $name, $match)) {\n                $xml = $name;\n                break;\n            }\n        }\n\n        $tmpdir = System::mktemp('-t \"' . $this->_config->get('temp_dir') . '\" -d pear');\n        if ($tmpdir === false) {\n            $ret = PEAR::raiseError(\"there was a problem with getting the configured temp directory\");\n            return $ret;\n        }\n\n        PEAR_PackageFile::addTempFile($tmpdir);\n\n        $this->_extractErrors();\n        PEAR::staticPushErrorHandling(PEAR_ERROR_CALLBACK, array($this, '_extractErrors'));\n\n        if (!$xml || !$tar->extractList(array($xml), $tmpdir)) {\n            $extra = implode(\"\\n\", $this->_extractErrors());\n            if ($extra) {\n                $extra = ' ' . $extra;\n            }\n\n            PEAR::staticPopErrorHandling();\n            $ret = PEAR::raiseError('could not extract the package.xml file from \"' .\n                $origfile . '\"' . $extra);\n            return $ret;\n        }\n\n        PEAR::staticPopErrorHandling();\n        $ret = &PEAR_PackageFile::fromPackageFile(\"$tmpdir\/$xml\", $state, $origfile);\n        return $ret;\n    }","language":"php"}
{"code":"function(index, sorters, defaultDirection) {\n        \/\/ We begin by making sure we are dealing with an array of sorters\n        if (!Ext.isArray(sorters)) {\n            sorters = [sorters];\n        }\n\n        var ln = sorters.length,\n            direction = defaultDirection || this.getDefaultSortDirection(),\n            sortRoot = this.getSortRoot(),\n            currentSorters = this.getSorters(),\n            newSorters = [],\n            sorterConfig, i, sorter, currentSorter;\n\n        if (!currentSorters) {\n            \/\/ This will guarantee that we get the collection\n            currentSorters = this.createSortersCollection();\n        }\n\n        \/\/ We first have to convert every sorter into a proper Sorter instance\n        for (i = 0; i < ln; i++) {\n            sorter = sorters[i];\n            sorterConfig = {\n                direction: direction,\n                root: sortRoot\n            };\n\n            \/\/ If we are dealing with a string we assume it is a property they want to sort on.\n            if (typeof sorter === 'string') {\n                currentSorter = currentSorters.get(sorter);\n\n                if (!currentSorter) {\n                    sorterConfig.property = sorter;\n                } else {\n                    if (defaultDirection) {\n                        currentSorter.setDirection(defaultDirection);\n                    } else {\n                        \/\/ If we already have a sorter for this property we just toggle its direction.\n                        currentSorter.toggle();\n                    }\n                    continue;\n                }\n            }\n            \/\/ If it is a function, we assume its a sorting function.\n            else if (Ext.isFunction(sorter)) {\n                sorterConfig.sorterFn = sorter;\n            }\n            \/\/ If we are dealing with an object, we assume its a Sorter configuration. In this case\n            \/\/ we create an instance of Sorter passing this configuration.\n            else if (Ext.isObject(sorter)) {\n                if (!sorter.isSorter) {\n                    if (sorter.fn) {\n                        sorter.sorterFn = sorter.fn;\n                        delete sorter.fn;\n                    }\n\n                    sorterConfig = Ext.apply(sorterConfig, sorter);\n                }\n                else {\n                    newSorters.push(sorter);\n                    if (!sorter.getRoot()) {\n                        sorter.setRoot(sortRoot);\n                    }\n                    continue;\n                }\n            }\n            \/\/ Finally we get to the point where it has to be invalid\n            \/\/ <debug>\n            else {\n                Ext.Logger.warn('Invalid sorter specified:', sorter);\n            }\n            \/\/ <\/debug>\n\n            \/\/ If a sorter config was created, make it an instance\n            sorter = Ext.create('Ext.util.Sorter', sorterConfig);\n            newSorters.push(sorter);\n        }\n\n        \/\/ Now lets add the newly created sorters.\n        for (i = 0, ln = newSorters.length; i < ln; i++) {\n            currentSorters.insert(index + i, newSorters[i]);\n        }\n\n        this.dirtySortFn = true;\n\n        if (currentSorters.length) {\n            this.sorted = true;\n        }\n        return currentSorters;\n    }","language":"javascript"}
{"code":"def build_first_question(question_node)\n\t\t\tif !question_node.class.ancestors.include?(::ActiveRecordSurvey::Node::Question)\n\t\t\t\traise ArgumentError.new \"must inherit from ::ActiveRecordSurvey::Node::Question\"\n\t\t\tend\n\n\t\t\tquestion_node_maps = self.node_maps.select { |i| i.node == question_node && !i.marked_for_destruction? }\n\n\t\t\t# No node_maps exist yet from this question\n\t\t\tif question_node_maps.length === 0\n\t\t\t\t# Build our first node-map\n\t\t\t\tquestion_node_maps << self.node_maps.build(:node => question_node, :survey => self)\n\t\t\tend\n\t\tend","language":"ruby"}
{"code":"function encode(string) {\n    function hex(code) {\n        var hex_code = code.toString(16).toUpperCase();\n        if (hex_code.length < 2) {\n            hex_code = 0 + hex_code;\n        }\n        return '%' + hex_code;\n    }\n\n    string = string + '';\n    var reserved_chars = \/[ :\\\/?#\\[\\]@!$&'()*+,;=<>\"{}|\\\\`\\^%\\r\\n\\u0080-\\uffff]\/;\n    var str_len = string.length;\n    var i;\n    var string_arr = string.split('');\n    var c;\n\n    for (i = 0; i < str_len; i += 1) {\n        if (c = string_arr[i].match(reserved_chars)) {\n            c = c[0].charCodeAt(0);\n\n            if (c < 128) {\n                string_arr[i] = hex(c);\n            } else if (c < 2048) {\n                string_arr[i] = hex(192 + (c >> 6)) + hex(128 + (c & 63));\n            } else if (c < 65536) {\n                string_arr[i] = hex(224 + (c >> 12)) + hex(128 + ((c >> 6) & 63)) + hex(128 + (c & 63));\n            } else if (c < 2097152) {\n                string_arr[i] = hex(240 + (c >> 18)) + hex(128 + ((c >> 12) & 63)) + hex(128 + ((c >> 6) & 63)) + hex(128 + (c & 63));\n            }\n        }\n    }\n\n    return string_arr.join('');\n}","language":"javascript"}
{"code":"protected void sendEnd(final OutputStream out) throws IOException {\n    if (DEBUG) { Log.v(TAG, \"enter sendEnd(OutputStream out)\"); }\n    out.write(CRLF_BYTES);\n  }","language":"java"}
{"code":"function anonProject(req, res, next) {\n  var name = `${req.params.org}\/${req.params.repo}`;\n\n  name = name.toLowerCase();\n\n  Project.findOne({name: name})\n    .populate('creator')\n    .exec(function (err, project) {\n      if (err) {\n        return res.status(500).send({\n          error: 'Failed to find project',\n          info: err\n        });\n      }\n\n      if (!project) {\n        return res.status(404).send('Project not found');\n      }\n\n      if (!project.creator) {\n        return res.status(400).send('Project malformed; project creator user is missing.');\n      }\n\n      req.project = project;\n      req.accessLevel = User.projectAccessLevel(req.user, project);\n\n      if (req.user && project.creator) {\n        req.user.isProjectCreator = project.creator._id.toString() === req.user._id.toString();\n      }\n\n      next();\n    });\n}","language":"javascript"}
{"code":"protected function setQueues(array $queues)\n    {\n        $this->_queues = array();\n        foreach ($queues as $queue) {\n            $this->_queues[] = clone $queue;\n        }\n    }","language":"php"}
{"code":"def remove_ancestors_of(self, node):\n        \"\"\"Remove all of the ancestor operation nodes of node.\"\"\"\n        if isinstance(node, int):\n            warnings.warn('Calling remove_ancestors_of() with a node id is deprecated,'\n                          ' use a DAGNode instead',\n                          DeprecationWarning, 2)\n            node = self._id_to_node[node]\n\n        anc = nx.ancestors(self._multi_graph, node)\n        # TODO: probably better to do all at once using\n        # multi_graph.remove_nodes_from; same for related functions ...\n        for anc_node in anc:\n            if anc_node.type == \"op\":\n                self.remove_op_node(anc_node)","language":"python"}
{"code":"def close(self):\n        \"\"\"Close stream.\"\"\"\n        if self.writer.can_write_eof():\n            self.writer.write_eof()\n        self.writer.close()","language":"python"}
{"code":"function isJSON(value) {\r\n    if (!isString(value))\r\n        return false;\r\n    try {\r\n        const obj = JSON.parse(value);\r\n        return !!obj && typeof obj === 'object';\r\n    }\r\n    catch (e) {\r\n    }\r\n    return false;\r\n}","language":"javascript"}
{"code":"function random( dims, dt, mu, sigma, rand ) {\n\tvar out;\n\tvar draw;\n\tvar i;\n\n\tdraw = partial( mu, sigma, rand );\n\tout = matrix( dims, dt );\n\tfor ( i = 0; i < out.length; i++ ) {\n\t\tout.data[ i ] = draw();\n\t}\n\treturn out;\n}","language":"javascript"}
{"code":"public static long sRescale(long origValue, Rational origBase, Rational newBase, Rational.Rounding rounding) {\n    return VideoJNI.Rational_sRescale__SWIG_1(origValue, Rational.getCPtr(origBase), origBase, Rational.getCPtr(newBase), newBase, rounding.swigValue());\n  }","language":"java"}
{"code":"def screenshot_marker_create(project_id, screenshot_id, params)\n      path = sprintf(\"\/api\/v2\/projects\/%s\/screenshots\/%s\/markers\", project_id, screenshot_id)\n      data_hash = {}\n      post_body = nil\n  \n      if params.present?\n        unless params.kind_of?(PhraseApp::RequestParams::ScreenshotMarkerParams)\n          raise PhraseApp::ParamsHelpers::ParamsError.new(\"Expects params to be kind_of PhraseApp::RequestParams::ScreenshotMarkerParams\")\n        end\n      end\n  \n      data_hash = params.to_h\n      err = params.validate\n      if err != nil\n        return nil, err\n      end\n      reqHelper = PhraseApp::ParamsHelpers::BodyTypeHelper.new(data_hash, post_body)\n      rc, err = PhraseApp.send_request(@credentials, \"POST\", path, reqHelper.ctype, reqHelper.body, 201)\n      if err != nil\n        return nil, err\n      end\n      \n      return PhraseApp::ResponseObjects::ScreenshotMarker.new(JSON.load(rc.body)), err\n    end","language":"ruby"}
{"code":"def parse_headers(content_file)\n      headers = []\n      para1 = []\n      para2 = []\n      file_type = type_from_path(content_file)\n\n      File.open(content_file, :encoding => 'UTF-8') do |f|\n        while (line = f.gets) =~ \/^(- |)@\\w\/\n          if line !~ \/^-\/\n            line = '- ' + line\n          end\n          headers << line\n        end\n        # eat empty lines\n        while line = f.gets\n          break unless line =~ \/^\\s*$\/\n        end\n        # grab first two paragraphs\n        para1 << line\n        while line = f.gets\n          break if line =~ \/^\\s*$\/\n          para1 << line\n        end\n        while line = f.gets\n          break if line =~ \/^\\s*$\/\n          para2 << line\n        end\n      end\n\n      headers = headers.join\n      para1 = para1.join\n      para2 = para2.join\n      excerpt = \"\"\n\n      # pick the first non-heading paragraph.\n      # this is stupid, and chokes on nested headings.\n      # but is also cheap and fast :)\n      if file_type == :textile\n        if para1 =~ \/^h[1-5]\\. \/\n          excerpt = para2\n        else\n          excerpt = para1\n        end\n      elsif file_type == :markdown\n        if para1 =~ \/^#+ \/ || para1 =~ \/^(===+|---+)\\s*$\/m\n          excerpt = para2\n        else\n          excerpt = para1\n        end\n      end\n      return [headers, excerpt]\n    end","language":"ruby"}
{"code":"def read_row(self,rownumber,reverse=True):\n        \"\"\" Read a block of data. The number of samples per row is set in self.channels\n            If reverse=True the x axis is flipped.\n        \"\"\"\n        raise NotImplementedError('To be implemented')\n\n        # go to start of the row\n        self.filfile.seek(int(self.datastart+self.channels*rownumber*(int(self.nbits\/8))))\n        # read data into 2-D numpy array\n        data=np.fromfile(self.filfile,count=self.channels,dtype=self.dtype).reshape(1, self.channels)\n        if reverse:\n            data = data[:,::-1]\n        return data","language":"python"}
{"code":"public function submitTransaction(TransactionBuilder $transactionBuilder, $signingAccountSeedString)\n    {\n        $transactionEnvelope = $transactionBuilder->sign($signingAccountSeedString);\n\n        return $this->submitB64Transaction(base64_encode($transactionEnvelope->toXdr()));\n    }","language":"php"}
{"code":"protected Object session(Type type, String name) {\n\t\treturn parameter(type, name, new Function<String, Object>() {\n\n\t\t\tpublic Object apply(String name) {\n\t\t\t\treturn context.session().getAttribute(name);\n\t\t\t}\n\t\t\t\n\t\t}, new Function<String, Collection<Object>>() {\n\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tpublic Collection<Object> apply(String name) {\n\t\t\t\tHttpSession session = context.session();\n\t\t\t\tObject attribute = session.getAttribute(name);\n\t\t\t\t\n\t\t\t\tif (attribute instanceof Collection<?>) {\n\t\t\t\t\treturn (Collection<Object>) attribute;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tMap<String, Object> map = new TreeMap<String, Object>();\n\t\t\t\t\n\t\t\t\tfor (Object object : Collections.list(session.getAttributeNames())) {\n\t\t\t\t\tString key = (String) object;\n\t\t\t\t\t\n\t\t\t\t\tif (key.startsWith(name + \"[\")) {\n\t\t\t\t\t\tmap.put(key, session.getAttribute(key));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn (map.isEmpty()) ? null : map.values();\n\t\t\t}\n\t\t\t\n\t\t});\n\t}","language":"java"}
{"code":"def at(column)\n      case column\n        when Symbol  then at_accessor(column)\n        when String  then at_header(column)\n        when Integer then at_index(column)\n        when Range   then @data[column]\n        else raise InvalidColumnSpecifier, \"Invalid index type, expected Symbol, String or Integer, but got #{column.class}\"\n      end\n    end","language":"ruby"}
{"code":"function MousePosition() {\n    return signal(function (next) {\n        document.addEventListener(\"mousemove\", function (event) {\n            next(getXY(event))\n        })\n    }, new Point(0, 0))\n}","language":"javascript"}
{"code":"public function getDate()\n    {\n        $date = '';\n        if (array_key_exists(\n            Resources::DATE,\n            $this->getResponse()->getHeaders()\n        )) {\n            $date = $this->getResponse()\n                ->getHeaders()[Resources::DATE][0];\n        }\n        return $date;\n    }","language":"php"}
{"code":"def to_copy(self, column_names=None, selection=None, strings=True, virtual=False, selections=True):\n        \"\"\"Return a copy of the DataFrame, if selection is None, it does not copy the data, it just has a reference\n\n        :param column_names: list of column names, to copy, when None DataFrame.get_column_names(strings=strings, virtual=virtual) is used\n        :param selection: {selection}\n        :param strings: argument passed to DataFrame.get_column_names when column_names is None\n        :param virtual: argument passed to DataFrame.get_column_names when column_names is None\n        :param selections: copy selections to a new DataFrame\n        :return: dict\n        \"\"\"\n        if column_names:\n            column_names = _ensure_strings_from_expressions(column_names)\n        df = vaex.from_items(*self.to_items(column_names=column_names, selection=selection, strings=strings, virtual=False))\n        if virtual:\n            for name, value in self.virtual_columns.items():\n                df.add_virtual_column(name, value)\n        if selections:\n            # the filter selection does not need copying\n            for key, value in self.selection_histories.items():\n                if key != FILTER_SELECTION_NAME:\n                    df.selection_histories[key] = list(value)\n            for key, value in self.selection_history_indices.items():\n                if key != FILTER_SELECTION_NAME:\n                    df.selection_history_indices[key] = value\n        df.functions.update(self.functions)\n        df.copy_metadata(self)\n        return df","language":"python"}
{"code":"protected function getBindUsername(UserInterface $user, $queryAttribute)\n    {\n        if ($user instanceof LdapObject && $user->has('dn')) {\n            return $user->get('dn');\n        }\n        if ($queryAttribute === null) {\n            return $user->getUsername();\n        }\n\n        return $this->ldapUserProvider\n            ->getLdapUser($queryAttribute, $user->getUsername())\n            ->get('dn');\n    }","language":"php"}
{"code":"func (ast *AST) Visit() <-chan node.Node {\n\tc := make(chan node.Node)\n\tgo func() {\n\t\tdefer close(c)\n\t\tast.Root.Visit(c)\n\t}()\n\treturn c\n}","language":"go"}
{"code":"function one$$1() {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var _normalizeListenArgs2 = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,\n        target = _normalizeListenArgs2.target,\n        type = _normalizeListenArgs2.type,\n        listener = _normalizeListenArgs2.listener;\n\n    \/\/ Targeting this evented object.\n\n\n    if (isTargetingSelf) {\n      listen(target, 'one', type, listener);\n\n      \/\/ Targeting another evented object.\n    } else {\n      var wrapper = function wrapper() {\n        for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          largs[_key3] = arguments[_key3];\n        }\n\n        _this2.off(target, type, wrapper);\n        listener.apply(null, largs);\n      };\n\n      \/\/ Use the same function ID as the listener so we can remove it later\n      \/\/ it using the ID of the original listener.\n      wrapper.guid = listener.guid;\n      listen(target, 'one', type, wrapper);\n    }\n  }","language":"javascript"}
{"code":"public function dispatch(IRequest $request): IResponse\n    {\n        $this->request = $request;\n\n        return $this->dispatchToRoute($request);\n    }","language":"php"}
{"code":"public Object lookup(final Name name) throws NamingException {\n        if (isEmpty(name)) {\n            final Name emptyName = new CompositeName(\"\");\n            return new NamingContext(emptyName, this, new Hashtable<String, Object>());\n        }\n        return root.accept(new LookupVisitor(name));\n    }","language":"java"}
{"code":"function TimeUuid(value, ticks, nodeId, clockId) {\n  let buffer;\n  if (value instanceof Buffer) {\n    if (value.length !== 16) {\n      throw new Error('Buffer for v1 uuid not valid');\n    }\n    buffer = value;\n  }\n  else {\n    buffer = generateBuffer(value, ticks, nodeId, clockId);\n  }\n  Uuid.call(this, buffer);\n}","language":"javascript"}
{"code":"public static <TAnnotation extends Annotation> Optional<TAnnotation> getAnnotation(Class<?> beanType, PropertyDescriptor property, Class<TAnnotation> annotationType) {\n        Optional<TAnnotation> annotation = stream(property.getReadMethod().getAnnotationsByType(annotationType)).findAny();\n        return annotation.isPresent()\n                ? annotation\n                : getAnnotationOnField(beanType, property.getName(), annotationType);\n    }","language":"java"}
{"code":"func GetSystemErrorMessage(err error) string {\n\tif se, ok := err.(SystemError); ok {\n\t\treturn se.Message()\n\t}\n\n\treturn err.Error()\n}","language":"go"}
{"code":"function getTypeFromBindingPattern(pattern, includePatternInType) {\n            return pattern.kind === 161 \/* ObjectBindingPattern *\/\n                ? getTypeFromObjectBindingPattern(pattern, includePatternInType)\n                : getTypeFromArrayBindingPattern(pattern, includePatternInType);\n        }","language":"javascript"}
{"code":"func (v ScriptPosition) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoDebugger22(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}","language":"go"}
{"code":"def write(self, data_to_write, overwrite=False):\n        \"\"\"\n        Write or append data into the given file path.\n\n        :param data_to_write: The data to write.\n        :type data_to_write: str\n\n        :param overwrite:\n            Tell us if we have to overwrite the\n            content of the file we are working with.\n        :type overwrite: bool\n        \"\"\"\n\n        if overwrite or not path.isfile(self.file):\n            # * We have to overwrite the file data.\n            # or\n            # * The file path does not already exist.\n\n            with open(self.file, \"w\", encoding=\"utf-8\", newline=\"\\n\") as file:\n                # We prepare the file for writting.\n\n                if data_to_write and isinstance(data_to_write, str):\n                    # * A data  to write is given.\n                    # and\n                    # * The data to write is a string\n\n                    # We write the string into the file.\n                    file.write(data_to_write)\n        else:\n            # * We do not have to overwrite the file data.\n            # or\n            # * The file path does already exist.\n\n            with open(self.file, \"a\", encoding=\"utf-8\", newline=\"\\n\") as file:\n                # We prepare the file for append writting.\n\n                if data_to_write and isinstance(data_to_write, str):\n                    # * A data  to write is given.\n                    # and\n                    # * The data to write is a string\n\n                    # We append the string into the file.\n                    file.write(data_to_write)","language":"python"}
{"code":"func (it *Iterator) Next() {\n\tif it.deleted {\n\t\tit.deleted = false\n\t\treturn\n\t}\n\nretry:\n\tit.valid = true\n\tnext, deleted := it.curr.getNext(0)\n\tif deleted {\n\t\t\/\/ Current node is deleted. Unlink current node from the level\n\t\t\/\/ and make next node as current node.\n\t\t\/\/ If it fails, refresh the path buffer and obtain new current node.\n\t\tif it.s.helpDelete(0, it.prev, it.curr, next, &it.s.Stats) {\n\t\t\tit.curr = next\n\t\t} else {\n\t\t\tatomic.AddUint64(&it.s.Stats.readConflicts, 1)\n\t\t\tfound := it.s.findPath(it.curr.Item(), it.cmp, it.buf, &it.s.Stats) != nil\n\t\t\tlast := it.curr\n\t\t\tit.prev = it.buf.preds[0]\n\t\t\tit.curr = it.buf.succs[0]\n\t\t\tif found && last == it.curr {\n\t\t\t\tgoto retry\n\t\t\t}\n\t\t}\n\t} else {\n\t\tit.prev = it.curr\n\t\tit.curr = next\n\t}\n}","language":"go"}
{"code":"def address_from_digest(digest):\n        # type: (Digest) -> Address\n        \"\"\"\n        Generates an address from a private key digest.\n        \"\"\"\n        address_trits = [0] * (Address.LEN * TRITS_PER_TRYTE)  # type: List[int]\n\n        sponge = Kerl()\n        sponge.absorb(digest.as_trits())\n        sponge.squeeze(address_trits)\n\n        return Address.from_trits(\n            trits=address_trits,\n\n            key_index=digest.key_index,\n            security_level=digest.security_level,\n        )","language":"python"}
{"code":"function addPropertiesAndMethodsToModule(sModuleId, aDependencies, fpCallback) {\n  var oPromise;\n\n  function success(mapping) {\n    const oModules = getModules();\n    var oModule, fpInitProxy;\n    oModule = oModules[sModuleId].creator.apply(oModules[sModuleId], [].slice.call(arguments, 1));\n    oModule.__children__ = [];\n    oModule.dependencies = aDependencies || [].slice.call(arguments, 1);\n    oModule.resolvedDependencies = mapping;\n    oModule.__module_id__ = sModuleId;\n    fpInitProxy = oModule.init || nullFunc;\n    \/\/ Provide compatibility with old versions of Hydra.js\n    oModule.__action__ = oModule.__sandbox__ = Bus;\n    oModule.events = oModule.events || {};\n    oModule.init = function () {\n      var aArgs = copyArray(arguments).concat(getVars());\n      if (oModule.__children__.length === 0) {  \/\/ Only subscribe last element of inheritance.\n        Bus.subscribe(oModule);\n      }\n      return fpInitProxy.apply(this, aArgs);\n    };\n    oModule.handleAction = function (oNotifier) {\n      var fpCallback = this.events[oNotifier.type];\n      if (isTypeOf(fpCallback, sNotDefined)) {\n        return;\n      }\n      fpCallback.call(this, oNotifier);\n    };\n    \/\/ Provide compatibility with old Hydra versions which used to use \"destroy\" as onDestroy hook.\n    oModule.onDestroy = oModule.onDestroy || oModule.destroy || function () {\n      };\n    oModule.destroy = function () {\n      this.onDestroy();\n      Bus.unsubscribe(oModule);\n      delete oModules[sModuleId].instances[oModule.__instance_id__];\n    };\n    fpCallback(oModule);\n  }\n\n  oPromise = resolveDependencies(sModuleId, aDependencies);\n  oPromise.then(function () {\n    success.apply(success, arguments);\n  });\n}","language":"javascript"}
{"code":"def remote_execution_proxies(provider, authorized = true)\n      proxies = {}\n      proxies[:subnet]   = execution_interface.subnet.remote_execution_proxies.with_features(provider) if execution_interface && execution_interface.subnet\n      proxies[:fallback] = smart_proxies.with_features(provider) if Setting[:remote_execution_fallback_proxy]\n\n      if Setting[:remote_execution_global_proxy]\n        proxy_scope = if Taxonomy.enabled_taxonomies.any? && User.current.present?\n                        ::SmartProxy.with_taxonomy_scope_override(location, organization)\n                      else\n                        ::SmartProxy.unscoped\n                      end\n\n        proxy_scope = proxy_scope.authorized if authorized\n        proxies[:global] = proxy_scope.with_features(provider)\n      end\n\n      proxies\n    end","language":"ruby"}
{"code":"function proxy(config) {\n  function fn(key, val) {\n    if (typeof val === 'string') {\n      config.alias.apply(config, arguments);\n      return config;\n    }\n\n    if (typeof key === 'string') {\n      config.map.apply(config, arguments);\n      return config;\n    }\n\n    if (!utils.isObject(key)) {\n      throw new TypeError('expected key to be a string or object');\n    }\n\n    for (var prop in key) {\n      fn(prop, key[prop]);\n    }\n    return config;\n  }\n  fn.__proto__ = config;\n  return fn;\n}","language":"javascript"}
{"code":"func (p GetNodeForLocationParams) WithIncludeUserAgentShadowDOM(includeUserAgentShadowDOM bool) *GetNodeForLocationParams {\n\tp.IncludeUserAgentShadowDOM = includeUserAgentShadowDOM\n\treturn &p\n}","language":"go"}
{"code":"func (v *StepOutParams) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoDebugger1(&r, v)\n\treturn r.Error()\n}","language":"go"}
{"code":"func ErrorHandler(errs Errors, resp http.ResponseWriter) {\n\tif errs.Count() > 0 {\n\t\tresp.Header().Set(\"Content-Type\", \"application\/json; charset=utf-8\")\n\t\tif _, ok := errs.Overall[DeserializationError]; ok {\n\t\t\tresp.WriteHeader(http.StatusBadRequest)\n\t\t} else {\n\t\t\tresp.WriteHeader(422)\n\t\t}\n\t\terrOutput, _ := json.Marshal(errs)\n\t\tresp.Write(errOutput)\n\t\treturn\n\t}\n}","language":"go"}
{"code":"function(fn) {\n      fn = fn || console.log.bind(console);\n\n      var buffers = [];\n\n      var base64 = new Stream();\n      base64.readable = base64.writable = true;\n      base64.write = function(data) {\n        buffers.push(data);\n      };\n\n      base64.end = function() {\n        fn(Buffer.concat(buffers).toString('base64'));\n      }\n\n      this._png.pack().pipe(base64);\n    }","language":"javascript"}
{"code":"function random32ByteBuffer({cpuEntropyBits = 0, safe = true} = {}) {\n    assert.equal(typeof cpuEntropyBits, \"number\", \"cpuEntropyBits\");\n    assert.equal(typeof safe, \"boolean\", \"boolean\");\n\n    if(safe) {\n        assert(entropyCount >= 128, \"Call initialize() to add entropy (current: \" + entropyCount + \")\");\n    }\n\n    \/\/ if(entropyCount > 0) {\n    \/\/     console.log(`Additional private key entropy: ${entropyCount} events`)\n    \/\/ }\n\n    const hash_array = [];\n    hash_array.push(randomBytes(32));\n    hash_array.push(Buffer.from(cpuEntropy(cpuEntropyBits)));\n    hash_array.push(externalEntropyArray);\n    hash_array.push(browserEntropy());\n    return hash.sha256(Buffer.concat(hash_array));\n}","language":"javascript"}
{"code":"def waterfall(\n        df,\n        date: str,\n        value: str,\n        start: Dict[str, str],\n        end: Dict[str, str],\n        upperGroup: Dict[str, str],\n        insideGroup: Dict[str, str] = None,\n        filters: List[str] = None\n):\n    \"\"\"\n    Return a line for each bars of a waterfall chart, totals, groups, subgroups.\n    Compute the variation and variation rate for each line.\n\n    ---\n\n    ### Parameters\n\n    *mandatory :*\n    - `date` (*str*): name of the column that id the period of each lines\n    - `value` (*str*): name of the column that contains the vaue for each lines\n    - `start` (*dict*):\n        - `label`: text displayed under the first master column\n        - `id`: value in the date col that id lines for the first period\n    - `end` (*dict*):\n        - `label`: text displayed under the last master column\n        - `id`: value in the date col that id lines for the second period\n\n    *optional :*\n    - `upperGroup` (*dict*):\n        - `id`: name of the column that contains upperGroups unique IDs\n        - `label`: not required, text displayed under each upperGroups bars,\n          using ID when it's absent\n        - `groupsOrder`: not required, order of upperGroups\n    - `insideGroup` (*dict*):\n        - `id`: name of the column that contains insideGroups unique IDs\n        - `label`: not required, text displayed under each insideGroups bars,\n          using ID when it's absent\n        - `groupsOrder`: not required, order of insideGroups\n    - `filters` (*list*): columns to filters on\n\n    ---\n\n    ### Example\n\n    **Input**\n\n    | product_id   |   played | date   |   ord | category_id   | category_name   |\n    |:------------:|:--------:|:------:|:-----:|:-------------:|:---------------:|\n    | super clap   |       12 | t1     |     1 | clap          | Clap            |\n    | clap clap    |        1 | t1     |    10 | clap          | Clap            |\n    | tac          |        1 | t1     |     1 | snare         | Snare           |\n    | super clap   |       10 | t2     |     1 | clap          | Clap            |\n    | tac          |      100 | t2     |     1 | snare         | Snare           |\n    | bom          |        1 | t2     |     1 | tom           | Tom             |\n\n\n    ```cson\n    waterfall:\n      upperGroup:\n        id: 'category_id'\n        label: 'category_name'\n      insideGroup:\n        id: 'product_id'\n        groupsOrder: 'ord'\n      date: 'date'\n      value: 'played'\n      start:\n        label: 'Trimestre 1'\n        id: 't1'\n      end:\n        label: 'Trimester 2'\n        id: 't2'\n    ```\n\n    **Output**\n\n    |   value | label       |   variation | groups   | type   |   order |\n    |:-------:|:-----------:|:-----------:|:--------:|:------:|:-------:|\n    |      14 | Trimestre 1 |  NaN        | NaN      | NaN    |     NaN |\n    |      -3 | Clap        |   -0.230769 | clap     | parent |     NaN |\n    |      -2 | super clap  |   -0.166667 | clap     | child  |       1 |\n    |      -1 | clap clap   |   -1        | clap     | child  |      10 |\n    |      99 | Snare       |   99        | snare    | parent |     NaN |\n    |      99 | tac         |   99        | snare    | child  |       1 |\n    |       1 | Tom         |  inf        | tom      | parent |     NaN |\n    |       1 | bom         |  inf        | tom      | child  |       1 |\n    |     111 | Trimester 2 |  NaN        | NaN      | NaN    |     NaN |\n    \"\"\"\n\n    if len(df) == 0:\n        return df\n\n    if filters is not None:\n        if isinstance(filters, str):\n            filters = [filters]\n\n        def sub_waterfall(df):\n            wa_df = waterfall(df, date, value, start, end, upperGroup, insideGroup)\n            for filters_col in filters:\n                wa_df[filters_col] = df[filters_col].values[0]\n            return wa_df\n\n        # filters df into a list of sub_df\n        list_of_sub_df = [df[(df[filters].values == i).all(axis=1)]\n                          for i in df[filters].drop_duplicates().values]\n\n        return pd.concat([sub_waterfall(df) for df in list_of_sub_df], sort=False)\n\n    groups = {\n        'upperGroup': {\n            'type': 'parent',\n            'id':  'upperGroup',\n            'order': {\n                'by': ['upperGroup_order', 'groups'],\n                'ascending': [True, True]\n            },\n            'obj': upperGroup\n        }\n    }\n    if insideGroup is not None:\n        groups['insideGroup'] = {\n            'type': 'child',\n            'id': 'insideGroup',\n            'order': {\n                'by': ['type', 'insideGroup_order', 'label'],\n                'ascending': [False, True, True]\n            },\n            'obj': insideGroup\n        }\n    # prepare the dataframe with standard column names\n    df = _compute_rename(df, date, value, groups)\n\n    agg_conf = {'value': sum}\n    agg_conf.update({f'{col}_label': 'first' for col in groups.keys()})\n    agg_conf.update({f'{col}_order': 'first' for col in groups.keys()})\n    df = df.groupby(list(groups.keys()) + ['date']).agg(agg_conf).reset_index()\n\n    df_start, df_end = _compute_start_end(df, start, end)\n\n    df = _compute_value_diff(df, start, end, groups)\n\n    middle = _compute_upper_group(df)\n    if insideGroup is not None:\n        middle = pd.concat([middle, _compute_inside_group(df)])\n\n    ret = _compute_order(df_start, df_end, middle, groups)\n\n    return ret","language":"python"}
{"code":"protected static void initXstream(XStream xstream, XAlias[] xAlias,\n                                      XAliasField[] xAliasFields, XAliasAttribute[] xAliasAttributes,\n                                      XOmitField[] xOmitFields,\n                                      XImplicitCollection[] xImplicitCollection,\n                                      XImmutableType[] xImmutableTypes, XConverter[] xConverters) {\n\n        if (xOmitFields != null) {\n            for (XOmitField xof : xOmitFields) {\n                xstream.omitField(xof.classType, xof.fieldName);\n            }\n        }\n        if (xImplicitCollection != null) {\n            for (XImplicitCollection xic : xImplicitCollection) {\n                xstream.addImplicitCollection(xic.ownerType, xic.fieldName,\n                        xic.itemFieldName, xic.itemType);\n            }\n        }\n        if (xImmutableTypes != null) {\n            for (XImmutableType xit : xImmutableTypes) {\n                xstream.addImmutableType(xit.type);\n            }\n        }\n        if (xConverters != null) {\n            for (XConverter xc : xConverters) {\n                xstream.registerConverter(xc.converter, xc.priority);\n            }\n        }\n\n        if (xAlias != null) {\n            for (XAlias xa : xAlias) {\n                xstream.alias(xa.aliasName, xa.classType);\n            }\n        }\n        if (xAliasFields != null) {\n            for (XAliasField xaf : xAliasFields) {\n                xstream.aliasField(xaf.aliasName, xaf.fieldType, xaf.fieldName);\n            }\n        }\n        if (xAliasAttributes != null) {\n            for (XAliasAttribute xaa : xAliasAttributes) {\n                xstream.useAttributeFor(xaa.attributeType, xaa.attributeName);\n                xstream.aliasAttribute(xaa.attributeType, xaa.attributeName,\n                        xaa.aliasName);\n            }\n        }\n\n    }","language":"java"}
{"code":"public static String stripTrailingChar(final String string, final char c) {\n\t\tif (string.length() > 0) {\n\t\t\tif (string.charAt(string.length() - 1) == c) {\n\t\t\t\treturn string.substring(0, string.length() - 1);\n\t\t\t}\n\t\t}\n\t\treturn string;\n\t}","language":"java"}
{"code":"async def send(self, commands):\n        \"\"\"Send commands to LASAF through CAM-socket.\n\n        Parameters\n        ----------\n        commands : list of tuples or bytes string\n            Commands as a list of tuples or a bytes string. cam.prefix is\n            allways prepended before sending.\n\n        Returns\n        -------\n        int\n            Bytes sent.\n\n        Example\n        -------\n        ::\n\n            >>> # send list of tuples\n            >>> await cam.send([('cmd', 'enableall'), ('value', 'true')])\n\n            >>> # send bytes string\n            >>> await cam.send(b'\/cmd:enableall \/value:true')\n\n        \"\"\"\n        msg = self._prepare_send(commands)\n        self.writer.write(msg)\n        await self.writer.drain()","language":"python"}
{"code":"public function getComponentRestriction($type)\n    {\n        if (!$this->hasComponentRestriction($type)) {\n            throw PlaceException::autocompleteComponentRestrictionDoesNotExist($type);\n        }\n\n        return $this->componentRestrictions[$type];\n    }","language":"php"}
{"code":"func (b *AtomicFixedSizeRingBuf) Advance(n int) {\n\tb.tex.Lock()\n\tdefer b.tex.Unlock()\n\n\tb.unatomic_advance(n)\n}","language":"go"}
{"code":"func (c *Controller) Run(stop <-chan os.Signal, changes <-chan config.Delta) {\n\tfor {\n\t\tselect {\n\t\tcase change := <-changes:\n\t\t\tstart := time.Now()\n\t\t\tif err := c.reconcile(change); err != nil {\n\t\t\t\tlogrus.WithError(err).Error(\"Error reconciling statuses.\")\n\t\t\t}\n\t\t\tlogrus.WithField(\"duration\", fmt.Sprintf(\"%v\", time.Since(start))).Info(\"Statuses reconciled\")\n\t\tcase <-stop:\n\t\t\tlogrus.Info(\"status-reconciler is shutting down...\")\n\t\t\treturn\n\t\t}\n\t}\n}","language":"go"}
{"code":"def split_by_3(self, number):\n        \"\"\"\n        starting here, it groups the number by three from the tail\n        '1234567' -> (('1',),('234',),('567',))\n        :param number:str\n        :rtype:tuple\n        \"\"\"\n        blocks = ()\n        length = len(number)\n\n        if length < 3:\n            blocks += ((number,),)\n        else:\n            len_of_first_block = length % 3\n\n            if len_of_first_block > 0:\n                first_block = number[0:len_of_first_block],\n                blocks += first_block,\n\n            for i in range(len_of_first_block, length, 3):\n                next_block = (number[i:i + 3],),\n                blocks += next_block\n\n        return blocks","language":"python"}
{"code":"public function timeLoaded($module)\n    {\n        $module = Inflector::camelize($module);\n\n        if (!isset($this->loadedModules[$module])) {\n            return false;\n        }\n\n        return $this->loadedModules[$module]['loaded'];\n    }","language":"php"}
{"code":"def point_mul(s, pa)\n      pq = [0, 1, 1, 0]  # Neutral element\n      while s > 0 do\n        pq = point_add(pq, pa) unless (s & 1).equal? 0\n        pa = point_add(pa, pa)\n        s >>= 1\n      end\n      return pq\n    end","language":"ruby"}
{"code":"function fetchSingleValue($default = 0, $throwException = false)\n    {\n        $row = $this->fetchRow();\n        if ($row) {\n            return reset($row);\n        } elseif (!$throwException) {\n            return $default;\n        } else {\n            throw new RecordNotFoundException('Record not found');\n        }\n    }","language":"php"}
{"code":"function currentTreeEmpty(info) {\n    return !findChild(info, info.currentTree.rootData.children, function (v) {\n      return v;\n    });\n  }","language":"javascript"}
{"code":"@SuppressWarnings(\"deprecation\")\n  @Override\n  public void stopTransaction(final Conclusion conclusion) {\n    makeActive();\n\n    if (getDatabase().isClosed() || getDatabase().getTransaction() instanceof OTransactionNoTx\n        || getDatabase().getTransaction().getStatus() != TXSTATUS.BEGUN)\n      return;\n\n    if (Conclusion.SUCCESS == conclusion)\n      commit();\n    else\n      rollback();\n  }","language":"java"}
{"code":"protected function getLocation(array $position): string\n    {\n        return sprintf(\n                'Line:%s; column:%s; file:%s.',\n                $position['start_line'],\n                $position['start_in'],\n                $this->sourceFile ?: null\n            ).\n            ($this->sourceFile ? $this->getLocationSource($position) : null);\n    }","language":"php"}
{"code":"func (nz *normalizer) WalkStatement(node SQLNode) (bool, error) {\n\tswitch node := node.(type) {\n\tcase *Select:\n\t\t_ = Walk(nz.WalkSelect, node)\n\t\t\/\/ Don't continue\n\t\treturn false, nil\n\tcase *SQLVal:\n\t\tnz.convertSQLVal(node)\n\tcase *ComparisonExpr:\n\t\tnz.convertComparison(node)\n\t}\n\treturn true, nil\n}","language":"go"}
{"code":"public function isSubclassOf($class)\n    {\n        $realParentClassNames = $this->betterReflectionObject->getParentClassNames();\n\n        $parentClassNames = array_combine(array_map(static function (string $parentClassName) : string {\n            return strtolower($parentClassName);\n        }, $realParentClassNames), $realParentClassNames);\n\n        $realParentClassName = $parentClassNames[strtolower($class)] ?? $class;\n\n        return $this->betterReflectionObject->isSubclassOf($realParentClassName);\n    }","language":"php"}
{"code":"protected function has_changes( $old, $new ) {\n\n\t\tforeach ( $new as $key => $value ) {\n\t\t\tif ( $value !== $old[ $key ] && ! $this->numerically_equivalent( $value, $old[ $key ] ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}","language":"php"}
{"code":"def add_biomart_parser(subparsers):\n    \"\"\"Add function 'biomart' argument parsers.\"\"\"\n\n    argparser_biomart = subparsers.add_parser(\"biomart\", help=\"Using BioMart API to convert gene ids.\")\n\n    # group for required options.\n    biomart_opt = argparser_biomart.add_argument_group(\"Input arguments\")\n    biomart_opt.add_argument(\"-f\", \"--filter\", action='store', nargs=2, dest='filter',\n                             required=True, metavar=('NAME', 'VALUE'),\n                             help=\"\"\"Which filter to use. Input filter name, and value.\n                                     If multi-value required, separate each value by comma.\n                                     If value is a txt file, then one ID per row, exclude header.\"\"\")                             \n    biomart_opt.add_argument(\"-a\", \"--attributes\", action=\"store\", dest=\"attrs\", type=str, required=True, metavar='ATTR',\n                             help=\"Which attribute(s) to retrieve. Separate each attr by comma.\")\n    biomart_opt.add_argument(\"-o\", \"--ofile\", dest=\"ofile\", type=str, required=True, help=\"Output file name\")                               \n    biomart_opt.add_argument(\"-d\", \"--dataset\", action=\"store\", dest=\"bg\", type=str, default='hsapiens_gene_ensembl', metavar='DATA',\n                             help=\"Which dataset to use. Default: hsapiens_gene_ensembl\")\n    biomart_opt.add_argument(\"--host\", action=\"store\", dest=\"host\", type=str, default='www.ensembl.org', metavar='HOST',\n                             help=\"Which host to use. Select from {'www.ensembl.org', 'asia.ensembl.org', 'useast.ensembl.org'}.\")\n    biomart_opt.add_argument(\"-m\", \"--mart\", action=\"store\", dest=\"mart\", type=str, metavar='MART',\n                             default=\"ENSEMBL_MART_ENSEMBL\", help=\"Which mart to use. Default: ENSEMBL_MART_ENSEMBL.\")\n    biomart_opt.add_argument(\"-v\", \"--verbose\", action=\"store_true\", default=False, dest='verbose',\n                             help=\"Increase output verbosity, print out progress of your job\", )","language":"python"}
{"code":"def jqgrid_properties\n      vals = {}\n      vals[:ajaxGridOptions] = ajax_grid_options if ajax_grid_options\n\n      # data and request options\n      vals[:url] = url if url\n      vals[:editurl] = url if editable\n      vals[:restful] = true if restful\n      vals[:inline_edit] = inline_edit if inline_edit.present?\n      vals[:postData] = {:grid => name, :datatype => data_type} #identify which grid making the request\n      vals[:colNames] = colNames if colNames.present?\n      vals[:colModel] = column_model if colModel.present?\n      vals[:datatype] = data_type if data_type\n      if data_format.present?\n        case data_type\n          when :xml\n            vals[:xmlReader] = data_format\n          when :json\n            vals[:jsonReader] = data_format\n        end\n      end\n\n      vals[:loadonce] = load_once if load_once\n\n      vals[:sortname] = sort_by if sort_by\n      vals[:sortorder] = sort_order if sort_order && sort_by\n      vals[:rowNum] = rows_per_page if rows_per_page\n      vals[:rowTotal] = total_rows if total_rows\n      vals[:page] = current_page if current_page\n\n      # grid options\n      vals[:height] = height if height\n      vals[:gridview] = grid_view # faster views, NOTE theres cases when this needs to be disabled\n\n      case width_fit\n        when :fitted\n          #vals[:autowidth]    = false #default\n          #vals[:shrinkToFit]  = true #default\n          vals[:forceFit] = true\n          vals[:width] = width if width\n\n        when :scroll\n          #vals[:autowidth]    = false #default\n          vals[:shrinkToFit] = false\n          #vals[:forceFit]     = #ignored by jqGrid\n          vals[:width] = width if width\n\n        else #when :fluid\n          vals[:autowidth] = true\n          #vals[:shrinkToFit]  = true #default\n          vals[:forceFit] = true\n          #vals[:width]        = is ignored\n          vals[:resizeStop] = 'javascript: gridify_fluid_recalc_width'\n      end\n\n      vals[:sortable] = true if arranger_type.include?(:sortable)\n\n      # header layer\n      vals[:caption] = title if title\n      vals[:hidegrid] = false unless collapsible\n      vals[:hiddengrid] = true if collapsed\n\n      # row formatting\n      vals[:altrows] = true if alt_rows\n      vals[:altclass] = alt_rows if alt_rows.is_a?(String)\n\n      vals[:rownumbers] = true if row_numbers\n      vals[:rownumWidth] = row_numbers if row_numbers.is_a?(Numeric)\n\n      if inline_edit\n        vals[:scrollrows] = true\n        vals[:multiselect] = true if multi_select\n        vals[:onSelectRow] = \"javascript: function(id, status) { if(id && id!==lastsel_#{dom_id}) { jQuery('##{dom_id}').jqGrid('restoreRow', lastsel_#{dom_id}); jQuery('##{dom_id}').jqGrid('editRow', id, true, #{inline_edit_handler}, #{error_handler}); lastsel_#{dom_id}=id}}\"\n      elsif select_rows #.present?\n        vals[:scrollrows] = true\n        vals[:onSelectRow] = select_rows\n        vals[:multiselect] = true if multi_select\n      else\n        vals[:hoverrows] = false\n        vals[:beforeSelectRow] = \"javascript: function(){ false; }\"\n      end\n\n      # pager layer\n      if pager\n        vals[:pager] = \"##{pager}\"\n        vals[:viewrecords] = true # display total records in the query (eg \"1 - 10 of 25\")\n        vals[:rowList] = paging_choices\n        if paging_controls.is_a?(Hash)\n          # allow override of jqGrid pager options\n          vals.merge!(paging_controls)\n        elsif !paging_controls\n          vals[:rowList] = []\n          vals[:pgbuttons] = false\n          vals[:pginput] = false\n          vals[:recordtext] = \"{2} records\"\n        end\n      end\n\n      if tree_grid\n        vals[:treeGrid] = tree_grid\n        vals[:gridview] = true\n        vals[:sortable] = false\n      end\n\n      #subgrid\n      if sub_grid\n        vals[:subGrid] = sub_grid\n        vals[:subGridUrl] = sub_grid_url\n        vals[:subGridModel] = sub_grid_model\n        vals[:gridview] = true\n      end\n\n      #events\n      #vals[:serializeGridData] = serialize_grid_data if serialize_grid_data\n\n      vals[:loadonce] = load_once if load_once\n\n      # allow override of native jqGrid options\n      vals.merge(jqgrid_options)\n\n\n    end","language":"ruby"}
{"code":"def init_connection_file(self):\n        \"\"\"find the connection file, and load the info if found.\n        \n        The current working directory and the current profile's security\n        directory will be searched for the file if it is not given by\n        absolute path.\n        \n        When attempting to connect to an existing kernel and the `--existing`\n        argument does not match an existing file, it will be interpreted as a\n        fileglob, and the matching file in the current profile's security dir\n        with the latest access time will be used.\n        \n        After this method is called, self.connection_file contains the *full path*\n        to the connection file, never just its name.\n        \"\"\"\n        if self.existing:\n            try:\n                cf = find_connection_file(self.existing)\n            except Exception:\n                self.log.critical(\"Could not find existing kernel connection file %s\", self.existing)\n                self.exit(1)\n            self.log.info(\"Connecting to existing kernel: %s\" % cf)\n            self.connection_file = cf\n        else:\n            # not existing, check if we are going to write the file\n            # and ensure that self.connection_file is a full path, not just the shortname\n            try:\n                cf = find_connection_file(self.connection_file)\n            except Exception:\n                # file might not exist\n                if self.connection_file == os.path.basename(self.connection_file):\n                    # just shortname, put it in security dir\n                    cf = os.path.join(self.profile_dir.security_dir, self.connection_file)\n                else:\n                    cf = self.connection_file\n                self.connection_file = cf\n        \n        # should load_connection_file only be used for existing?\n        # as it is now, this allows reusing ports if an existing\n        # file is requested\n        try:\n            self.load_connection_file()\n        except Exception:\n            self.log.error(\"Failed to load connection file: %r\", self.connection_file, exc_info=True)\n            self.exit(1)","language":"python"}
{"code":"def resource_path(name)\n      local = File.join(resources_path, name)\n\n      if File.exist?(local)\n        log.info(log_key) { \"Using local resource `#{name}' from `#{local}'\" }\n        local\n      else\n        log.debug(log_key) { \"Using vendored resource `#{name}'\" }\n        Omnibus.source_root.join(\"resources\/#{id}\/#{name}\").to_s\n      end\n    end","language":"ruby"}
{"code":"def last_menu_at_depth(depth)\n      menu = self\n      depth.times { menu = menu.children.last }\n      menu\n    end","language":"ruby"}
{"code":"def map(self, path):\n        \"\"\"Map `path` through the aliases.\n\n        `path` is checked against all of the patterns.  The first pattern to\n        match is used to replace the root of the path with the result root.\n        Only one pattern is ever used.  If no patterns match, `path` is\n        returned unchanged.\n\n        The separator style in the result is made to match that of the result\n        in the alias.\n\n        \"\"\"\n        for regex, result, pattern_sep, result_sep in self.aliases:\n            m = regex.match(path)\n            if m:\n                new = path.replace(m.group(0), result)\n                if pattern_sep != result_sep:\n                    new = new.replace(pattern_sep, result_sep)\n                if self.locator:\n                    new = self.locator.canonical_filename(new)\n                return new\n        return path","language":"python"}
{"code":"def _draw(self, mode, vertex_list=None):\n        '''Draw vertices in the domain.\n\n        If `vertex_list` is not specified, all vertices in the domain are\n        drawn.  This is the most efficient way to render primitives.\n\n        If `vertex_list` specifies a `VertexList`, only primitives in that\n        list will be drawn.\n\n        :Parameters:\n            `mode` : int\n                OpenGL drawing mode, e.g. ``GL_POINTS``, ``GL_LINES``, etc.\n            `vertex_list` : `VertexList`\n                Vertex list to draw, or ``None`` for all lists in this domain.\n\n        '''\n        glPushClientAttrib(GL_CLIENT_VERTEX_ARRAY_BIT)\n        for buffer, attributes in self.buffer_attributes:\n            buffer.bind()\n            for attribute in attributes:\n                attribute.enable()\n                attribute.set_pointer(attribute.buffer.ptr)\n        if vertexbuffer._workaround_vbo_finish:\n            glFinish()\n\n        if vertex_list is not None:\n            glDrawArrays(mode, vertex_list.start, vertex_list.count)\n        else:\n            starts, sizes = self.allocator.get_allocated_regions()\n            primcount = len(starts)\n            if primcount == 0:\n                pass\n            elif primcount == 1:\n                # Common case\n                glDrawArrays(mode, starts[0], int(sizes[0]))\n            elif gl_info.have_version(1, 4):\n                starts = (GLint * primcount)(*starts)\n                sizes = (GLsizei * primcount)(*sizes)\n                glMultiDrawArrays(mode, starts, sizes, primcount)\n            else:\n                for start, size in zip(starts, sizes):\n                    glDrawArrays(mode, start, size)\n\n        for buffer, _ in self.buffer_attributes:\n            buffer.unbind()\n        glPopClientAttrib()","language":"python"}
{"code":"func (u Asset) MustAlphaNum4() AssetAlphaNum4 {\n\tval, ok := u.GetAlphaNum4()\n\n\tif !ok {\n\t\tpanic(\"arm AlphaNum4 is not set\")\n\t}\n\n\treturn val\n}","language":"go"}
{"code":"def find(self, item, logical=False):\n        \"\"\"Find files using :attr:`finders` registry. The ``item`` parameter\n        can be an instance of :class:`~gears.asset_attributes.AssetAttributes`\n        class, a path to the asset or a logical path to the asset. If ``item``\n        is a logical path, `logical` parameter must be set to ``True``.\n\n        Returns a tuple with :class:`~gears.asset_attributes.AssetAttributes`\n        instance for found file path as first item, and absolute path to this\n        file as second item.\n\n        If nothing is found, :class:`gears.exceptions.FileNotFound` exception\n        is rased.\n        \"\"\"\n        if isinstance(item, AssetAttributes):\n            for path in item.search_paths:\n                try:\n                    return self.find(path, logical)\n                except FileNotFound:\n                    continue\n            raise FileNotFound(item.path)\n        if logical:\n            asset_attributes = AssetAttributes(self, item)\n            suffixes = self.suffixes.find(asset_attributes.mimetype)\n            if not suffixes:\n                return self.find(item)\n            path = asset_attributes.path_without_suffix\n            for suffix in suffixes:\n                try:\n                    return self.find(path + suffix)\n                except FileNotFound:\n                    continue\n        else:\n            for finder in self.finders:\n                try:\n                    absolute_path = finder.find(item)\n                except FileNotFound:\n                    continue\n                return AssetAttributes(self, item), absolute_path\n        raise FileNotFound(item)","language":"python"}
{"code":"public function validateAttribute($model, $attribute)\n    {\n        $result = $this->validateValue($model->$attribute);\n        if ($result instanceof ExtendedPromiseInterface) {\n            return $result->then(function($_result) use ($model, $attribute) {\n                if (!empty($_result)) {\n                    $this->addError($model, $attribute, $_result[0], $_result[1]);\n                }\n            });\n        }\n        if (!empty($result)) {\n            $this->addError($model, $attribute, $result[0], $result[1]);\n        }\n        return null;\n    }","language":"php"}
{"code":"public function init()\n    {\n        \/\/ \u5982\u679c\u5f53\u524d\u8fd0\u884c\u73af\u5883\u662fCLI\uff0c\u90a3\u4e48\u5c31\u4f1a\u6ca1\u6709\u521d\u59cb\u8bf7\u6c42\u8fd9\u4e2a\u6982\u5ff5\n        if ( ! self::$initialRequest)\n        {\n            self::$initialRequest = $this;\n            $this->initial = true;\n            $this->message->setHeaders(Http::requestHeaders());\n        }\n    }","language":"php"}
{"code":"private void enlarge() {\n\t\tint oldCapacity = keys.length;\n\t\tif (oldCapacity == LinearProbing.MAXIMUM_CAPACITY)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Map cannot grow beyond capacity: \"\n\t\t\t\t\t\t\t+ LinearProbing.MAXIMUM_CAPACITY);\n\t\tK oldKeys[] = keys;\n\t\tV oldValues[] = values;\n\t\tint newCapacity = oldCapacity << 1;\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tK newKeys[] = (K[]) new Object[newCapacity];\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tV newValues[] = (V[]) new Object[newCapacity];\n\t\tfor (int i = 0; i < oldCapacity; i++) {\n\t\t\tK key = oldKeys[i];\n\t\t\tif (key != null)\n\t\t\t\tputKeyValue(newKeys, newValues, key, oldValues[i]);\n\t\t}\n\t\tthis.keys = newKeys;\n\t\tthis.values = newValues;\n\t}","language":"java"}
{"code":"function fixRedirectPost() {\n        \/\/ Permament Redirect\n        response.statusCode = 301;\n        response.setHeader(\n            'Location'\n          , path.normalize(servepath + '\/' + permalinkify(request.query.blogger))\n        );\n        response.end();\n      }","language":"javascript"}
{"code":"def copy(self, dest, symlinks=False):\n        \"\"\" Copy to destination directory recursively.\n        If symlinks is true, symbolic links in the source tree are represented\n        as symbolic links in the new tree, but the metadata of the original\n        links is NOT copied; if false or omitted, the contents and metadata of\n        the linked files are copied to the new tree.\n        \"\"\"\n        if isinstance(dest, Directory):\n            dest = dest.get_name()\n\n        shutil.copytree(self.dirname, dest)","language":"python"}
{"code":"public static void collectPayPalDeviceData(final BraintreeFragment fragment, final BraintreeResponseListener<String> listener) {\n        final JSONObject deviceData = new JSONObject();\n\n        try {\n            String clientMetadataId = getPayPalClientMetadataId(fragment.getApplicationContext());\n            if (!TextUtils.isEmpty(clientMetadataId)) {\n                deviceData.put(CORRELATION_ID_KEY, clientMetadataId);\n            }\n        } catch (JSONException ignored) {}\n\n        listener.onResponse(deviceData.toString());\n    }","language":"java"}
{"code":"protected function resolveRelations($dataTypeContent, DataType $dataType)\n    {\n        \/\/ In case of using server-side pagination, we need to work on the Collection (BROWSE)\n        if ($dataTypeContent instanceof LengthAwarePaginator) {\n            $dataTypeCollection = $dataTypeContent->getCollection();\n        }\n        \/\/ If it's a model just make the changes directly on it (READ \/ EDIT)\n        elseif ($dataTypeContent instanceof Model) {\n            return $dataTypeContent;\n        }\n        \/\/ Or we assume it's a Collection\n        else {\n            $dataTypeCollection = $dataTypeContent;\n        }\n\n        return $dataTypeContent instanceof LengthAwarePaginator ? $dataTypeContent->setCollection($dataTypeCollection) : $dataTypeCollection;\n    }","language":"php"}
{"code":"public function boot(Factory $view)\n    {\n        foreach ($this->composers as $callback => $views) {\n            $view->composer($views, $callback);\n        }\n    }","language":"php"}
{"code":"def to_scientific_tuple(number):\n    \"\"\"\n    Return mantissa and exponent of a number in scientific notation.\n\n    Full precision is maintained if the number is represented as a string\n\n    :param number: Number\n    :type  number: integer, float or string\n\n    :rtype: named tuple in which the first item is the mantissa (*string*)\n            and the second item is the exponent (*integer*) of the number\n            when expressed in scientific notation\n\n    For example:\n\n        >>> import peng\n        >>> peng.to_scientific_tuple('135.56E-8')\n        NumComp(mant='1.3556', exp=-6)\n        >>> peng.to_scientific_tuple(0.0000013556)\n        NumComp(mant='1.3556', exp=-6)\n    \"\"\"\n    # pylint: disable=W0632\n    convert = not isinstance(number, str)\n    # Detect zero and return, simplifies subsequent algorithm\n    if (convert and (number == 0)) or (\n        (not convert) and (not number.strip(\"0\").strip(\".\"))\n    ):\n        return (\"0\", 0)\n    # Break down number into its components, use Decimal type to\n    # preserve resolution:\n    # sign  : 0 -> +, 1 -> -\n    # digits: tuple with digits of number\n    # exp   : exponent that gives null fractional part\n    sign, digits, exp = Decimal(str(number) if convert else number).as_tuple()\n    mant = (\n        \"{sign}{itg}{frac}\".format(\n            sign=\"-\" if sign else \"\",\n            itg=digits[0],\n            frac=(\n                \".{frac}\".format(frac=\"\".join([str(num) for num in digits[1:]]))\n                if len(digits) > 1\n                else \"\"\n            ),\n        )\n        .rstrip(\"0\")\n        .rstrip(\".\")\n    )\n    exp += len(digits) - 1\n    return NumComp(mant, exp)","language":"python"}
{"code":"def link content = nil, options = {}, html_options = nil, &block\n      block_given? ? content.merge!({ nav_type: type }) : options.merge!({ nav_type: type })\n      @items << NavLink.new(content, options, html_options, &block)\n    end","language":"ruby"}
{"code":"function wrapCondition(decision, lineId, parentPos) {\n\t\tif (options.condition === false) {\n\t\t\t\/\/ condition coverage is disabled\n\t\t\treturn decision;\n\t\t}\n\n\t\tif (isSingleCondition(decision)) {\n\t\t\tvar pos = getPositionStart(decision, parentPos);\n\t\t\tvar condId = lineId + \":\" + pos;\n\n\t\t\tanalyzing.push(decision);\n\t\t\tallConditions.push(condId);\n\t\t\treturn [\"call\",\n                [\"dot\", [\"name\", \"require\"], \"coverage_condition\"],\n\t\t\t\t[\n\t\t\t\t\t[ \"string\", moduleName ],\n\t\t\t\t\t[ \"string\", condId],\n\t\t\t\t\tdecision\n\t\t\t\t]\n\t\t\t];\n\t\t} else {\n\t\t\tdecision[2] = wrapCondition(decision[2], lineId, getPositionStart(decision, parentPos));\n\t\t\tdecision[3] = wrapCondition(decision[3], lineId, getPositionEnd(decision, parentPos));\n\n\t\t\treturn decision;\n\t\t}\n\t}","language":"javascript"}
{"code":"func (a *apiServer) getScope(ctx context.Context, subject string, acl *authclient.ACL) (authclient.Scope, error) {\n\t\/\/ Get scope based on user's direct access\n\tscope := acl.Entries[subject]\n\n\t\/\/ Expand scope based on group access\n\tgroups, err := a.getGroups(ctx, subject)\n\tif err != nil {\n\t\treturn authclient.Scope_NONE, fmt.Errorf(\"could not retrieve caller's \"+\n\t\t\t\"group memberships: %v\", err)\n\t}\n\tfor _, g := range groups {\n\t\tgroupScope := acl.Entries[g]\n\t\tif scope < groupScope {\n\t\t\tscope = groupScope\n\t\t}\n\t}\n\treturn scope, nil\n}","language":"go"}
{"code":"def default_configfile(base_filename):\n    '''Return fully expanded configuration filename location for\n    base_filename. python2 and  python3 debuggers share the smae\n    directory: ~\/.config\/trepan.py\n    '''\n    file_dir = os.path.join(os.environ.get('HOME', '~'), '.config', 'trepanpy')\n    file_dir = Mclifns.path_expanduser_abs(file_dir)\n\n    if not os.path.isdir(file_dir):\n        os.makedirs(file_dir, mode=0o755)\n    return os.path.join(file_dir, base_filename)","language":"python"}
{"code":"def get_meteor_ids(model, object_ids):\n    \"\"\"Return Alea ID mapping for all given ids of specified model.\"\"\"\n    # Django model._meta is now public API -> pylint: disable=W0212\n    meta = model._meta\n    result = collections.OrderedDict(\n        (str(obj_pk), None)\n        for obj_pk\n        in object_ids\n    )\n    if isinstance(meta.pk, AleaIdField):\n        # primary_key is an AleaIdField, use it.\n        return collections.OrderedDict(\n            (obj_pk, obj_pk) for obj_pk in object_ids\n        )\n    alea_unique_fields = [\n        field\n        for field in meta.local_fields\n        if isinstance(field, AleaIdField) and field.unique and not field.null\n    ]\n    if len(alea_unique_fields) == 1:\n        aid = alea_unique_fields[0].name\n        query = model.objects.filter(\n            pk__in=object_ids,\n        ).values_list('pk', aid)\n    else:\n        content_type = ContentType.objects.get_for_model(model)\n        query = ObjectMapping.objects.filter(\n            content_type=content_type,\n            object_id__in=list(result)\n        ).values_list('object_id', 'meteor_id')\n    for obj_pk, meteor_id in query:\n        result[str(obj_pk)] = meteor_id\n    for obj_pk, meteor_id in result.items():\n        if meteor_id is None:\n            result[obj_pk] = get_meteor_id(model, obj_pk)\n    return result","language":"python"}
{"code":"func (v QuerySelectorReturns) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoDom19(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}","language":"go"}
{"code":"@Generated(value = \"com.sun.tools.xjc.Driver\", date = \"2018-10-12T02:52:47+02:00\", comments = \"JAXB RI v2.2.11\")\n    public TypenHausKategorienTyp getObjektkategorie2() {\n        if (objektkategorie2 == null) {\n            return TypenHausKategorienTyp.KEINE_ANGABE;\n        } else {\n            return objektkategorie2;\n        }\n    }","language":"java"}
{"code":"func before(i, j ScheduleItem) bool {\n\tiEnd := i.Time().UnixNano() + i.Duration().Nanoseconds()\n\tjStart := j.Time().UnixNano()\n\tif i, ok := i.(ScheduleItemWithTimestamp); ok {\n\t\tif j, ok := j.(ScheduleItemWithTimestamp); ok {\n\t\t\tiEnd = i.Timestamp() + i.Duration().Nanoseconds()\n\t\t\tjStart = j.Timestamp()\n\t\t}\n\t}\n\treturn iEnd < jStart\n}","language":"go"}
{"code":"func (aid *AccountId) LedgerKey() (ret LedgerKey) {\n\terr := ret.SetAccount(*aid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn\n}","language":"go"}
{"code":"public boolean\n    parse(String input)\n            throws SAXException\n    {\n        try {\n            DocumentBuilderFactory domfactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder dombuilder = domfactory.newDocumentBuilder();\n            StringReader rdr = new StringReader(input);\n            InputSource src = new InputSource(rdr);\n            Document doc = dombuilder.parse(src);\n            doc.getDocumentElement().normalize();\n            rdr.close();\n            parseresponse(doc.getDocumentElement());\n            return true;\n        } catch (ParserConfigurationException | IOException e) {\n            throw new SAXException(e);\n        }\n    }","language":"java"}
{"code":"def task_info(dag_id, task_id):\n    \"\"\"Returns a JSON with a task's public instance variables. \"\"\"\n    try:\n        info = get_task(dag_id, task_id)\n    except AirflowException as err:\n        _log.info(err)\n        response = jsonify(error=\"{}\".format(err))\n        response.status_code = err.status_code\n        return response\n\n    # JSONify and return.\n    fields = {k: str(v)\n              for k, v in vars(info).items()\n              if not k.startswith('_')}\n    return jsonify(fields)","language":"python"}
{"code":"def vector_op(vector, vector2, switch = false, safe = true, &block)\n      if get_rank(vector) < get_rank(vector2) # upgrade rank of A\n        duplicated = Array.new(vector2.size) {\n          vector\n        }\n        return vector_op(duplicated, vector2, switch, &block)\n      end\n\n      return yield(vector, vector2) unless vector.is_a?(Array)\n\n      vector.each_with_index.collect { |input, index|\n        next vector_op(input, vector2, switch, &block) if input.is_a?(Array) && get_rank(vector) > get_rank(vector2)\n\n        if safe && vector2.is_a?(Array)\n          next nil if vector2.size != 1 && index >= vector2.size\n        end\n\n        z = if vector2.is_a?(Array)\n          if index < vector2.size\n            vector2[index]\n          else\n            raise \"incompatible tensor shapes used during op\" if vector2.size != 1\n            vector2[0]\n          end\n        else\n          vector2\n        end\n\n        if input.is_a?(Array)\n          vector_op(input, z, switch, &block)\n        else\n          switch ? yield(z, input) : yield(input, z)\n        end\n      }.compact\n    end","language":"ruby"}
{"code":"def data(self, **query):\n        \"\"\"Query for Data object annotation.\"\"\"\n        objects = self.cache['objects']\n        data = self.api.data.get(**query)['objects']\n        data_objects = []\n\n        for d in data:\n            _id = d['id']\n            if _id in objects:\n                # Update existing object\n                objects[_id].update(d)\n            else:\n                # Insert new object\n                objects[_id] = GenData(d, self)\n\n            data_objects.append(objects[_id])\n\n        # Hydrate reference fields\n        for d in data_objects:\n            count += 1\n            while True:\n                ref_annotation = {}\n                remove_annotation = []\n                for path, ann in d.annotation.items():\n                    if ann['type'].startswith('data:'):\n                        # Referenced data object found\n                        # Copy annotation\n                        _id = ann['value']\n                        if _id not in objects:\n                            try:\n                                d_tmp = self.api.data(_id).get()\n                            except slumber.exceptions.HttpClientError as ex:\n                                if ex.response.status_code == 404:\n                                    continue\n                                else:\n                                    raise ex\n\n                            objects[_id] = GenData(d_tmp, self)\n\n                        annotation = objects[_id].annotation\n                        ref_annotation.update({path + '.' + k: v for k, v in annotation.items()})\n                        remove_annotation.append(path)\n                if ref_annotation:\n                    d.annotation.update(ref_annotation)\n                    for path in remove_annotation:\n                        del d.annotation[path]\n                else:\n                    break\n\n        return data_objects","language":"python"}
{"code":"function multipart (handler, done, opts) {\n    if (typeof handler !== 'function') {\n      throw new Error('handler must be a function')\n    }\n\n    if (typeof done !== 'function') {\n      throw new Error('the callback must be a function')\n    }\n\n    if (!this.isMultipart()) {\n      done(new Error('the request is not multipart'))\n      return\n    }\n\n    const log = this.log\n\n    log.debug('starting multipart parsing')\n\n    const req = this.req\n\n    const busboyOptions = deepmerge.all([{ headers: req.headers }, options || {}, opts || {}])\n    const stream = new Busboy(busboyOptions)\n    var completed = false\n    var files = 0\n    var count = 0\n    var callDoneOnNextEos = false\n\n    req.on('error', function (err) {\n      stream.destroy()\n      if (!completed) {\n        completed = true\n        done(err)\n      }\n    })\n\n    stream.on('finish', function () {\n      log.debug('finished multipart parsing')\n      if (!completed && count === files) {\n        completed = true\n        setImmediate(done)\n      } else {\n        callDoneOnNextEos = true\n      }\n    })\n\n    stream.on('file', wrap)\n\n    req.pipe(stream)\n\n    function wrap (field, file, filename, encoding, mimetype) {\n      log.debug({ field, filename, encoding, mimetype }, 'parsing part')\n      files++\n      eos(file, waitForFiles)\n      handler(field, file, filename, encoding, mimetype)\n    }\n\n    function waitForFiles (err) {\n      if (err) {\n        completed = true\n        done(err)\n        return\n      }\n\n      if (completed) {\n        return\n      }\n\n      ++count\n      if (callDoneOnNextEos && count === files) {\n        completed = true\n        done()\n      }\n    }\n\n    return stream\n  }","language":"javascript"}
{"code":"func (r *stringSlice) Set(value string) error {\n\tr.data = append(r.data, value)\n\treturn nil\n}","language":"go"}
{"code":"private function getCalleeData($trace, $pos = 0) {\n        $traceRow = isset($trace[$pos]) ? $trace[$pos] : end($trace);\n        $file = isset($traceRow['file']) ? $traceRow['file'] : '[internal function]';\n        $line = isset($traceRow['line']) ? '#' . $traceRow['line'] : '';\n        $str = $file . \" \" . $line;\n        return $str;\n    }","language":"php"}
{"code":"public function execute(Expression $expr)\n    {\n        \/\/ If custom connection is set, execute again using that\n        if ($this->connection && $this->connection !== $this) {\n            return $expr->execute($this->connection);\n        }\n\n        throw new Exception('Queries cannot be executed through this connection');\n    }","language":"php"}
{"code":"def mask(self, image, nan_to_num=True, layers=None, in_global_mask=False):\n        \"\"\" Vectorize an image and mask out all invalid voxels.\n\n        Args:\n            images: The image to vectorize and mask. Input can be any object\n                handled by get_image().\n            layers: Which mask layers to use (specified as int, string, or\n                list of ints and strings). When None, applies the conjunction\n                of all layers.\n            nan_to_num: boolean indicating whether to convert NaNs to 0.\n            in_global_mask: Whether to return the resulting masked vector in\n                the globally masked space (i.e., n_voxels =\n                len(self.global_mask)). If False (default), returns in the full\n                image space (i.e., n_voxels = len(self.volume)).\n        Returns:\n          A 1D NumPy array of in-mask voxels.\n        \"\"\"\n        self.set_mask(layers)\n        image = self.get_image(image, output='vector')\n\n        if in_global_mask:\n            masked_data = image[self.global_mask]\n            masked_data[~self.get_mask(in_global_mask=True)] = 0\n        else:\n            masked_data = image[self.current_mask]\n\n        if nan_to_num:\n            masked_data = np.nan_to_num(masked_data)\n\n        return masked_data","language":"python"}
{"code":"private static byte[] fromHex(final String hex) {\n\t\tfinal byte[] binary = new byte[hex.length() \/ 2];\n\t\tfor (int i = 0; i < binary.length; i++) {\n\t\t\tbinary[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);\n\t\t}\n\t\treturn binary;\n\t}","language":"java"}
{"code":"def model_choice_field_data(field, **kwargs):\n    \"\"\"\n    Return one of first ten items for field queryset\n    \"\"\"\n    data = list(field.queryset[:10])\n    if data:\n        return random.choice(data)\n    else:\n        raise TypeError('No %s available in queryset' % field.queryset.model)","language":"python"}
{"code":"def produce_report(*args)\n      # Check xcov availability, install it if needed\n      `gem install xcov` unless xcov_available?\n      unless xcov_available?\n        puts \"xcov is not available on this machine\"\n        return\n      end\n\n      require \"xcov\"\n      require \"fastlane_core\"\n\n      # Init Xcov\n      config = FastlaneCore::Configuration.create(Xcov::Options.available_options, convert_options(args.first))\n      Xcov.config = config\n      Xcov.ignore_handler = Xcov::IgnoreHandler.new\n\n      # Init project\n      manager =  Xcov::Manager.new(config)\n\n      # Parse .xccoverage\n      report_json = manager.parse_xccoverage\n\n      # Map and process report\n      process_report(Xcov::Report.map(report_json))\n    end","language":"ruby"}
{"code":"def viterbi_discriminative(prob, transition, p_state=None, p_init=None, return_logp=False):\n    '''Viterbi decoding from discriminative state predictions.\n\n    Given a sequence of conditional state predictions `prob[s, t]`,\n    indicating the conditional likelihood of state `s` given the\n    observation at time `t`, and a transition matrix `transition[i, j]`\n    which encodes the conditional probability of moving from state `i`\n    to state `j`, the Viterbi algorithm computes the most likely sequence\n    of states from the observations.\n\n    This implementation uses the standard Viterbi decoding algorithm\n    for observation likelihood sequences, under the assumption that\n    `P[Obs(t) | State(t) = s]` is proportional to\n    `P[State(t) = s | Obs(t)] \/ P[State(t) = s]`, where the denominator\n    is the marginal probability of state `s` occurring as given by `p_state`.\n\n    Parameters\n    ----------\n    prob : np.ndarray [shape=(n_states, n_steps), non-negative]\n        `prob[s, t]` is the probability of state `s` conditional on\n        the observation at time `t`.\n        Must be non-negative and sum to 1 along each column.\n\n    transition : np.ndarray [shape=(n_states, n_states), non-negative]\n        `transition[i, j]` is the probability of a transition from i->j.\n        Each row must sum to 1.\n\n    p_state : np.ndarray [shape=(n_states,)]\n        Optional: marginal probability distribution over states,\n        must be non-negative and sum to 1.\n        If not provided, a uniform distribution is assumed.\n\n    p_init : np.ndarray [shape=(n_states,)]\n        Optional: initial state distribution.\n        If not provided, it is assumed to be uniform.\n\n    return_logp : bool\n        If `True`, return the log-likelihood of the state sequence.\n\n    Returns\n    -------\n    Either `states` or `(states, logp)`:\n\n    states : np.ndarray [shape=(n_steps,)]\n        The most likely state sequence.\n\n    logp : scalar [float]\n        If `return_logp=True`, the log probability of `states` given\n        the observations.\n\n    See Also\n    --------\n    viterbi : Viterbi decoding from observation likelihoods\n    viterbi_binary: Viterbi decoding for multi-label, conditional state likelihoods\n\n    Examples\n    --------\n    This example constructs a simple, template-based discriminative chord estimator,\n    using CENS chroma as input features.\n\n    .. note:: this chord model is not accurate enough to use in practice. It is only\n            intended to demonstrate how to use discriminative Viterbi decoding.\n\n    >>> # Create templates for major, minor, and no-chord qualities\n    >>> maj_template = np.array([1,0,0, 0,1,0, 0,1,0, 0,0,0])\n    >>> min_template = np.array([1,0,0, 1,0,0, 0,1,0, 0,0,0])\n    >>> N_template   = np.array([1,1,1, 1,1,1, 1,1,1, 1,1,1.]) \/ 4.\n    >>> # Generate the weighting matrix that maps chroma to labels\n    >>> weights = np.zeros((25, 12), dtype=float)\n    >>> labels = ['C:maj', 'C#:maj', 'D:maj', 'D#:maj', 'E:maj', 'F:maj',\n    ...           'F#:maj', 'G:maj', 'G#:maj', 'A:maj', 'A#:maj', 'B:maj',\n    ...           'C:min', 'C#:min', 'D:min', 'D#:min', 'E:min', 'F:min',\n    ...           'F#:min', 'G:min', 'G#:min', 'A:min', 'A#:min', 'B:min',\n    ...           'N']\n    >>> for c in range(12):\n    ...     weights[c, :] = np.roll(maj_template, c) # c:maj\n    ...     weights[c + 12, :] = np.roll(min_template, c)  # c:min\n    >>> weights[-1] = N_template  # the last row is the no-chord class\n    >>> # Make a self-loop transition matrix over 25 states\n    >>> trans = librosa.sequence.transition_loop(25, 0.9)\n\n    >>> # Load in audio and make features\n    >>> y, sr = librosa.load(librosa.util.example_audio_file())\n    >>> chroma = librosa.feature.chroma_cens(y=y, sr=sr, bins_per_octave=36)\n    >>> # Map chroma (observations) to class (state) likelihoods\n    >>> probs = np.exp(weights.dot(chroma))  # P[class | chroma] proportional to exp(template' chroma)\n    >>> probs \/= probs.sum(axis=0, keepdims=True)  # probabilities must sum to 1 in each column\n    >>> # Compute independent frame-wise estimates\n    >>> chords_ind = np.argmax(probs, axis=0)\n    >>> # And viterbi estimates\n    >>> chords_vit = librosa.sequence.viterbi_discriminative(probs, trans)\n\n    >>> # Plot the features and prediction map\n    >>> import matplotlib.pyplot as plt\n    >>> plt.figure(figsize=(10, 6))\n    >>> plt.subplot(2,1,1)\n    >>> librosa.display.specshow(chroma, x_axis='time', y_axis='chroma')\n    >>> plt.colorbar()\n    >>> plt.subplot(2,1,2)\n    >>> librosa.display.specshow(weights, x_axis='chroma')\n    >>> plt.yticks(np.arange(25) + 0.5, labels)\n    >>> plt.ylabel('Chord')\n    >>> plt.colorbar()\n    >>> plt.tight_layout()\n\n    >>> # And plot the results\n    >>> plt.figure(figsize=(10, 4))\n    >>> librosa.display.specshow(probs, x_axis='time', cmap='gray')\n    >>> plt.colorbar()\n    >>> times = librosa.frames_to_time(np.arange(len(chords_vit)))\n    >>> plt.scatter(times, chords_ind + 0.75, color='lime', alpha=0.5, marker='+', s=15, label='Independent')\n    >>> plt.scatter(times, chords_vit + 0.25, color='deeppink', alpha=0.5, marker='o', s=15, label='Viterbi')\n    >>> plt.yticks(0.5 + np.unique(chords_vit), [labels[i] for i in np.unique(chords_vit)], va='center')\n    >>> plt.legend(loc='best')\n    >>> plt.tight_layout()\n\n    '''\n\n    n_states, n_steps = prob.shape\n\n    if transition.shape != (n_states, n_states):\n        raise ParameterError('transition.shape={}, must be '\n                             '(n_states, n_states)={}'.format(transition.shape,\n                                                              (n_states, n_states)))\n\n    if np.any(transition < 0) or not np.allclose(transition.sum(axis=1), 1):\n        raise ParameterError('Invalid transition matrix: must be non-negative '\n                             'and sum to 1 on each row.')\n\n    if np.any(prob < 0) or not np.allclose(prob.sum(axis=0), 1):\n        raise ParameterError('Invalid probability values: each column must '\n                             'sum to 1 and be non-negative')\n\n    states = np.zeros(n_steps, dtype=int)\n    values = np.zeros((n_steps, n_states), dtype=float)\n    ptr = np.zeros((n_steps, n_states), dtype=int)\n\n    # Compute log-likelihoods while avoiding log-underflow\n    epsilon = np.finfo(prob.dtype).tiny\n\n    # Compute marginal log probabilities while avoiding underflow\n    if p_state is None:\n        p_state = np.empty(n_states)\n        p_state.fill(1.\/n_states)\n    elif p_state.shape != (n_states,):\n        raise ParameterError('Marginal distribution p_state must have shape (n_states,). '\n                             'Got p_state.shape={}'.format(p_state.shape))\n    elif np.any(p_state < 0) or not np.allclose(p_state.sum(axis=-1), 1):\n        raise ParameterError('Invalid marginal state distribution: '\n                             'p_state={}'.format(p_state))\n\n    log_trans = np.log(transition + epsilon)\n    log_marginal = np.log(p_state + epsilon)\n\n    # By Bayes' rule, P[X | Y] * P[Y] = P[Y | X] * P[X]\n    # P[X] is constant for the sake of maximum likelihood inference\n    # and P[Y] is given by the marginal distribution p_state.\n    #\n    # So we have P[X | y] \\propto P[Y | x] \/ P[Y]\n    # if X = observation and Y = states, this can be done in log space as\n    # log P[X | y] \\propto \\log P[Y | x] - \\log P[Y]\n    log_prob = np.log(prob.T + epsilon) - log_marginal\n\n    if p_init is None:\n        p_init = np.empty(n_states)\n        p_init.fill(1.\/n_states)\n    elif np.any(p_init < 0) or not np.allclose(p_init.sum(), 1):\n        raise ParameterError('Invalid initial state distribution: '\n                             'p_init={}'.format(p_init))\n\n    log_p_init = np.log(p_init + epsilon)\n\n    _viterbi(log_prob, log_trans, log_p_init, states, values, ptr)\n\n    if return_logp:\n        return states, values[-1, states[-1]]\n\n    return states","language":"python"}
{"code":"static public String getManifestVersionNumber(File file) throws IOException {\n        JarFile jar = new JarFile(file);\n        Manifest manifest = jar.getManifest();\n        String versionNumber = null;\n        java.util.jar.Attributes attributes = manifest.getMainAttributes();\n        if (attributes!=null) {\n            Iterator it = attributes.keySet().iterator();\n            while (it.hasNext()) {\n                Attributes.Name key = (Attributes.Name)it.next();\n                String keyword = key.toString();\n                if (keyword.equals(\"Implementation-Version\") || keyword.equals(\"Bundle-Version\")){\n                    versionNumber = (String)attributes.get(key);\n                    break;\n                }\n            }\n        }\n        jar.close();\n        \n        if (versionNumber == null || versionNumber.equals(\"\")) {\n            return null;\n        }\n\n        return versionNumber;\n    }","language":"java"}
{"code":"def download_source\n      Log.debug { \"         Reading #{@source.url.green}\" }\n      zip = Tempfile.new('gtfs')\n      zip.binmode\n      zip << open(@source.url).read\n      zip.rewind\n\n      extract_to_tempfiles(zip)\n\n      Log.debug { \"Finished reading #{@source.url.green}\" }\n    rescue StandardException => e\n      Log.error(e.message)\n      raise e\n    ensure\n      zip.try(:close)\n    end","language":"ruby"}
{"code":"public static EmailAddress of(String address) {\n\t\taddress = address.trim();\n\n\t\tif (!StringUtil.endsWithChar(address, '>')) {\n\t\t\treturn new EmailAddress(null, address);\n\t\t}\n\n\t\tfinal int ndx = address.lastIndexOf('<');\n\t\tif (ndx == -1) {\n\t\t\treturn new EmailAddress(null, address);\n\t\t}\n\n\t\tString email = address.substring(ndx + 1, address.length() - 1);\n\t\tString personalName = address.substring(0, ndx).trim();\n\t\treturn new EmailAddress(personalName, email);\n\t}","language":"java"}
{"code":"function snapshotPreprocessor(basePath, loggerFactory) {\n  const logger = loggerFactory.create('preprocessor.snapshot');\n\n  return function (content, file, done) {\n    const root = snapshotSerializer.deserialize(content);\n    done(iifeWrapper('window.__snapshot__.addSuite(\"' + root.name + '\",' + JSON.stringify(root.suite) + ');'));\n  };\n}","language":"javascript"}
{"code":"func (v SeekAnimationsParams) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoAnimation3(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}","language":"go"}
{"code":"public Object execute(final Map<Object, Object> iArgs) {\r\n    if (attribute == null)\r\n      throw new OCommandExecutionException(\"Cannot execute the command because it has not been parsed yet\");\r\n\r\n    final ODatabaseDocumentInternal database = getDatabase();\r\n    database.checkSecurity(ORule.ResourceGeneric.DATABASE, ORole.PERMISSION_UPDATE);\r\n\r\n    database.setInternal(attribute, value);\r\n    return null;\r\n  }","language":"java"}
{"code":"function Metadata (options, controlConnection) {\n  if (!options) {\n    throw new errors.ArgumentError('Options are not defined');\n  }\n  Object.defineProperty(this, 'options', { value: options, enumerable: false, writable: false});\n  Object.defineProperty(this, 'controlConnection', { value: controlConnection, enumerable: false, writable: false});\n  this.keyspaces = {};\n  this.initialized = false;\n  this._schemaParser = schemaParserFactory.getByVersion(options, controlConnection, this.getUdt.bind(this));\n  const self = this;\n  this._preparedQueries = new PreparedQueries(options.maxPrepared, function () {\n    self.log.apply(self, arguments);\n  });\n}","language":"javascript"}
{"code":"final public function authLogin($username, $password, &$company_file, &$wait_before_next_update, &$min_run_every_n_seconds, $override = false)\n\t{\n\t\t$hookdata = array(\n\t\t\t'username' => $username, \n\t\t\t'password' => $password, \n\t\t\t'override' => $override, \n\t\t\t);\n\t\t$err = '';\n\t\t$this->_callHook(QUICKBOOKS_DRIVER_HOOK_AUTHLOGIN, null, $err, $hookdata);\n\t\t\n\t\treturn $this->_authLogin($username, $password, $company_file, $wait_before_next_update, $min_run_every_n_seconds, $override);\n\t}","language":"php"}
{"code":"public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefault(\n            'choice_attr',\n            function ($choiceValue, $key, $value) {\n                \/** @var ShippingMethod $choiceValue *\/\n                $calculatorName = $choiceValue->getCalculator();\n\n                \/** @var PickupCalculatorInterface $calculator *\/\n                $calculator = $this->calculatorRegistry->get($calculatorName);\n\n                $attr = [];\n                if ($calculator instanceof PickupCalculatorInterface) {\n                    $attr['class'] = 'pickup';\n                }\n\n                return $attr;\n            }\n        );\n    }","language":"php"}
{"code":"func parseUTCTime(bytes []byte) (ret time.Time, err error) {\n\ts := string(bytes)\n\n\tformatStr := \"0601021504Z0700\"\n\tret, err = time.Parse(formatStr, s)\n\tif err != nil {\n\t\tformatStr = \"060102150405Z0700\"\n\t\tret, err = time.Parse(formatStr, s)\n\t}\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif serialized := ret.Format(formatStr); serialized != s {\n\t\terr = fmt.Errorf(\"asn1: time did not serialize back to the original value and may be invalid: given %q, but serialized as %q\", s, serialized)\n\t\treturn\n\t}\n\n\tif ret.Year() >= 2050 {\n\t\t\/\/ UTCTime only encodes times prior to 2050. See https:\/\/tools.ietf.org\/html\/rfc5280#section-4.1.2.5.1\n\t\tret = ret.AddDate(-100, 0, 0)\n\t}\n\n\treturn\n}","language":"go"}
{"code":"func (api *API) PatternLocator(href string) *PatternLocator {\n\treturn &PatternLocator{Href(href), api}\n}","language":"go"}
{"code":"function run(cmd, opts) {\n    if (!SHELL_PATH) {\n        \/\/ If we cannot resolve shell, better to just crash\n        throw new Error('$SHELL environment variable is not set.');\n    }\n\n    opts = _.merge({\n        pipe: true,\n        cwd: undefined,\n        callback: function(child) {\n            \/\/ Since we return promise, we need to provide\n            \/\/ this callback if one wants to access the child\n            \/\/ process reference\n            \/\/ Called immediately after successful child process\n            \/\/ spawn\n        }\n    }, opts);\n\n    return new Promise(function(resolve, reject) {\n        var child;\n\n        try {\n            child = childProcess.spawn(SHELL_PATH, [EXECUTE_OPTION, cmd], {\n                cwd: opts.cwd,\n                stdio: opts.pipe ? 'inherit' : null\n            });\n        } catch (e) {\n            return Promise.reject(e);\n        }\n\n        opts.callback(child);\n\n        function errorHandler(err) {\n            child.removeListener('close', closeHandler);\n            reject(err);\n        }\n\n        function closeHandler(exitCode) {\n            child.removeListener('error', errorHandler);\n            resolve(exitCode);\n        }\n\n        child.once('error', errorHandler);\n        child.once('close', closeHandler);\n    });\n}","language":"javascript"}
{"code":"func (d boshReleaseDiffer) allJobNames() []string {\n\tjobNamesMap := make(map[string]string)\n\tvar addJobNames = func(br *release.BoshRelease) {\n\t\tif br != nil {\n\t\t\tfor jbname := range br.JobManifests {\n\t\t\t\tjobNamesMap[jbname] = jbname\n\t\t\t}\n\t\t}\n\t}\n\taddJobNames(d.release1)\n\taddJobNames(d.release2)\n\tvar jobNames []string\n\tfor jname := range jobNamesMap {\n\t\tjobNames = append(jobNames, jname)\n\t}\n\treturn jobNames\n}","language":"go"}
{"code":"public long getPendingFiles(LiveFile current) throws IOException{\n    \/\/Current will not be acceptable for roll files (if active file is without a counter\/date pattern)\n    \/\/and will be later renamed to a file with counter\/date suffix, if that is the case we should\n    \/\/return 0 as number of pending files\n    if (current == null || rollMode.isCurrentAcceptable(current.getPath().getFileName().toString())) {\n      return findToBeProcessedMatchingFiles(current!=null? current.refresh() : null).size();\n    }\n    return 0;\n  }","language":"java"}
{"code":"def run!(hash=nil)\n      @state = :not_checked\n      #@field.each do |field|\n        #if @state == :passed\n        #  break\n        #end\n        case @setting\n          when :tag_name_required, :tag_name_suggested\n            content = nil\n            if hash\n              #puts \"#{@depth.inspect} - required: #{required.inspect}\"\n\n              found = false\n              self.tag_names.each do |key|\n                if hash.keys.include?(key)\n                  found = true\n                  break\n                end\n              end\n              if found\n                @state = :passed\n              else\n                if @setting == :tag_name_required\n                  #puts \"hash: #{hash.inspect}\"\n                  #puts \"self.tag_names: #{self.tag_names.inspect}\"\n                  @state = :not_passed\n                end\n              end\n            else\n              @state = :passed\n            end\n          when :content_values\n            if hash\n              found = false\n              self.tag_names.each do |key|\n                content = hash[key]\n                #puts content\n                #puts @possible_values.inspect\n                if @possible_values.include?(content)\n                  found = true\n                  break\n                end\n              end\n              if found\n                @state = :passed\n              else\n                @state = :not_passed\n              end\n            end\n          #when :not_blank\n          #  if hash.has_key?(field) and !hash[field].to_s.empty?\n          #    @state = :passed\n          #  else\n          #    @state = :not_passed\n          #  end\n        end\n      #end\n      @state\n    end","language":"ruby"}
{"code":"function memoize(fun) {\n  \/\/ Making cache = {} an optional ES6 parameter breaks coverage. Why?\n\n  \/** @type {({ [key: string]: any })} *\/\n  const cache = {};\n\n  if (fun.length === 1) {\n    return (\/** @type {any} *\/ arg) => {\n      if (arg in cache) {\n        return cache[arg];\n      }\n\n      const result = fun(arg);\n      cache[arg] = result;\n      return result;\n    };\n  }\n\n  return (\/** @type {any} *\/ arg1, \/** @type {any} *\/ arg2) => {\n    if (cache[arg1] && arg2 in cache[arg1]) {\n      return cache[arg1][arg2];\n    }\n\n    const result = fun(arg1, arg2);\n\n    if (!cache[arg1]) {\n      cache[arg1] = {};\n    }\n\n    cache[arg1][arg2] = result;\n\n    return result;\n  };\n}","language":"javascript"}
{"code":"def resubmit(self, indices_or_msg_ids=None, subheader=None, block=None):\n        \"\"\"Resubmit one or more tasks.\n\n        in-flight tasks may not be resubmitted.\n\n        Parameters\n        ----------\n\n        indices_or_msg_ids : integer history index, str msg_id, or list of either\n            The indices or msg_ids of indices to be retrieved\n\n        block : bool\n            Whether to wait for the result to be done\n\n        Returns\n        -------\n\n        AsyncHubResult\n            A subclass of AsyncResult that retrieves results from the Hub\n\n        \"\"\"\n        block = self.block if block is None else block\n        if indices_or_msg_ids is None:\n            indices_or_msg_ids = -1\n\n        if not isinstance(indices_or_msg_ids, (list,tuple)):\n            indices_or_msg_ids = [indices_or_msg_ids]\n\n        theids = []\n        for id in indices_or_msg_ids:\n            if isinstance(id, int):\n                id = self.history[id]\n            if not isinstance(id, basestring):\n                raise TypeError(\"indices must be str or int, not %r\"%id)\n            theids.append(id)\n\n        content = dict(msg_ids = theids)\n\n        self.session.send(self._query_socket, 'resubmit_request', content)\n\n        zmq.select([self._query_socket], [], [])\n        idents,msg = self.session.recv(self._query_socket, zmq.NOBLOCK)\n        if self.debug:\n            pprint(msg)\n        content = msg['content']\n        if content['status'] != 'ok':\n            raise self._unwrap_exception(content)\n        mapping = content['resubmitted']\n        new_ids = [ mapping[msg_id] for msg_id in theids ]\n\n        ar = AsyncHubResult(self, msg_ids=new_ids)\n\n        if block:\n            ar.wait()\n\n        return ar","language":"python"}
{"code":"func (p *Process) splitMappingsAt(a Address) {\n\tfor _, m := range p.memory.mappings {\n\t\tif a < m.min || a > m.max {\n\t\t\tcontinue\n\t\t}\n\t\tif a == m.min || a == m.max {\n\t\t\treturn\n\t\t}\n\t\t\/\/ Split this mapping at a.\n\t\tm2 := new(Mapping)\n\t\t*m2 = *m\n\t\tm.max = a\n\t\tm2.min = a\n\t\tif m2.f != nil {\n\t\t\tm2.off += m.Size()\n\t\t}\n\t\tif m2.origF != nil {\n\t\t\tm2.origOff += m.Size()\n\t\t}\n\t\tp.memory.mappings = append(p.memory.mappings, m2)\n\t\treturn\n\t}\n}","language":"go"}
{"code":"def div\n      cr_scanner = CodeRay.scan(self.clip, self.language)\n      # Only show line numbers if its greater than 1\n      if cr_scanner.loc <= 1\n        return cr_scanner.div\n      else\n        return cr_scanner.div(:line_numbers => :table)\n      end\n    end","language":"ruby"}
{"code":"def _maybe_assert_valid_concentration(self, concentration, validate_args):\n    \"\"\"Checks the validity of the concentration parameter.\"\"\"\n    if not validate_args:\n      return concentration\n    concentration = distribution_util.embed_check_categorical_event_shape(\n        concentration)\n    return distribution_util.with_dependencies([\n        assert_util.assert_positive(\n            concentration, message=\"Concentration parameter must be positive.\"),\n    ], concentration)","language":"python"}
{"code":"def is_virtual(value):\n        \"\"\"Checks if value has the format of a virtual qubit \"\"\"\n        return value is None or isinstance(value, tuple) and len(value) == 2 and isinstance(\n            value[0], Register) and isinstance(value[1], int)","language":"python"}
{"code":"void writeToFiler(Filer filer) throws IOException {\n        ClassName targetClassName = ClassName.get(classPackage, targetClass);\n        TypeSpec.Builder barberShop = TypeSpec.classBuilder(className)\n                .addModifiers(Modifier.PUBLIC)\n                .addTypeVariable(TypeVariableName.get(\"T\", targetClassName))\n                .addMethod(generateStyleMethod())\n                .addMethod(generateCheckParentMethod());\n\n        if (parentBarbershop == null) {\n            barberShop.addSuperinterface(ParameterizedTypeName.get(ClassName.get(Barber.IBarbershop.class), TypeVariableName.get(\"T\")));\n            barberShop.addField(FieldSpec.builder(WeakHashSet.class, \"lastStyledTargets\", Modifier.PROTECTED).initializer(\"new $T()\", WeakHashSet.class).build());\n        } else {\n            barberShop.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentBarbershop), TypeVariableName.get(\"T\")));\n        }\n\n        JavaFile javaFile = JavaFile.builder(classPackage, barberShop.build()).build();\n        javaFile.writeTo(filer);\n    }","language":"java"}
{"code":"void validateClass(String name) {\n    \/\/ python scripting engine generates __*__ classes under all packages (including SDC api package)\n    if (!(name.endsWith(\"__\"))) {\n      for (String blacklistedPackage : blacklistedPackages) {\n        if (name.startsWith(blacklistedPackage)) {\n          throw new IllegalArgumentException(String.format(\"Class '%s' cannot be present in %s\",\n            name, toString()));\n        }\n      }\n    }\n  }","language":"java"}
{"code":"public static function getTypeColor($type)\n    {\n        switch ($type) {\n            case 'mail':                       \/\/ Envelope\n                $color = 'blue';\n                break;\n            case 'warning':                    \/\/ Vyk\u0159i\u010dn\u00edk v troj\u016fheln\u00edku\n                $color = 'yellow';\n                break;\n            case 'error':                      \/\/ Lebka\n                $color = 'red';\n                break;\n            case 'debug':                      \/\/ Kyti\u010dka\n                $color = 'magenta';\n                break;\n            case 'success':                    \/\/ Kyti\u010dka\n                $color = 'green';\n                break;\n            default:                           \/\/ i v krou\u017eku\n                $color = 'white';\n                break;\n        }\n        return $color;\n    }","language":"php"}
{"code":"def gauss(x, *p):\n    \"\"\" Gaussian function.\n\n    Parameters\n    ----------\n    x : array_like\n        Independent variable.\n    *p : parameters unpacked to A, mu, sigma\n        A = amplitude, mu = centre, sigma = width\n\n    Return\n    ------\n    array_like\n        gaussian descriped by *p.\n    \"\"\"\n    A, mu, sigma = p\n    return A * np.exp(-0.5 * (-mu + x)**2 \/ sigma**2)","language":"python"}
{"code":"def loggabor(self, x_pos, y_pos, sf_0, B_sf, theta, B_theta, preprocess=True):\n        \"\"\"\n        Returns the envelope of a LogGabor\n\n        Note that the convention for coordinates follows that of matrices:\n        the origin is at the top left of the image, and coordinates are first\n        the rows (vertical axis, going down) then the columns (horizontal axis,\n        going right).\n\n        \"\"\"\n\n        env = np.multiply(self.band(sf_0, B_sf), self.orientation(theta, B_theta))\n        if not(x_pos==0.) and not(y_pos==0.): # bypass translation whenever none is needed\n              env = env.astype(np.complex128) * self.trans(x_pos*1., y_pos*1.)\n        if preprocess : env *= self.f_mask # retina processing\n        # normalizing energy:\n        env \/= np.sqrt((np.abs(env)**2).mean())\n        # in the case a a single bump (see ``orientation``), we should compensate the fact that the distribution gets complex:\n        env *= np.sqrt(2.)\n        return env","language":"python"}
{"code":"function(sourceFile, destDir) {\n        return new Promise(function(resolve, reject) {\n            var zip = new AdmZip(sourceFile);\n            try {\n                zip.extractAllTo(destDir);\n                resolve(destDir);\n            } catch(err) {\n                reject(err);\n            }\n        });\n    }","language":"javascript"}
{"code":"public static URL getChild(String parent, String member) throws MalformedURLException {\n        return getChild(new URL(parent), member);\n    }","language":"java"}
{"code":"public String getFormattedMessage() {\n        if (_formattedMessage != null) {\n            return _formattedMessage;\n        }\n        if (_argumentArray != null) {\n            _formattedMessage = MessageFormatter.arrayFormat(_message, _argumentArray).getMessage();\n        } else {\n            _formattedMessage = _message;\n        }\n\n        return _formattedMessage;\n    }","language":"java"}
{"code":"function fmtShort$1(ms) {\n  if (ms >= d$3) {\n    return Math.round(ms \/ d$3) + 'd'\n  }\n  if (ms >= h$2) {\n    return Math.round(ms \/ h$2) + 'h'\n  }\n  if (ms >= m$2) {\n    return Math.round(ms \/ m$2) + 'm'\n  }\n  if (ms >= s$2) {\n    return Math.round(ms \/ s$2) + 's'\n  }\n  return ms + 'ms'\n}","language":"javascript"}
{"code":"def apply_filter_param(attr_metadata, collection, opts = {})\n      raw_value = (opts[:attr_values] || params)[attr_metadata[:key]]\n      filter_table = opts[:filter_table]\n      klass = opts[:class] || ModelApi::Utils.find_class(collection, opts)\n      if raw_value.is_a?(Hash) && raw_value.include?('0')\n        operator_value_pairs = filter_process_param_array(params_array(raw_value), attr_metadata,\n            opts)\n      else\n        operator_value_pairs = filter_process_param(raw_value, attr_metadata, opts)\n      end\n      if (column = resolve_key_to_column(klass, attr_metadata)).present?\n        operator_value_pairs.each do |operator, value|\n          if operator == '=' && filter_table.blank?\n            collection = collection.where(column => value)\n          else\n            table_name = (filter_table || klass.table_name).to_s.delete('`')\n            column = column.to_s.delete('`')\n            if value.is_a?(Array)\n              operator = 'IN'\n              value = value.map { |_v| format_value_for_query(column, value, klass) }\n              value = \"(#{value.map { |v| \"'#{v.to_s.gsub(\"'\", \"''\")}'\" }.join(',')})\"\n            else\n              value = \"'#{value.gsub(\"'\", \"''\")}'\"\n            end\n            collection = collection.where(\"`#{table_name}`.`#{column}` #{operator} #{value}\")\n          end\n        end\n      elsif (key = attr_metadata[:key]).present?\n        opts[:result_filters][key] = operator_value_pairs if opts.include?(:result_filters)\n      end\n      collection\n    end","language":"ruby"}
{"code":"func derefPointers(rv reflect.Value) (drv reflect.Value, isPtr bool, isNilPtr bool) {\n\tfor rv.Kind() == reflect.Ptr {\n\t\tisPtr = true\n\t\tif rv.IsNil() {\n\t\t\tisNilPtr = true\n\t\t\treturn\n\t\t}\n\t\trv = rv.Elem()\n\t}\n\tdrv = rv\n\treturn\n}","language":"go"}
{"code":"public function getSize()\n    {\n        $commandlineArguments = array('du', '-skc', $this->gitDir);\n        $commandline = $this->normalizeCommandlineArguments($commandlineArguments);\n        $process = new Process($commandline);\n        $process->run();\n\n        if (!preg_match('\/(\\d+)\\s+total$\/', trim($process->getOutput()), $vars)) {\n            $message = sprintf(\"Unable to parse process output\\ncommand: %s\\noutput: %s\", $process->getCommandLine(), $process->getOutput());\n\n            if (null !== $this->logger) {\n                $this->logger->error($message);\n            }\n\n            if (true === $this->debug) {\n                throw new RuntimeException('unable to parse repository size output');\n            }\n\n            return;\n        }\n\n        return $vars[1];\n    }","language":"php"}
{"code":"func (m MemoText) MutateTransaction(o *TransactionBuilder) (err error) {\n\n\tif len([]byte(m.Value)) > MemoTextMaxLength {\n\t\terr = errors.New(\"Memo too long; over 28 bytes\")\n\t\treturn\n\t}\n\n\to.TX.Memo, err = xdr.NewMemo(xdr.MemoTypeMemoText, m.Value)\n\treturn\n}","language":"go"}
{"code":"def build_evaluation(variant_specific, variant_id, user_id, user_name,\n                     institute_id, case_id, classification, criteria):\n    \"\"\"Build a evaluation object ready to be inserted to database\n\n    Args:\n        variant_specific(str): md5 string for the specific variant\n        variant_id(str): md5 string for the common variant\n        user_id(str)\n        user_name(str)\n        institute_id(str)\n        case_id(str)\n        classification(str): The ACMG classification\n        criteria(list(dict)): A list of dictionaries with ACMG criterias\n\n    Returns:\n        evaluation_obj(dict): Correctly formatted evaluation object\n\n    \"\"\"\n    criteria = criteria or []\n    evaluation_obj = dict(\n        variant_specific = variant_specific,\n        variant_id = variant_id,\n        institute_id = institute_id,\n        case_id = case_id,\n        classification = classification,\n        user_id = user_id,\n        user_name = user_name,\n        created_at = datetime.datetime.now(),\n    )\n    criteria_objs = []\n    for info in criteria:\n        criteria_obj = {}\n        # This allways has to exist\n        # We might want to check if the term is valid here...\n        criteria_obj['term'] = info['term']\n        if 'comment' in info:\n            criteria_obj['comment'] = info['comment']\n        if 'links' in info:\n            criteria_obj['links'] = info['links']\n        criteria_objs.append(criteria_obj)\n\n    evaluation_obj['criteria'] = criteria_objs\n\n    return evaluation_obj","language":"python"}
{"code":"func (c *Client) ListPullRequestComments(org, repo string, number int) ([]ReviewComment, error) {\n\tc.log(\"ListPullRequestComments\", org, repo, number)\n\tif c.fake {\n\t\treturn nil, nil\n\t}\n\tpath := fmt.Sprintf(\"\/repos\/%s\/%s\/pulls\/%d\/comments\", org, repo, number)\n\tvar comments []ReviewComment\n\terr := c.readPaginatedResults(\n\t\tpath,\n\t\tacceptNone,\n\t\tfunc() interface{} {\n\t\t\treturn &[]ReviewComment{}\n\t\t},\n\t\tfunc(obj interface{}) {\n\t\t\tcomments = append(comments, *(obj.(*[]ReviewComment))...)\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn comments, nil\n}","language":"go"}
{"code":"protected function processParams(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $commentStart)\n    {\n        $tokens = $phpcsFile->getTokens();\n\n        $params  = array();\n        $maxType = 0;\n        $maxVar  = 0;\n        foreach ($tokens[$commentStart]['comment_tags'] as $pos => $tag) {\n            if ($tokens[$tag]['content'] !== '@param') {\n                continue;\n            }\n\n            $type         = '';\n            $typeSpace    = 0;\n            $var          = '';\n            $varSpace     = 0;\n            $comment      = '';\n            $commentLines = array();\n            if ($tokens[($tag + 2)]['code'] === T_DOC_COMMENT_STRING) {\n                $matches = array();\n                preg_match('\/([^$&]+)(?:((?:\\$|&)[^\\s]+)(?:(\\s+)(.*))?)?\/', $tokens[($tag + 2)]['content'], $matches);\n\n                $typeLen   = strlen($matches[1]);\n                $type      = trim($matches[1]);\n                $typeSpace = ($typeLen - strlen($type));\n                $typeLen   = strlen($type);\n                if ($typeLen > $maxType) {\n                    $maxType = $typeLen;\n                }\n\n                if (isset($matches[2]) === true) {\n                    $var    = $matches[2];\n                    $varLen = strlen($var);\n                    if ($varLen > $maxVar) {\n                        $maxVar = $varLen;\n                    }\n\n                    if (isset($matches[4]) === true) {\n                        $varSpace       = strlen($matches[3]);\n                        $comment        = $matches[4];\n                        $commentLines[] = array(\n                            'comment' => $comment,\n                            'token'   => ($tag + 2),\n                            'indent'  => $varSpace,\n                        );\n\n                        \/\/ Any strings until the next tag belong to this comment.\n                        if (isset($tokens[$commentStart]['comment_tags'][($pos + 1)]) === true) {\n                            $end = $tokens[$commentStart]['comment_tags'][($pos + 1)];\n                        } else {\n                            $end = $tokens[$commentStart]['comment_closer'];\n                        }\n\n                        for ($i = ($tag + 3); $i < $end; $i++) {\n                            if ($tokens[$i]['code'] === T_DOC_COMMENT_STRING) {\n                                $indent = 0;\n                                if ($tokens[($i - 1)]['code'] === T_DOC_COMMENT_WHITESPACE) {\n                                    $indent = strlen($tokens[($i - 1)]['content']);\n                                }\n\n                                $comment       .= ' '.$tokens[$i]['content'];\n                                $commentLines[] = array(\n                                    'comment' => $tokens[$i]['content'],\n                                    'token'   => $i,\n                                    'indent'  => $indent,\n                                );\n                            }\n                        }\n                    } else {\n\/\/                        $error = 'Missing parameter comment';\n\/\/                        $phpcsFile->addError($error, $tag, 'MissingParamComment');\n\/\/                        $commentLines[] = array('comment' => '');\n                    }\/\/end if\n                } else {\n                    $error = 'Missing parameter name';\n                    $phpcsFile->addError($error, $tag, 'MissingParamName');\n                }\/\/end if\n            } else {\n                $error = 'Missing parameter type';\n                $phpcsFile->addError($error, $tag, 'MissingParamType');\n            }\/\/end if\n\n            $params[] = array(\n                'tag'          => $tag,\n                'type'         => $type,\n                'var'          => $var,\n                'comment'      => $comment,\n                'commentLines' => $commentLines,\n                'type_space'   => $typeSpace,\n                'var_space'    => $varSpace,\n            );\n        }\/\/end foreach\n\n        $realParams  = $phpcsFile->getMethodParameters($stackPtr);\n        $foundParams = array();\n\n        foreach ($params as $pos => $param) {\n            \/\/ If the type is empty, the whole line is empty.\n            if ($param['type'] === '') {\n                continue;\n            }\n\n            \/\/ Check the param type value.\n            $typeNames = explode('|', $param['type']);\n            foreach ($typeNames as $typeName) {\n                $suggestedName = PHP_CodeSniffer::suggestType($typeName);\n                if ($suggestedName === 'boolean') {\n                    $suggestedName = 'bool';\n                } elseif ($suggestedName === 'integer') {\n                    $suggestedName = 'int';\n                }\n                if ($typeName !== $suggestedName) {\n                    $error = 'Expected \"%s\" but found \"%s\" for parameter type';\n                    $data  = array(\n                        $suggestedName,\n                        $typeName,\n                    );\n\n                    $fix = $phpcsFile->addFixableError($error, $param['tag'], 'IncorrectParamVarName', $data);\n                    if ($fix === true) {\n                        $content  = $suggestedName;\n                        $content .= str_repeat(' ', $param['type_space']);\n                        $content .= $param['var'];\n                        $content .= str_repeat(' ', $param['var_space']);\n                        if (isset($param['commentLines'][0]) === true) {\n                            $content .= $param['commentLines'][0]['comment'];\n                        }\n\n                        $phpcsFile->fixer->replaceToken(($param['tag'] + 2), $content);\n                    }\n                } else if (count($typeNames) === 1) {\n                    \/\/ Check type hint for array and custom type.\n                    $suggestedTypeHint = '';\n                    if (strpos($suggestedName, 'array') !== false || strpos($suggestedName, '[]') !== false) {\n                        $suggestedTypeHint = 'array';\n                    } else\n                    if (strpos($suggestedName, 'callable') !== false) {\n                        $suggestedTypeHint = 'callable';\n                    } else if (in_array($typeName, PHP_CodeSniffer::$allowedTypes) === false) {\n                        $suggestedTypeHint = $suggestedName;\n                    }\n\n                    if ($suggestedTypeHint !== '' && isset($realParams[$pos]) === true) {\n                        $typeHint = $realParams[$pos]['type_hint'];\n                        if ($typeHint !== '' && $typeHint !== substr($suggestedTypeHint, (strlen($typeHint) * -1))) {\n                            $error = 'Expected type hint \"%s\"; found \"%s\" for %s';\n                            $data  = array(\n                                $suggestedTypeHint,\n                                $typeHint,\n                                $param['var'],\n                            );\n                            $phpcsFile->addError($error, $stackPtr, 'IncorrectTypeHint', $data);\n                        }\n                    } else if ($suggestedTypeHint === '' && isset($realParams[$pos]) === true) {\n                        $typeHint = $realParams[$pos]['type_hint'];\n                        if ($typeHint !== '') {\n                            $error = 'Unknown type hint \"%s\" found for %s';\n                            $data  = array(\n                                $typeHint,\n                                $param['var'],\n                            );\n                            $phpcsFile->addError($error, $stackPtr, 'InvalidTypeHint', $data);\n                        }\n                    }\/\/end if\n                }\/\/end if\n            }\/\/end foreach\n\n            if ($param['var'] === '') {\n                continue;\n            }\n\n            $foundParams[] = $param['var'];\n\n            \/\/ Check number of spaces after the type.\n            $spaces = ($maxType - strlen($param['type']) + 1);\n            if ($param['type_space'] !== $spaces) {\n                $error = 'Expected %s spaces after parameter type; %s found';\n                $data  = array(\n                    $spaces,\n                    $param['type_space'],\n                );\n\n                $fix = $phpcsFile->addFixableError($error, $param['tag'], 'SpacingAfterParamType', $data);\n                if ($fix === true) {\n                    $phpcsFile->fixer->beginChangeset();\n\n                    $content  = $param['type'];\n                    $content .= str_repeat(' ', $spaces);\n                    $content .= $param['var'];\n                    $content .= str_repeat(' ', $param['var_space']);\n                    $content .= $param['commentLines'][0]['comment'];\n                    $phpcsFile->fixer->replaceToken(($param['tag'] + 2), $content);\n\n                    \/\/ Fix up the indent of additional comment lines.\n                    foreach ($param['commentLines'] as $lineNum => $line) {\n                        if ($lineNum === 0\n                            || $param['commentLines'][$lineNum]['indent'] === 0\n                        ) {\n                            continue;\n                        }\n\n                        $newIndent = ($param['commentLines'][$lineNum]['indent'] + $spaces - $param['type_space']);\n                        $phpcsFile->fixer->replaceToken(\n                            ($param['commentLines'][$lineNum]['token'] - 1),\n                            str_repeat(' ', $newIndent)\n                        );\n                    }\n\n                    $phpcsFile->fixer->endChangeset();\n                }\/\/end if\n            }\/\/end if\n\n            \/\/ Make sure the param name is correct.\n            if (isset($realParams[$pos]) === true) {\n                $realName = $realParams[$pos]['name'];\n                if ($realName !== $param['var']) {\n                    $code = 'ParamNameNoMatch';\n                    $data = array(\n                        $param['var'],\n                        $realName,\n                    );\n\n                    $error = 'Doc comment for parameter %s does not match ';\n                    if (strtolower($param['var']) === strtolower($realName)) {\n                        $error .= 'case of ';\n                        $code   = 'ParamNameNoCaseMatch';\n                    }\n\n                    $error .= 'actual variable name %s';\n\n                    $phpcsFile->addError($error, $param['tag'], $code, $data);\n                }\n            } else if (substr($param['var'], -4) !== ',...') {\n                \/\/ We must have an extra parameter comment.\n                $error = 'Superfluous parameter comment';\n                $phpcsFile->addError($error, $param['tag'], 'ExtraParamComment');\n            }\/\/end if\n\n            if ($param['comment'] === '') {\n                continue;\n            }\n\n            \/\/ Check number of spaces after the var name.\n            $spaces = ($maxVar - strlen($param['var']) + 1);\n            if ($param['var_space'] !== $spaces) {\n                $error = 'Expected %s spaces after parameter name; %s found';\n                $data  = array(\n                    $spaces,\n                    $param['var_space'],\n                );\n\n                $fix = $phpcsFile->addFixableError($error, $param['tag'], 'SpacingAfterParamName', $data);\n                if ($fix === true) {\n                    $phpcsFile->fixer->beginChangeset();\n\n                    $content  = $param['type'];\n                    $content .= str_repeat(' ', $param['type_space']);\n                    $content .= $param['var'];\n                    $content .= str_repeat(' ', $spaces);\n                    $content .= $param['commentLines'][0]['comment'];\n                    $phpcsFile->fixer->replaceToken(($param['tag'] + 2), $content);\n\n                    \/\/ Fix up the indent of additional comment lines.\n                    foreach ($param['commentLines'] as $lineNum => $line) {\n                        if ($lineNum === 0\n                            || $param['commentLines'][$lineNum]['indent'] === 0\n                        ) {\n                            continue;\n                        }\n\n                        $newIndent = ($param['commentLines'][$lineNum]['indent'] + $spaces - $param['var_space']);\n                        $phpcsFile->fixer->replaceToken(\n                            ($param['commentLines'][$lineNum]['token'] - 1),\n                            str_repeat(' ', $newIndent)\n                        );\n                    }\n\n                    $phpcsFile->fixer->endChangeset();\n                }\/\/end if\n            }\/\/end if\n\n            \/\/ Param comments must start with a capital letter and end with the full stop.\n            $firstChar = $param['comment']{0};\n            if (preg_match('|\\p{Lu}|u', $firstChar) === 0) {\n                $error = 'Parameter comment must start with a capital letter';\n                $phpcsFile->addError($error, $param['tag'], 'ParamCommentNotCapital');\n            }\n\n            $lastChar = substr($param['comment'], -1);\n            if ($lastChar !== '.') {\n                $error = 'Parameter comment must end with a full stop';\n                $phpcsFile->addError($error, $param['tag'], 'ParamCommentFullStop');\n            }\n        }\/\/end foreach\n\n        \/\/ONGR Ignore doc tag rules if it contains only {@inheritdoc}.\n        $inheritDocMatches = false;\n        for ($i = $commentStart; $i < $tokens[$commentStart]['comment_closer']; $i++) {\n            if ($tokens[$i]['content'] === '{@inheritdoc}') {\n                $inheritDocMatches = true;\n            }\n        }\n        \/\/ Report missing comments.\n        if (!$inheritDocMatches) {\n            $realNames = array();\n            foreach ($realParams as $realParam) {\n                $realNames[] = $realParam['name'];\n            }\n\n            $diff = array_diff($realNames, $foundParams);\n            foreach ($diff as $neededParam) {\n                $error = 'Doc comment for parameter \"%s\" missing';\n                $data  = array($neededParam);\n                $phpcsFile->addError($error, $commentStart, 'MissingParamTag', $data);\n            }\n        }\n\n\n    }","language":"php"}
{"code":"public static Result internalServerError(File content, boolean inline) {\n    return internalServerError(content, inline, StaticFileMimeTypes.fileMimeTypes());\n  }","language":"java"}
{"code":"public FeatureStyles getFeatureStyles(FeatureRow featureRow) {\n        return getFeatureStyles(featureRow.getTable().getTableName(),\n                featureRow.getId());\n    }","language":"java"}
{"code":"def css(*selectors, &block)\n            nodesets = []\n            process do |xml|\n                nodesets << xml.css(*selectors)\n            end\n            selection = Selection.new(nodesets)\n\n            if block_given? then\n                Docile.dsl_eval(selection, &block)\n            end\n\n            selection\n        end","language":"ruby"}
{"code":"func (m *TaskWrapper) MarshalBinary() ([]byte, error) {\n\tif m == nil {\n\t\treturn nil, nil\n\t}\n\treturn swag.WriteJSON(m)\n}","language":"go"}
{"code":"def post hash={}, payload\n      raise 'Payload cannot be blank' if payload.nil? || payload.empty?\n\n      hash.symbolize_keys!\n      call(:post, hash[:endpoint], (hash[:args]||{}).merge({:method => :post}), payload)\n    end","language":"ruby"}
{"code":"def get_local(message)\n      0.upto(15) do |i|\n        if (entry = @entries[i]) && entry.global_message == message\n          entry.last_use = Time.now\n          return i\n        end\n      end\n      nil\n    end","language":"ruby"}
{"code":"def on_unregistered_type(self, typekey, packet):\n        \"\"\"\n        Invoked if a packet with an unregistered type was received.\n        \n        Default behaviour is to log and close the connection.\n        \"\"\"\n        log.msg(\"Missing handler for typekey %s in %s. Closing connection.\" % (typekey, type(self).__name__))\n        self.transport.loseConnection()","language":"python"}
{"code":"func Mmap(fd *os.File, writable bool, size int64) ([]byte, error) {\n\tmtype := unix.PROT_READ\n\tif writable {\n\t\tmtype |= unix.PROT_WRITE\n\t}\n\treturn unix.Mmap(int(fd.Fd()), 0, int(size), mtype, unix.MAP_SHARED)\n}","language":"go"}
{"code":"def ones_like(input, dtype: nil, name: nil)\n      _op(:ones_like, input, data_type: dtype, name: name)\n    end","language":"ruby"}
{"code":"def update_descendants_with_new_ancestry\n      # If enabled and node is existing and ancestry was updated and the new ancestry is sane ...\n      if !ancestry_callbacks_disabled? && !new_record? && ancestry_changed? && sane_ancestry?\n        # ... for each descendant ...\n        unscoped_descendants.each do |descendant|\n          # ... replace old ancestry with new ancestry\n          descendant.without_ancestry_callbacks do\n            descendant.update_attribute(\n              self.ancestry_base_class.ancestry_column,\n              descendant.read_attribute(descendant.class.ancestry_column).gsub(\n                # child_ancestry_was\n                \/^#{self.child_ancestry}\/,\n                # future child_ancestry\n                if ancestors? then \"#{read_attribute self.class.ancestry_column }\/#{id}\" else id.to_s end\n              )\n            )\n          end\n        end\n      end\n    end","language":"ruby"}
{"code":"def create_directory(self, share_name, directory_name, **kwargs):\n        \"\"\"\n        Create a new directory on a Azure File Share.\n\n        :param share_name: Name of the share.\n        :type share_name: str\n        :param directory_name: Name of the directory.\n        :type directory_name: str\n        :param kwargs: Optional keyword arguments that\n            `FileService.create_directory()` takes.\n        :type kwargs: object\n        :return: A list of files and directories\n        :rtype: list\n        \"\"\"\n        return self.connection.create_directory(share_name, directory_name, **kwargs)","language":"python"}
{"code":"function load(store, key, url, options) {\n  const { cacheControl, rejectOnError, retry, timeout } = options;\n\n  options.id = key;\n\n  store.debug('load %s from %s', key, url);\n\n  return agent\n    .get(url, options)\n    .timeout(timeout)\n    .retry(retry)\n    .then(res => {\n      \/\/ Abort if already destroyed\n      if (store.destroyed) {\n        throw Error('store destroyed');\n      }\n\n      store.debug('loaded \"%s\" in %dms', key, res.duration);\n\n      \/\/ Guard against empty data\n      if (res.body) {\n        \/\/ Parse cache-control headers\n        if (res.headers && 'expires' in res.headers) {\n          res.body[store.EXPIRY_KEY] = generateExpiry(res.headers, cacheControl);\n        }\n\n        \/\/ Enable handling by not calling inner set()\n        store.set(key, res.body, options);\n      }\n\n      return res;\n    })\n    .catch(err => {\n      \/\/ Abort if already destroyed\n      if (store.destroyed) {\n        throw err;\n      }\n\n      store.debug('unable to load \"%s\" from %s', key, url);\n\n      if (rejectOnError) {\n        store.set(key, undefined, options);\n      }\n\n      throw err;\n    });\n}","language":"javascript"}
{"code":"protected function doRequest(array $fields)\n    {\n        $headers = array(\n            'Content-Type' => 'application\/x-www-form-urlencoded',\n        );\n\n        $request = $this->messageFactory->createRequest('POST', $this->getApiEndpoint(), $headers, http_build_query($fields));\n\n        $response = $this->client->send($request);\n\n        if (false == ($response->getStatusCode() >= 200 && $response->getStatusCode() < 300)) {\n            throw HttpException::factory($request, $response);\n        }\n\n        $result = json_decode($response->getBody()->getContents());\n        if (null === $result) {\n            throw new LogicException(\"Response content is not valid json: \\n\\n{$response->getBody()->getContents()}\");\n        }\n\n        return $result;\n    }","language":"php"}
{"code":"protected Class<?> loadClass(String className, boolean resolve)\n      throws ClassNotFoundException\n   {\n      \/\/ Revert to standard rules\n      if (standard)\n         return super.loadClass(className, resolve);\n\n      \/\/ Ask the parent\n      Class<?> clazz = null;\n      try\n      {\n         clazz = parent.loadClass(className);\n      }\n      catch (ClassNotFoundException e)\n      {\n         \/\/ Not found in parent,\n         \/\/ maybe it is a proxy registered against this classloader?\n         clazz = findLoadedClass(className);\n         if (clazz == null)\n            throw e;\n      }\n\n      \/\/ Link the class\n      if (resolve)\n         resolveClass(clazz);\n\n      return clazz;\n   }","language":"java"}
{"code":"public function find($id)\n    {\n        foreach ($this->plans as $plan) {\n            if ($plan->id === $id) {\n                return $plan;\n            }\n        }\n\n        throw new Exception(\"Unable to find plan with ID [{$id}].\");\n    }","language":"php"}
{"code":"protected function initializeConfig(InputInterface $input, OutputInterface $output, $render = true)\n    {\n        if ($workingDir = $input->getArgument('working-directory')) {\n            chdir($workingDir);\n        }\n        $config = $this->loadConfig($input, $output);\n\n        if ($render) {\n            $this->renderConfig($output, $config);\n        }\n        return $config;\n    }","language":"php"}
{"code":"def render(self, name, value, attrs=None, renderer=None):\n        \"\"\"\n        Render the widget as an HTML string.\n\n        Overridden here to support Django < 1.11.\n        \"\"\"\n        if self.has_template_widget_rendering:\n            return super(ClearableFileInputWithImagePreview, self).render(\n                name, value, attrs=attrs, renderer=renderer\n            )\n        else:\n            context = self.get_context(name, value, attrs)\n            return render_to_string(self.template_name, context)","language":"python"}
{"code":"public function &mustGetById($type, $id, $use_cache = true)\n    {\n        $result = $this->getById($type, $id, $use_cache);\n\n        if (empty($result)) {\n            throw new ObjectNotFoundException($type, $id);\n        }\n\n        return $result;\n    }","language":"php"}
{"code":"function(prop, value) {\n        var me = this,\n            dom = me.dom,\n            hooks = me.styleHooks,\n            style = dom.style,\n            valueFrom = Ext.valueFrom,\n            name, hook;\n\n        \/\/ we don't promote the 2-arg form to object-form to avoid the overhead...\n        if (typeof prop == 'string') {\n            hook = hooks[prop];\n\n            if (!hook) {\n                hooks[prop] = hook = { name: Ext.dom.Element.normalize(prop) };\n            }\n            value = valueFrom(value, '');\n\n            if (hook.set) {\n                hook.set(dom, value, me);\n            } else {\n                style[hook.name] = value;\n            }\n        }\n        else {\n            for (name in prop) {\n                if (prop.hasOwnProperty(name)) {\n                    hook = hooks[name];\n\n                    if (!hook) {\n                        hooks[name] = hook = { name: Ext.dom.Element.normalize(name) };\n                    }\n\n                    value = valueFrom(prop[name], '');\n\n                    if (hook.set) {\n                        hook.set(dom, value, me);\n                    }\n                    else {\n                        style[hook.name] = value;\n                    }\n                }\n            }\n        }\n\n        return me;\n    }","language":"javascript"}
{"code":"@Override\n    public void comment(char ch[], int start, int length)\n            throws org.xml.sax.SAXException {\n        \/\/ tagsoup sometimes submits invalid values here\n        if (ch == null || start < 0 || length >= (ch.length - start)\n                || length < 0) {\n            return;\n        }\n        append(m_doc.createComment(new String(ch, start, length)));\n    }","language":"java"}
{"code":"protected function addService(int $containerId, string $serviceId, Argument $argument): void\n    {\n        if (substr($serviceId, -8) === 'Original') {\n            throw new \\InvalidArgumentException(sprintf(\n                'Service id cannot ends with \"Original\" keyword in \"%s\".',\n                $serviceId\n            ));\n        }\n\n        if (array_key_exists($serviceId, $this->ids)) {\n            \/\/ overriding\n\n            $returnType = $argument->getReturnType();\n\n            $otherReturnType = $this->list[$serviceId]->getReturnType();\n            $isSubclass = is_a($otherReturnType, $returnType, true);\n\n            if ($otherReturnType !== $returnType && !$isSubclass) {\n                throw new \\InvalidArgumentException(sprintf(\n                    'Invalid override: Service \"%s\" with type \"%s\" override service with type \"%s\"',\n                    $serviceId,\n                    $returnType,\n                    $otherReturnType\n                ));\n            }\n\n            if ($argument->isDecorator() && $serviceId === $argument->getDecoratedService()) {\n            } elseif ($this->list[$serviceId]->isDecorator()) {\n            } elseif ($this->priorities[$this->ids[$serviceId]] === $this->priorities[$containerId]) {\n                throw new \\InvalidArgumentException('Equals priority in two services, please, fix it!');\n\n            } elseif ($this->priorities[$this->ids[$serviceId]] > $this->priorities[$containerId]) {\n                return;\n            }\n        }\n\n        $this->append($argument, $serviceId, $containerId);\n    }","language":"php"}
{"code":"func (f *TriageFiler) filterAndValidate(windowDays int) error {\n\tf.latestStart = int64(0)\n\tfor _, start := range f.data.Builds.Cols.Started {\n\t\tif start > f.latestStart {\n\t\t\tf.latestStart = start\n\t\t}\n\t}\n\tcutoffTime := time.Unix(f.latestStart, 0).AddDate(0, 0, -windowDays).Unix()\n\n\tvalidClusts := []*Cluster{}\n\tfor clustIndex, clust := range f.data.Clustered {\n\t\tif len(clust.Identifier) == 0 {\n\t\t\treturn fmt.Errorf(\"the cluster at index %d in the triage JSON data does not specify an ID\", clustIndex)\n\t\t}\n\t\tif clust.Tests == nil {\n\t\t\treturn fmt.Errorf(\"cluster '%s' does not have a 'tests' key\", clust.Identifier)\n\t\t}\n\t\tvalidTests := []*Test{}\n\t\tfor _, test := range clust.Tests {\n\t\t\tif len(test.Name) == 0 {\n\t\t\t\treturn fmt.Errorf(\"cluster '%s' contains a test without a name\", clust.Identifier)\n\t\t\t}\n\t\t\tif test.Jobs == nil {\n\t\t\t\treturn fmt.Errorf(\"cluster '%s' does not have a 'jobs' key\", clust.Identifier)\n\t\t\t}\n\t\t\tvalidJobs := []*Job{}\n\t\t\tfor _, job := range test.Jobs {\n\t\t\t\tif len(job.Name) == 0 {\n\t\t\t\t\treturn fmt.Errorf(\"cluster '%s' contains a job without a name under test '%s'\", clust.Identifier, test.Name)\n\t\t\t\t}\n\t\t\t\t\/\/ Filter out PR jobs\n\t\t\t\tif strings.HasPrefix(job.Name, \"pr:\") {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif len(job.Builds) == 0 {\n\t\t\t\t\treturn fmt.Errorf(\"cluster '%s' contains job '%s' under test '%s' with no failing builds\", clust.Identifier, job.Name, test.Name)\n\t\t\t\t}\n\t\t\t\tvalidBuilds := []int{}\n\t\t\t\trowMap, ok := f.data.Builds.Jobs[job.Name]\n\t\t\t\tif !ok {\n\t\t\t\t\treturn fmt.Errorf(\"triage json data does not contain buildnum to row index mapping for job '%s'\", job.Name)\n\t\t\t\t}\n\t\t\t\tfor _, buildnum := range job.Builds {\n\t\t\t\t\trow, err := rowMap.rowForBuild(buildnum)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn err\n\t\t\t\t\t}\n\t\t\t\t\tif f.data.Builds.Cols.Started[row] > cutoffTime {\n\t\t\t\t\t\tvalidBuilds = append(validBuilds, buildnum)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif len(validBuilds) > 0 {\n\t\t\t\t\tjob.Builds = validBuilds\n\t\t\t\t\tvalidJobs = append(validJobs, job)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif len(validJobs) > 0 {\n\t\t\t\ttest.Jobs = validJobs\n\t\t\t\tvalidTests = append(validTests, test)\n\t\t\t}\n\t\t}\n\t\tif len(validTests) > 0 {\n\t\t\tclust.Tests = validTests\n\t\t\tvalidClusts = append(validClusts, clust)\n\t\t}\n\t}\n\tf.data.Clustered = validClusts\n\treturn nil\n}","language":"go"}
{"code":"public static Attributes parseAttributes(ParserController pc,\n\t\t\t\t\t     JspReader reader)\n\t\tthrows JasperException {\n\tParser tmpParser = new Parser(pc, reader, false, false, null, false);\n\treturn tmpParser.parseAttributes();\n    }","language":"java"}
{"code":"protected function parseAutoFill(string $type, ?array $fill = null): void\n    {\n        if (null === $fill) {\n            return;\n        }\n\n        foreach (static::STRUCT as $prop => $value) {\n            if ($fill && !in_array($prop, $fill, true)) {\n                continue;\n            }\n\n            if (array_key_exists($type.'_fill', $value)) {\n                $this->normalizeFill($prop, $value[$type.'_fill']);\n            }\n        }\n    }","language":"php"}
{"code":"def get_table(self, table_name, db='default'):\n        \"\"\"Get a metastore table object\n\n        >>> hh = HiveMetastoreHook()\n        >>> t = hh.get_table(db='airflow', table_name='static_babynames')\n        >>> t.tableName\n        'static_babynames'\n        >>> [col.name for col in t.sd.cols]\n        ['state', 'year', 'name', 'gender', 'num']\n        \"\"\"\n        if db == 'default' and '.' in table_name:\n            db, table_name = table_name.split('.')[:2]\n        with self.metastore as client:\n            return client.get_table(dbname=db, tbl_name=table_name)","language":"python"}
{"code":"func (response *InboundCallResponse) doneSending() {\n\t\/\/ TODO(prashant): Move this to when the message is actually being sent.\n\tnow := response.timeNow()\n\n\tif span := response.span; span != nil {\n\t\tif response.applicationError || response.systemError {\n\t\t\text.Error.Set(span, true)\n\t\t}\n\t\tspan.FinishWithOptions(opentracing.FinishOptions{FinishTime: now})\n\t}\n\n\tlatency := now.Sub(response.calledAt)\n\tresponse.statsReporter.RecordTimer(\"inbound.calls.latency\", response.commonStatsTags, latency)\n\n\tif response.systemError {\n\t\t\/\/ TODO(prashant): Report the error code type as per metrics doc and enable.\n\t\t\/\/ response.statsReporter.IncCounter(\"inbound.calls.system-errors\", response.commonStatsTags, 1)\n\t} else if response.applicationError {\n\t\tresponse.statsReporter.IncCounter(\"inbound.calls.app-errors\", response.commonStatsTags, 1)\n\t} else {\n\t\tresponse.statsReporter.IncCounter(\"inbound.calls.success\", response.commonStatsTags, 1)\n\t}\n\n\t\/\/ Cancel the context since the response is complete.\n\tresponse.cancel()\n\n\t\/\/ The message exchange is still open if there are no errors, call shutdown.\n\tif response.err == nil {\n\t\tresponse.mex.shutdown()\n\t}\n}","language":"go"}
{"code":"def n(msg, title='', image=nil)\n      Compat::UI.notify(msg, :title => title, :image => image)\n    end","language":"ruby"}
{"code":"public SnakerEngine buildSnakerEngine() throws SnakerException {\n\t\tif(log.isInfoEnabled()) {\n\t\t\tlog.info(\"SnakerEngine start......\");\n\t\t}\n\t\tparser();\n\t\t\/**\n\t\t * \u7531\u670d\u52a1\u4e0a\u4e0b\u6587\u8fd4\u56de\u6d41\u7a0b\u5f15\u64ce\n\t\t *\/\n\t\tSnakerEngine configEngine = ServiceContext.getEngine();\n\t\tif(configEngine == null) {\n\t\t\tthrow new SnakerException(\"\u914d\u7f6e\u65e0\u6cd5\u53d1\u73b0SnakerEngine\u7684\u5b9e\u73b0\u7c7b\");\n\t\t}\n\t\tif(log.isInfoEnabled()) {\n\t\t\tlog.info(\"SnakerEngine be found:\" + configEngine.getClass());\n\t\t}\n\t\treturn configEngine.configure(this);\n\t}","language":"java"}
{"code":"function(dataset) {\n\t\tdataset = dataset.map(function(datum) {\n\t\t\tvar normalizedLabels = multilabelutils.normalizeOutputLabels(datum.output);\n\t\t\tfor (var i in normalizedLabels)\n\t\t\t\tthis.allClasses[normalizedLabels[i]]=true;\n\t\t\treturn {\n\t\t\t\tinput: datum.input,\n\t\t\t\toutput: normalizedLabels.map(this.splitLabel)\n\t\t\t}\n\t\t}, this);\n\t\t\n\t\t\/\/ [ [ 'Offer', 'Leased Car', 'Without leased car' ], [ 'Offer', 'Working Hours', '9 hours' ] ]\n\t\t\n\t\treturn this.trainBatchRecursive(dataset, this.root);\n\t}","language":"javascript"}
{"code":"def str_strip(x, to_strip=None):\n    \"\"\"Removes leading and trailing characters.\n\n    Strips whitespaces (including new lines), or a set of specified\n    characters from each string saple in a column, both from the left\n    right sides.\n\n    :param str to_strip: The characters to be removed. All combinations of the characters will be removed.\n                         If None, it removes whitespaces.\n    :param returns: an expression containing the modified string samples.\n\n    Example:\n\n    >>> import vaex\n    >>> text = ['Something', 'very pretty', 'is coming', 'our', 'way.']\n    >>> df = vaex.from_arrays(text=text)\n    >>> df\n      #  text\n      0  Something\n      1  very pretty\n      2  is coming\n      3  our\n      4  way.\n\n    >>> df.text.str.strip(to_strip='very')\n    Expression = str_strip(text, to_strip='very')\n    Length: 5 dtype: str (expression)\n    ---------------------------------\n    0  Something\n    1      prett\n    2  is coming\n    3         ou\n    4       way.\n    \"\"\"\n    # in c++ we give empty string the same meaning as None\n    sl = _to_string_sequence(x).strip('' if to_strip is None else to_strip) if to_strip != '' else x\n    return column.ColumnStringArrow(sl.bytes, sl.indices, sl.length, sl.offset, string_sequence=sl)","language":"python"}
{"code":"function(el, options) {\n\t\t\t\tvar self = this\n\t\t\t\t, runtime \/\/ this has to be outside of all the closures to contain proper runtime\n\t\t\t\t;\n\n\t\t\t\tvar opts = Basic.extend({\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\theight: this.height,\n\t\t\t\t\ttype: this.type || 'image\/jpeg',\n\t\t\t\t\tquality: 90,\n\t\t\t\t\tfit: true,\n\t\t\t\t\tresample: 'nearest'\n\t\t\t\t}, options);\n\n\n\t\t\t\tfunction render(type, quality) {\n\t\t\t\t\tvar img = this;\n\n\t\t\t\t\t\/\/ if possible, embed a canvas element directly\n\t\t\t\t\tif (Env.can('create_canvas')) {\n\t\t\t\t\t\tvar canvas = img.getAsCanvas();\n\t\t\t\t\t\tif (canvas) {\n\t\t\t\t\t\t\tel.appendChild(canvas);\n\t\t\t\t\t\t\tcanvas = null;\n\t\t\t\t\t\t\timg.destroy();\n\t\t\t\t\t\t\tself.trigger('embedded');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dataUrl = img.getAsDataURL(type, quality);\n\t\t\t\t\tif (!dataUrl) {\n\t\t\t\t\t\tthrow new x.ImageError(x.ImageError.WRONG_FORMAT);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Env.can('use_data_uri_of', dataUrl.length)) {\n\t\t\t\t\t\tel.innerHTML = '<img src=\"' + dataUrl + '\" width=\"' + img.width + '\" height=\"' + img.height + '\" alt=\"\" \/>';\n\t\t\t\t\t\timg.destroy();\n\t\t\t\t\t\tself.trigger('embedded');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar tr = new Transporter();\n\n\t\t\t\t\t\ttr.bind(\"TransportingComplete\", function() {\n\t\t\t\t\t\t\truntime = self.connectRuntime(this.result.ruid);\n\n\t\t\t\t\t\t\tself.bind(\"Embedded\", function() {\n\t\t\t\t\t\t\t\t\/\/ position and size properly\n\t\t\t\t\t\t\t\tBasic.extend(runtime.getShimContainer().style, {\n\t\t\t\t\t\t\t\t\t\/\/position: 'relative',\n\t\t\t\t\t\t\t\t\ttop: '0px',\n\t\t\t\t\t\t\t\t\tleft: '0px',\n\t\t\t\t\t\t\t\t\twidth: img.width + 'px',\n\t\t\t\t\t\t\t\t\theight: img.height + 'px'\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\/\/ some shims (Flash\/SilverLight) reinitialize, if parent element is hidden, reordered or it's\n\t\t\t\t\t\t\t\t\/\/ position type changes (in Gecko), but since we basically need this only in IEs 6\/7 and\n\t\t\t\t\t\t\t\t\/\/ sometimes 8 and they do not have this problem, we can comment this for now\n\t\t\t\t\t\t\t\t\/*tr.bind(\"RuntimeInit\", function(e, runtime) {\n\t\t\t\t\t\t\t\t\ttr.destroy();\n\t\t\t\t\t\t\t\t\truntime.destroy();\n\t\t\t\t\t\t\t\t\tonResize.call(self); \/\/ re-feed our image data\n\t\t\t\t\t\t\t\t});*\/\n\n\t\t\t\t\t\t\t\truntime = null; \/\/ release\n\t\t\t\t\t\t\t}, 999);\n\n\t\t\t\t\t\t\truntime.exec.call(self, \"ImageView\", \"display\", this.result.uid, width, height);\n\t\t\t\t\t\t\timg.destroy();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttr.transport(Encode.atob(dataUrl.substring(dataUrl.indexOf('base64,') + 7)), type, {\n\t\t\t\t\t\t\trequired_caps: {\n\t\t\t\t\t\t\t\tdisplay_media: true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\truntime_order: 'flash,silverlight',\n\t\t\t\t\t\t\tcontainer: el\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!(el = Dom.get(el))) {\n\t\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_NODE_TYPE_ERR);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.size) { \/\/ only preloaded image objects can be used as source\n\t\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_STATE_ERR);\n\t\t\t\t\t}\n\n\t\t\t\t\t\/\/ high-resolution images cannot be consistently handled across the runtimes\n\t\t\t\t\tif (this.width > Image.MAX_RESIZE_WIDTH || this.height > Image.MAX_RESIZE_HEIGHT) {\n\t\t\t\t\t\t\/\/throw new x.ImageError(x.ImageError.MAX_RESOLUTION_ERR);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar imgCopy = new Image();\n\n\t\t\t\t\timgCopy.bind(\"Resize\", function() {\n\t\t\t\t\t\trender.call(this, opts.type, opts.quality);\n\t\t\t\t\t});\n\n\t\t\t\t\timgCopy.bind(\"Load\", function() {\n\t\t\t\t\t\tthis.downsize(opts);\n\t\t\t\t\t});\n\n\t\t\t\t\t\/\/ if embedded thumb data is available and dimensions are big enough, use it\n\t\t\t\t\tif (this.meta.thumb && this.meta.thumb.width >= opts.width && this.meta.thumb.height >= opts.height) {\n\t\t\t\t\t\timgCopy.load(this.meta.thumb.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\timgCopy.clone(this, false);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn imgCopy;\n\t\t\t\t} catch(ex) {\n\t\t\t\t\t\/\/ for now simply trigger error event\n\t\t\t\t\tthis.trigger('error', ex.code);\n\t\t\t\t}\n\t\t\t}","language":"javascript"}
{"code":"def windows_package_version\n      major, minor, patch = project.build_version.split(\/[.+-]\/)\n      [major, minor, patch, project.build_iteration].join(\".\")\n    end","language":"ruby"}
{"code":"public void info(String message, Throwable t) throws NullPointerException,\r\n\t\t\tFacilityException {\r\n\t\tsendNotification(TraceLevel.INFO, message, t);\r\n\t\tlogger.info(message,t);\r\n\t\t\r\n\t}","language":"java"}
{"code":"public static boolean requestDriverTermination(\n        final File directory,\n        final DirectBuffer tokenBuffer,\n        final int tokenOffset,\n        final int tokenLength)\n    {\n        final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE);\n\n        if (cncFile.exists() && cncFile.length() > 0)\n        {\n            final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\");\n            try\n            {\n                final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer);\n                final int cncVersion = cncMetaDataBuffer.getIntVolatile(cncVersionOffset(0));\n\n                if (CncFileDescriptor.CNC_VERSION != cncVersion)\n                {\n                    throw new AeronException(\n                        \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion);\n                }\n\n                final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer(\n                    CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer));\n                final long clientId = toDriverBuffer.nextCorrelationId();\n\n                final DriverProxy driverProxy = new DriverProxy(toDriverBuffer, clientId);\n\n                return driverProxy.terminateDriver(tokenBuffer, tokenOffset, tokenLength);\n            }\n            finally\n            {\n                IoUtil.unmap(cncByteBuffer);\n            }\n        }\n\n        return false;\n    }","language":"java"}
{"code":"def detect_faces(images_file: nil, images_filename: nil, images_file_content_type: nil, url: nil, accept_language: nil)\n      headers = {\n        \"Accept-Language\" => accept_language\n      }\n      sdk_headers = Common.new.get_sdk_headers(\"watson_vision_combined\", \"V3\", \"detect_faces\")\n      headers.merge!(sdk_headers)\n\n      params = {\n        \"version\" => @version\n      }\n\n      form_data = {}\n\n      unless images_file.nil?\n        unless images_file.instance_of?(StringIO) || images_file.instance_of?(File)\n          images_file = images_file.respond_to?(:to_json) ? StringIO.new(images_file.to_json) : StringIO.new(images_file)\n        end\n        images_filename = images_file.path if images_filename.nil? && images_file.respond_to?(:path)\n        form_data[:images_file] = HTTP::FormData::File.new(images_file, content_type: images_file_content_type.nil? ? \"application\/octet-stream\" : images_file_content_type, filename: images_filename)\n      end\n\n      form_data[:url] = HTTP::FormData::Part.new(url.to_s, content_type: \"text\/plain\") unless url.nil?\n\n      method_url = \"\/v3\/detect_faces\"\n\n      response = request(\n        method: \"POST\",\n        url: method_url,\n        headers: headers,\n        params: params,\n        form: form_data,\n        accept_json: true\n      )\n      response\n    end","language":"ruby"}
{"code":"def is_runnable?(direction)\n      self.class.rerunnable_safe? || \n      (direction == UP && status.current_status < status_complete) || \n      (direction == DOWN && status.current_status > 0)\n    end","language":"ruby"}
{"code":"function(module, exports) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\texports['default'] = function (instance) {\n\t  instance.registerHelper('lookup', function (obj, field) {\n\t    return obj && obj[field];\n\t  });\n\t};\n\n\tmodule.exports = exports['default'];\n\n\/***\/ }","language":"javascript"}
{"code":"func applyChangeSet(build *Manifest, changeSet *pb.ManifestChangeSet) error {\n\tfor _, change := range changeSet.Changes {\n\t\tif err := applyManifestChange(build, change); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}","language":"go"}
{"code":"def create_classifier(metadata:, training_data:)\n      raise ArgumentError.new(\"metadata must be provided\") if metadata.nil?\n\n      raise ArgumentError.new(\"training_data must be provided\") if training_data.nil?\n\n      headers = {\n      }\n      sdk_headers = Common.new.get_sdk_headers(\"natural_language_classifier\", \"V1\", \"create_classifier\")\n      headers.merge!(sdk_headers)\n\n      form_data = {}\n\n      unless metadata.instance_of?(StringIO) || metadata.instance_of?(File)\n        metadata = metadata.respond_to?(:to_json) ? StringIO.new(metadata.to_json) : StringIO.new(metadata)\n      end\n      form_data[:training_metadata] = HTTP::FormData::File.new(metadata, content_type: \"application\/json\", filename: metadata.respond_to?(:path) ? metadata.path : nil)\n\n      unless training_data.instance_of?(StringIO) || training_data.instance_of?(File)\n        training_data = training_data.respond_to?(:to_json) ? StringIO.new(training_data.to_json) : StringIO.new(training_data)\n      end\n      form_data[:training_data] = HTTP::FormData::File.new(training_data, content_type: \"text\/csv\", filename: training_data.respond_to?(:path) ? training_data.path : nil)\n\n      method_url = \"\/v1\/classifiers\"\n\n      response = request(\n        method: \"POST\",\n        url: method_url,\n        headers: headers,\n        form: form_data,\n        accept_json: true\n      )\n      response\n    end","language":"ruby"}
{"code":"func (l *LogsIter) Err() error {\n\tif l.err == io.EOF {\n\t\treturn nil\n\t}\n\treturn grpcutil.ScrubGRPC(l.err)\n}","language":"go"}
{"code":"public static void main(String[] args)\n    {\n        try\n        {\n            Main main = new Main();\n\n            main.start();\n\n            Runtime.getRuntime().addShutdownHook(main.getShutdownHook());\n\n            main.awaitTermination(1, TimeUnit.DAYS);\n        }\n        catch (InterruptedException e)\n        {\n            e = null;\n            Thread.currentThread().interrupt();\n        }\n    }","language":"java"}
{"code":"def glossary_term_show(account_id, glossary_id, id)\n      path = sprintf(\"\/api\/v2\/accounts\/%s\/glossaries\/%s\/terms\/%s\", account_id, glossary_id, id)\n      data_hash = {}\n      post_body = nil\n  \n      reqHelper = PhraseApp::ParamsHelpers::BodyTypeHelper.new(data_hash, post_body)\n      rc, err = PhraseApp.send_request(@credentials, \"GET\", path, reqHelper.ctype, reqHelper.body, 200)\n      if err != nil\n        return nil, err\n      end\n      \n      return PhraseApp::ResponseObjects::GlossaryTerm.new(JSON.load(rc.body)), err\n    end","language":"ruby"}
{"code":"def make(self, analyte):\n        \"\"\"\n        Make filter for specified analyte(s).\n\n        Filter specified in filt.switches.\n\n        Parameters\n        ----------\n        analyte : str or array_like\n            Name or list of names of analytes.\n\n        Returns\n        -------\n        array_like\n            boolean filter\n        \"\"\"\n        if analyte is None:\n            analyte = self.analytes\n        elif isinstance(analyte, str):\n            analyte = [analyte]\n\n        out = []\n        for f in self.components.keys():\n            for a in analyte:\n                if self.switches[a][f]:\n                    out.append(f)\n        key = ' & '.join(sorted(out))\n        for a in analyte:\n            self.keys[a] = key\n        return self.make_fromkey(key)","language":"python"}
{"code":"final public void clearFormattingInSelection(RTEditText editor) {\n        Spannable text = editor.getText();\n\n        \/\/ if no selection --> select the whole text\n        \/\/ otherwise use the getSelection method (implented by sub classes)\n        Selection selection = new Selection(editor);\n        selection = selection.isEmpty() ? new Selection(0, text.length()) : getSelection(editor);\n\n        List<RTSpan<V>> spans = getSpans(text, selection, SpanCollectMode.EXACT);\n        for (Object span : spans) {\n            editor.getText().removeSpan(span);\n        }\n    }","language":"java"}
{"code":"function cssDependencies(file, instance, options) {\n\n    var dependencies = walkDependencies(\n        file,\n        instance.cssRules\n    );\n\n    correctDependencies(\n        file,\n        dependencies,\n        instance.correctDependency\n    );\n\n    filterDependencies(\n        file,\n        dependencies,\n        instance.filterDependency\n    );\n\n    if (options.process) {\n        options.process(file, dependencies);\n    }\n\n    if (options.rename) {\n\n        renameDependencies(\n            file,\n            dependencies,\n            function (dependency) {\n                return options.rename(\n                    file,\n                    dependency,\n                    instance.hashMap,\n                    instance.dependencyMap\n                );\n            }\n        );\n\n    }\n}","language":"javascript"}
{"code":"func concatArgs(args ...interface{}) string {\n\tres := fmt.Sprintln(args...)\n\treturn res[0 : len(res)-1] \/\/ Remove newline at the end\n}","language":"go"}
{"code":"func (a *APIServer) GetChunk(request *GetChunkRequest, server Worker_GetChunkServer) error {\n\tfilter := hashtree.NewFilter(a.numShards, request.Shard)\n\tif request.Stats {\n\t\treturn a.chunkStatsCache.Get(request.Id, grpcutil.NewStreamingBytesWriter(server), filter)\n\t}\n\treturn a.chunkCache.Get(request.Id, grpcutil.NewStreamingBytesWriter(server), filter)\n}","language":"go"}
{"code":"function removeDimArrays(props) {\n  const names = map(props.groupedKeys, key => `${key}Array`)\n  return omit(props, names)\n}","language":"javascript"}
{"code":"def get_pandas_df(self, hql, parameters=None):\n        \"\"\"\n        Get a pandas dataframe from a sql query.\n        \"\"\"\n        import pandas\n        cursor = self.get_cursor()\n        try:\n            cursor.execute(self._strip_sql(hql), parameters)\n            data = cursor.fetchall()\n        except DatabaseError as e:\n            raise PrestoException(self._get_pretty_exception_message(e))\n        column_descriptions = cursor.description\n        if data:\n            df = pandas.DataFrame(data)\n            df.columns = [c[0] for c in column_descriptions]\n        else:\n            df = pandas.DataFrame()\n        return df","language":"python"}
{"code":"public double getValue(double lat, double lon) {\n        if (module == null) {\n            throw new NoModuleException();\n        }\n        double[] vec = Utils.latLonToXYZ(lat, lon);\n        return module.getValue(vec[0], vec[1], vec[2]);\n    }","language":"java"}
{"code":"function _constructor(host, port, schema, adapter, user, password, database, identity) {\n        if (_self.cleanArguments(arguments).length == 1 && typeof arguments[0] === 'object'){\n            _self.host = arguments[0].host;\n            _self.port = arguments[0].port;\n            _self.schema = arguments[0].schema;\n            _self.adapter = arguments[0].adapter;\n            _self.user = arguments[0].user;\n            _self.password = arguments[0].password;\n            _self.database = arguments[0].database;\n            _self.identity = arguments[0].identity;\n            _self.validate();\n        } else {\n            _self.host = host;\n            _self.port = port;\n            _self.schema = schema;\n            _self.adapter = adapter;\n            _self.user = user;\n            _self.password = password;\n            _self.database = database;\n            if(identity) _self.identity = identity;\n        }\n    }","language":"javascript"}
